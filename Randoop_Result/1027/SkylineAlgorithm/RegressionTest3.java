package SkylineAlgorithm;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        int int13 = point5.getY();
        int int14 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        int int23 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean27 = point20.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean31 = point20.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        int int40 = point37.getY();
        boolean boolean41 = point20.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean45 = point37.dominates(point44);
        boolean boolean46 = point5.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int50 = point49.getY();
        boolean boolean51 = point44.dominates(point49);
        int int52 = point49.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getX();
        int int9 = point5.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm32.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point37 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList43, pointArray42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm34.produceFinalSkyLine(pointList43, pointList46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm32.produceFinalSkyLine(pointList47, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm63.produceSubSkyLines(pointList73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point82 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList88, pointArray87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm90.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm79.produceFinalSkyLine(pointList88, pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm63.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm32.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass97 = pointList96.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(pointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(pointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 0);
        boolean boolean12 = point6.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        int int17 = point15.getY();
        int int18 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int22 = point21.getY();
        boolean boolean23 = point15.dominates(point21);
        int int24 = point21.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        int int33 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean37 = point30.dominates(point36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        int int45 = point43.getY();
        int int46 = point43.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean50 = point43.dominates(point49);
        boolean boolean51 = point30.dominates(point43);
        boolean boolean52 = point21.dominates(point43);
        int int53 = point43.getX();
        boolean boolean54 = point11.dominates(point43);
        java.lang.Class<?> wildcardClass55 = point43.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean23 = point16.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        boolean boolean27 = point16.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        int int31 = point30.getX();
        int int32 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean36 = point30.dominates(point35);
        int int37 = point35.getY();
        boolean boolean38 = point26.dominates(point35);
        int int39 = point26.getX();
        int int40 = point26.getX();
        int int41 = point26.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point33.dominates(point46);
        boolean boolean55 = point19.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        boolean boolean71 = point61.dominates(point69);
        int int72 = point69.getY();
        int int73 = point69.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int77 = point76.getX();
        int int78 = point76.getX();
        int int79 = point76.getX();
        int int80 = point76.getX();
        int int81 = point76.getY();
        boolean boolean82 = point69.dominates(point76);
        boolean boolean83 = point46.dominates(point76);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int87 = point86.getX();
        int int88 = point86.getX();
        int int89 = point86.getX();
        int int90 = point86.getY();
        boolean boolean91 = point76.dominates(point86);
        java.lang.Class<?> wildcardClass92 = point86.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 52 + "'", int87 == 52);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) (byte) 10);
        int int3 = point2.getX();
        int int4 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList2 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList3 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList4 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList5 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList6 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList7 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point11 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList17, pointArray16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm19.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList21 = skylineAlgorithm8.produceFinalSkyLine(pointList17, pointList20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point26 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList32, pointArray31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm34.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm23.produceFinalSkyLine(pointList32, pointList35);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm22.produceSubSkyLines(pointList32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList39 = skylineAlgorithm38.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm8.produceFinalSkyLine(pointList37, pointList39);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm8.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm8.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm8.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm8.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm8.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm8.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm8.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm8.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point52 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList58, pointArray57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm60.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm49.produceFinalSkyLine(pointList58, pointList61);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm49.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm49.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm49.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm49.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm49.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm49.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean77 = point73.dominates(point76);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point73 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList79, pointArray78);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm81.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm70.produceFinalSkyLine(pointList79, pointList82);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm69.produceSubSkyLines(pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm49.produceSubSkyLines(pointList79);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm0.produceFinalSkyLine(pointList48, pointList85);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(pointList2);
        org.junit.Assert.assertNotNull(pointList3);
        org.junit.Assert.assertNotNull(pointList4);
        org.junit.Assert.assertNotNull(pointList5);
        org.junit.Assert.assertNotNull(pointList6);
        org.junit.Assert.assertNotNull(pointList7);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(pointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertNotNull(pointList21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(pointArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertNotNull(pointList39);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(pointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(pointArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 0);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getX();
        int int6 = point2.getY();
        int int7 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int23 = point22.getX();
        int int24 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        int int33 = point30.getX();
        boolean boolean34 = point22.dominates(point30);
        boolean boolean35 = point16.dominates(point30);
        int int36 = point16.getX();
        int int37 = point16.getY();
        int int38 = point16.getY();
        java.lang.Class<?> wildcardClass39 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int21 = point20.getX();
        int int22 = point20.getX();
        int int23 = point20.getX();
        int int24 = point20.getY();
        boolean boolean25 = point15.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int29 = point28.getX();
        int int30 = point28.getX();
        boolean boolean31 = point20.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point20.dominates(point37);
        int int40 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point20.dominates(point52);
        java.lang.Class<?> wildcardClass55 = point20.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 52);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', (int) (byte) 1);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList21 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList22 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm0.produceSubSkyLines(pointList26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertNotNull(pointList21);
        org.junit.Assert.assertNotNull(pointList22);
        org.junit.Assert.assertNotNull(pointList23);
        org.junit.Assert.assertNotNull(pointList24);
        org.junit.Assert.assertNotNull(pointList25);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int9 = point8.getX();
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean14 = point8.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        int int25 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean29 = point22.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int33 = point32.getY();
        boolean boolean34 = point28.dominates(point32);
        int int35 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int39 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point45.getY();
        int int48 = point45.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean52 = point45.dominates(point51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean56 = point45.dominates(point55);
        int int57 = point55.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int61 = point60.getX();
        int int62 = point60.getX();
        int int63 = point60.getX();
        int int64 = point60.getY();
        boolean boolean65 = point55.dominates(point60);
        int int66 = point60.getY();
        boolean boolean67 = point38.dominates(point60);
        int int68 = point60.getY();
        boolean boolean69 = point32.dominates(point60);
        boolean boolean70 = point5.dominates(point32);
        int int71 = point32.getY();
        boolean boolean72 = point2.dominates(point32);
        int int73 = point2.getY();
        int int74 = point2.getX();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 97 + "'", int71 == 97);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point24 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList30, pointArray29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm21.produceFinalSkyLine(pointList30, pointList33);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm20.produceSubSkyLines(pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm0.produceSubSkyLines(pointList30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point40 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList46, pointArray45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm48.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm37.produceFinalSkyLine(pointList46, pointList49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point54 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList60, pointArray59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm51.produceFinalSkyLine(pointList60, pointList63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point68 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList74, pointArray73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm76.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm65.produceFinalSkyLine(pointList74, pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm37.produceFinalSkyLine(pointList64, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.produceSubSkyLines(pointList64);
        java.lang.Class<?> wildcardClass81 = pointList64.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(pointArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(pointArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(pointArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(pointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int6 = point5.getX();
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean11 = point5.dominates(point10);
        boolean boolean12 = point2.dominates(point10);
        int int13 = point2.getX();
        int int14 = point2.getX();
        int int15 = point2.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean16 = point5.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 52);
        boolean boolean20 = point15.dominates(point19);
        int int21 = point19.getX();
        int int22 = point19.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int21 = point20.getX();
        boolean boolean22 = point5.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int26 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean30 = point25.dominates(point29);
        boolean boolean31 = point5.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        boolean boolean47 = point37.dominates(point45);
        int int48 = point37.getX();
        int int49 = point37.getY();
        boolean boolean50 = point5.dominates(point37);
        int int51 = point37.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int9 = point8.getY();
        int int10 = point8.getY();
        boolean boolean11 = point5.dominates(point8);
        int int12 = point5.getY();
        int int13 = point5.getY();
        boolean boolean14 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass15 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm16.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm16.produceFinalSkyLine(pointList31, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.produceSubSkyLines(pointList46);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass51 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) (short) 10);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int7 = point6.getX();
        int int8 = point6.getX();
        int int9 = point6.getX();
        int int10 = point6.getX();
        int int11 = point6.getY();
        boolean boolean12 = point2.dominates(point6);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean58 = point51.dominates(point57);
        boolean boolean59 = point38.dominates(point51);
        boolean boolean60 = point2.dominates(point38);
        int int61 = point38.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean68 = point64.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) '#');
        boolean boolean72 = point64.dominates(point71);
        boolean boolean73 = point38.dominates(point64);
        int int74 = point64.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        int int13 = point5.getY();
        int int14 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 100);
        int int18 = point17.getY();
        boolean boolean19 = point5.dominates(point17);
        int int20 = point5.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (int) 'a');
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        boolean boolean8 = point2.dominates(point5);
        int int9 = point2.getY();
        int int10 = point2.getY();
        int int11 = point2.getY();
        java.lang.Class<?> wildcardClass12 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getX();
        int int14 = point6.getY();
        int int15 = point6.getY();
        int int16 = point6.getY();
        int int17 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) '4');
        boolean boolean21 = point6.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 100);
        int int25 = point24.getX();
        boolean boolean26 = point6.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int30 = point29.getY();
        int int31 = point29.getY();
        int int32 = point29.getY();
        int int33 = point29.getY();
        boolean boolean34 = point6.dominates(point29);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) -1);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, 10);
        boolean boolean10 = point5.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int14 = point13.getX();
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int19 = point18.getY();
        int int20 = point18.getY();
        int int21 = point18.getY();
        boolean boolean22 = point5.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 52);
        int int26 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 52);
        boolean boolean30 = point25.dominates(point29);
        int int31 = point25.getY();
        boolean boolean32 = point18.dominates(point25);
        int int33 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        int int41 = point39.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        boolean boolean49 = point39.dominates(point47);
        int int50 = point39.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int54 = point53.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        int int62 = point57.getX();
        boolean boolean63 = point53.dominates(point57);
        int int64 = point53.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        int int72 = point70.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean79 = point75.dominates(point78);
        boolean boolean80 = point70.dominates(point78);
        int int81 = point78.getX();
        int int82 = point78.getX();
        boolean boolean83 = point53.dominates(point78);
        int int84 = point78.getY();
        boolean boolean85 = point39.dominates(point78);
        int int86 = point39.getY();
        boolean boolean87 = point25.dominates(point39);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        int int21 = point16.getY();
        int int22 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) 10);
        int int26 = point25.getY();
        int int27 = point25.getX();
        boolean boolean28 = point16.dominates(point25);
        int int29 = point16.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) 0);
        int int3 = point2.getX();
        int int4 = point2.getY();
        java.lang.Class<?> wildcardClass5 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean12 = point5.dominates(point11);
        int int13 = point11.getX();
        int int14 = point11.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        boolean boolean23 = point10.dominates(point20);
        int int24 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', (int) (byte) 100);
        int int28 = point27.getY();
        int int29 = point27.getX();
        boolean boolean30 = point20.dominates(point27);
        int int31 = point27.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32 + "'", int29 == 32);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 32 + "'", int31 == 32);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int3 = point2.getX();
        int int4 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 97);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 35);
        int int6 = point5.getY();
        boolean boolean7 = point2.dominates(point5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        int int20 = point2.getY();
        int int21 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int25 = point24.getY();
        int int26 = point24.getY();
        boolean boolean27 = point2.dominates(point24);
        int int28 = point2.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int9 = point8.getY();
        boolean boolean10 = point2.dominates(point8);
        int int11 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        int int19 = point17.getY();
        int int20 = point17.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean24 = point17.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        int int33 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean37 = point30.dominates(point36);
        boolean boolean38 = point17.dominates(point30);
        boolean boolean39 = point8.dominates(point30);
        int int40 = point8.getY();
        int int41 = point8.getX();
        int int42 = point8.getX();
        java.lang.Class<?> wildcardClass43 = point8.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) ' ');
        int int3 = point2.getY();
        int int4 = point2.getX();
        java.lang.Class<?> wildcardClass5 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getY();
        int int17 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        int int26 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean30 = point23.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean34 = point23.dominates(point33);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 52);
        boolean boolean38 = point33.dominates(point37);
        boolean boolean39 = point13.dominates(point37);
        int int40 = point37.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (-1));
        boolean boolean19 = point13.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int23 = point22.getX();
        int int24 = point22.getX();
        int int25 = point22.getX();
        int int26 = point22.getY();
        int int27 = point22.getY();
        boolean boolean28 = point13.dominates(point22);
        int int29 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int36 = point35.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point39.getX();
        boolean boolean45 = point35.dominates(point39);
        int int46 = point39.getX();
        boolean boolean47 = point32.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point39.dominates(point50);
        boolean boolean52 = point22.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        int int61 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean65 = point58.dominates(point64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean69 = point58.dominates(point68);
        int int70 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int74 = point73.getX();
        boolean boolean75 = point58.dominates(point73);
        int int76 = point58.getY();
        boolean boolean77 = point39.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int81 = point80.getY();
        int int82 = point80.getY();
        int int83 = point80.getX();
        boolean boolean84 = point39.dominates(point80);
        int int85 = point80.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point2.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int25 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean29 = point24.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        int int38 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean42 = point35.dominates(point41);
        boolean boolean43 = point24.dominates(point35);
        boolean boolean44 = point2.dominates(point24);
        int int45 = point24.getX();
        int int46 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (short) 1);
        boolean boolean50 = point24.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        int int58 = point56.getY();
        int int59 = point56.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean63 = point56.dominates(point62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean67 = point56.dominates(point66);
        int int68 = point56.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int72 = point71.getX();
        boolean boolean73 = point56.dominates(point71);
        boolean boolean74 = point24.dominates(point56);
        int int75 = point24.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point8.getX();
        boolean boolean14 = point5.dominates(point8);
        int int15 = point5.getX();
        boolean boolean16 = point2.dominates(point5);
        int int17 = point2.getX();
        int int18 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 10);
        int int3 = point2.getY();
        int int4 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point29.dominates(point37);
        int int40 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int44 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point47.getX();
        boolean boolean53 = point43.dominates(point47);
        boolean boolean54 = point37.dominates(point43);
        boolean boolean55 = point23.dominates(point37);
        boolean boolean56 = point16.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) (short) 10);
        boolean boolean60 = point37.dominates(point59);
        java.lang.Class<?> wildcardClass61 = point59.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList3 = skylineAlgorithm2.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point7 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList13, pointArray12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm15.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm4.produceFinalSkyLine(pointList13, pointList16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm2.produceFinalSkyLine(pointList17, pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.produceSubSkyLines(pointList32);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass37 = pointList36.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(pointList3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(pointArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) (byte) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        int int8 = point5.getY();
        boolean boolean9 = point2.dominates(point5);
        int int10 = point5.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        int int9 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int13 = point12.getX();
        int int14 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int18 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point21.getX();
        boolean boolean27 = point17.dominates(point21);
        int int28 = point17.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        boolean boolean44 = point34.dominates(point42);
        int int45 = point42.getX();
        int int46 = point42.getX();
        boolean boolean47 = point17.dominates(point42);
        int int48 = point17.getX();
        boolean boolean49 = point12.dominates(point17);
        boolean boolean50 = point5.dominates(point17);
        int int51 = point17.getX();
        int int52 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int56 = point55.getX();
        boolean boolean57 = point17.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int61 = point60.getY();
        boolean boolean62 = point55.dominates(point60);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, 97);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        int int13 = point9.getY();
        boolean boolean14 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 0);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        int int29 = point27.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        boolean boolean37 = point27.dominates(point35);
        int int38 = point27.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int42 = point41.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        int int50 = point45.getX();
        boolean boolean51 = point41.dominates(point45);
        int int52 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        boolean boolean68 = point58.dominates(point66);
        int int69 = point66.getX();
        int int70 = point66.getX();
        boolean boolean71 = point41.dominates(point66);
        int int72 = point66.getY();
        boolean boolean73 = point27.dominates(point66);
        int int74 = point66.getY();
        boolean boolean75 = point17.dominates(point66);
        int int76 = point66.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) 'a');
        boolean boolean83 = point79.dominates(point82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) '4');
        boolean boolean87 = point82.dominates(point86);
        boolean boolean88 = point66.dominates(point82);
        boolean boolean89 = point2.dominates(point82);
        int int90 = point82.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 97 + "'", int90 == 97);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point53 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList59, pointArray58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm61.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm50.produceFinalSkyLine(pointList59, pointList62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point68 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList74, pointArray73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm76.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm65.produceFinalSkyLine(pointList74, pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm64.produceSubSkyLines(pointList74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm80.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm50.produceFinalSkyLine(pointList79, pointList81);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.produceSubSkyLines(pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(pointArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(pointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
        org.junit.Assert.assertNotNull(pointList87);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, 100);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int16 = point15.getY();
        boolean boolean17 = point11.dominates(point15);
        int int18 = point15.getY();
        java.lang.Class<?> wildcardClass19 = point15.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 10);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) ' ');
        int int10 = point9.getX();
        boolean boolean11 = point5.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        boolean boolean30 = point20.dominates(point28);
        int int31 = point28.getX();
        int int32 = point28.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        boolean boolean48 = point38.dominates(point46);
        int int49 = point46.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int53 = point52.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean60 = point56.dominates(point59);
        int int61 = point56.getX();
        boolean boolean62 = point52.dominates(point56);
        boolean boolean63 = point46.dominates(point52);
        int int64 = point52.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        int int72 = point70.getY();
        int int73 = point70.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean77 = point70.dominates(point76);
        boolean boolean78 = point52.dominates(point70);
        boolean boolean79 = point28.dominates(point70);
        int int80 = point70.getX();
        boolean boolean81 = point14.dominates(point70);
        int int82 = point70.getY();
        boolean boolean83 = point9.dominates(point70);
        int int84 = point9.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 32 + "'", int84 == 32);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList29);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass36 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        int int22 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        boolean boolean38 = point28.dominates(point36);
        int int39 = point36.getX();
        int int40 = point36.getX();
        boolean boolean41 = point11.dominates(point36);
        boolean boolean42 = point7.dominates(point11);
        int int43 = point11.getY();
        boolean boolean44 = point2.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int48 = point47.getX();
        int int49 = point47.getY();
        int int50 = point47.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int54 = point53.getY();
        boolean boolean55 = point47.dominates(point53);
        boolean boolean56 = point11.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (byte) -1);
        int int60 = point59.getX();
        boolean boolean61 = point11.dominates(point59);
        java.lang.Class<?> wildcardClass62 = point59.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int6 = point5.getY();
        boolean boolean7 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass8 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList3 = skylineAlgorithm2.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point7 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList13, pointArray12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm15.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm4.produceFinalSkyLine(pointList13, pointList16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm2.produceFinalSkyLine(pointList17, pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.produceSubSkyLines(pointList32);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point40 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList46, pointArray45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm48.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm37.produceFinalSkyLine(pointList46, pointList49);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm36.produceSubSkyLines(pointList46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point55 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList61, pointArray60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm63.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm52.produceFinalSkyLine(pointList61, pointList64);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm36.produceSubSkyLines(pointList65);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm0.produceSubSkyLines(pointList65);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass73 = pointList72.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(pointList3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(pointArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(pointArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(pointArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertNotNull(pointList69);
        org.junit.Assert.assertNotNull(pointList70);
        org.junit.Assert.assertNotNull(pointList71);
        org.junit.Assert.assertNotNull(pointList72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getY();
        int int6 = point2.getX();
        java.lang.Class<?> wildcardClass7 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getX();
        int int8 = point2.getX();
        int int9 = point2.getX();
        int int10 = point2.getX();
        int int11 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        boolean boolean23 = point6.dominates(point20);
        int int24 = point6.getY();
        int int25 = point6.getY();
        boolean boolean26 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        int int35 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean39 = point32.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean43 = point32.dominates(point42);
        int int44 = point42.getX();
        int int45 = point42.getY();
        int int46 = point42.getY();
        boolean boolean47 = point2.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        int int55 = point50.getX();
        int int56 = point50.getY();
        int int57 = point50.getX();
        int int58 = point50.getX();
        int int59 = point50.getX();
        boolean boolean60 = point42.dominates(point50);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 32 + "'", int45 == 32);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 32 + "'", int46 == 32);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 10);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getX();
        java.lang.Class<?> wildcardClass9 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean16 = point9.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean20 = point9.dominates(point19);
        int int21 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int25 = point24.getX();
        int int26 = point24.getX();
        int int27 = point24.getX();
        int int28 = point24.getY();
        boolean boolean29 = point19.dominates(point24);
        int int30 = point24.getY();
        boolean boolean31 = point2.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int35 = point34.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point38.getX();
        boolean boolean44 = point34.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int48 = point47.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        int int56 = point51.getX();
        boolean boolean57 = point47.dominates(point51);
        int int58 = point51.getX();
        boolean boolean59 = point34.dominates(point51);
        int int60 = point34.getX();
        boolean boolean61 = point24.dominates(point34);
        int int62 = point34.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 0);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int11 = point10.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        int int19 = point14.getX();
        boolean boolean20 = point10.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int24 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point27.getX();
        boolean boolean33 = point23.dominates(point27);
        int int34 = point27.getX();
        boolean boolean35 = point10.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point41.getY();
        int int44 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean48 = point41.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        int int56 = point54.getY();
        int int57 = point54.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean61 = point54.dominates(point60);
        boolean boolean62 = point41.dominates(point54);
        boolean boolean63 = point27.dominates(point54);
        int int64 = point54.getY();
        int int65 = point54.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int69 = point68.getX();
        int int70 = point68.getY();
        int int71 = point68.getY();
        boolean boolean72 = point54.dominates(point68);
        int int73 = point54.getX();
        boolean boolean74 = point6.dominates(point54);
        boolean boolean75 = point2.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (byte) 1);
        boolean boolean79 = point2.dominates(point78);
        int int80 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 32 + "'", int80 == 32);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point14.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        boolean boolean24 = point14.dominates(point22);
        int int25 = point22.getY();
        int int26 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int30 = point29.getX();
        int int31 = point29.getX();
        int int32 = point29.getX();
        int int33 = point29.getX();
        int int34 = point29.getY();
        boolean boolean35 = point22.dominates(point29);
        boolean boolean36 = point2.dominates(point29);
        java.lang.Class<?> wildcardClass37 = point29.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        int int9 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean22 = point15.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean26 = point15.dominates(point25);
        int int27 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int31 = point30.getX();
        int int32 = point30.getX();
        int int33 = point30.getX();
        int int34 = point30.getY();
        boolean boolean35 = point25.dominates(point30);
        boolean boolean36 = point5.dominates(point25);
        int int37 = point5.getY();
        java.lang.Class<?> wildcardClass38 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList29);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm46.produceSubSkyLines(pointList56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm32.produceFinalSkyLine(pointList61, pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm0.produceSubSkyLines(pointList64);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm0.produceSubSkyLines(pointList68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 1);
        int int36 = point35.getY();
        boolean boolean37 = point2.dominates(point35);
        int int38 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int42 = point41.getY();
        int int43 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int47 = point46.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int51 = point50.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        int int59 = point54.getX();
        boolean boolean60 = point50.dominates(point54);
        int int61 = point50.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean68 = point64.dominates(point67);
        int int69 = point67.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean76 = point72.dominates(point75);
        boolean boolean77 = point67.dominates(point75);
        int int78 = point75.getX();
        int int79 = point75.getX();
        boolean boolean80 = point50.dominates(point75);
        boolean boolean81 = point46.dominates(point50);
        int int82 = point50.getY();
        boolean boolean83 = point41.dominates(point50);
        boolean boolean84 = point35.dominates(point50);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 52 + "'", int82 == 52);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        int int15 = point10.getX();
        int int16 = point10.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) '4');
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        boolean boolean24 = point19.dominates(point23);
        boolean boolean25 = point10.dominates(point23);
        java.lang.Class<?> wildcardClass26 = point10.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int19 = point18.getY();
        boolean boolean20 = point5.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int24 = point23.getX();
        int int25 = point23.getY();
        int int26 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int30 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean34 = point29.dominates(point33);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        int int42 = point40.getY();
        int int43 = point40.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean47 = point40.dominates(point46);
        boolean boolean48 = point29.dominates(point40);
        boolean boolean49 = point23.dominates(point29);
        boolean boolean50 = point5.dominates(point29);
        java.lang.Class<?> wildcardClass51 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean83 = point79.dominates(point82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point79 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList85, pointArray84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm87.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm76.produceFinalSkyLine(pointList85, pointList88);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm48.produceFinalSkyLine(pointList75, pointList85);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm0.produceSubSkyLines(pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass93 = pointList92.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(pointArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 0);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        int int23 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int27 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point30.getX();
        boolean boolean36 = point26.dominates(point30);
        int int37 = point26.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        int int45 = point43.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        boolean boolean53 = point43.dominates(point51);
        int int54 = point51.getX();
        int int55 = point51.getX();
        boolean boolean56 = point26.dominates(point51);
        int int57 = point51.getY();
        boolean boolean58 = point12.dominates(point51);
        int int59 = point51.getY();
        boolean boolean60 = point2.dominates(point51);
        int int61 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) 'a');
        boolean boolean68 = point64.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) '4');
        boolean boolean72 = point67.dominates(point71);
        boolean boolean73 = point51.dominates(point67);
        int int74 = point67.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 97 + "'", int74 == 97);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) '4');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, 0);
        int int6 = point5.getY();
        boolean boolean7 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point2.dominates(point13);
        int int16 = point2.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean83 = point79.dominates(point82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point79 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList85, pointArray84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm87.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm76.produceFinalSkyLine(pointList85, pointList88);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm48.produceFinalSkyLine(pointList75, pointList85);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm0.produceSubSkyLines(pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.produceSubSkyLines(pointList94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(pointArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point29.dominates(point37);
        int int40 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int44 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point47.getX();
        boolean boolean53 = point43.dominates(point47);
        boolean boolean54 = point37.dominates(point43);
        boolean boolean55 = point23.dominates(point37);
        boolean boolean56 = point16.dominates(point37);
        int int57 = point16.getX();
        int int58 = point16.getX();
        int int59 = point16.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        int int33 = point30.getX();
        int int34 = point30.getX();
        boolean boolean35 = point5.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point41.getY();
        int int44 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean48 = point41.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        int int56 = point54.getY();
        int int57 = point54.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean61 = point54.dominates(point60);
        boolean boolean62 = point41.dominates(point54);
        boolean boolean63 = point5.dominates(point41);
        boolean boolean64 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int68 = point67.getX();
        int int69 = point67.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int73 = point72.getX();
        int int74 = point72.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean81 = point77.dominates(point80);
        int int82 = point80.getY();
        int int83 = point80.getX();
        boolean boolean84 = point72.dominates(point80);
        int int85 = point72.getX();
        int int86 = point72.getX();
        boolean boolean87 = point67.dominates(point72);
        int int88 = point67.getX();
        boolean boolean89 = point2.dominates(point67);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point45.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        boolean boolean55 = point45.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        boolean boolean71 = point61.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point6, point13, point22, point38, point45, point61 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm0.produceSubSkyLines(pointList73);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean85 = point81.dominates(point84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point81 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList87, pointArray86);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm89.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm78.produceFinalSkyLine(pointList87, pointList90);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm0.produceSubSkyLines(pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass95 = pointList94.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(pointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) '4');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) ' ');
        int int6 = point5.getY();
        int int7 = point5.getY();
        boolean boolean8 = point2.dominates(point5);
        int int9 = point5.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int21 = point20.getX();
        int int22 = point20.getX();
        int int23 = point20.getX();
        int int24 = point20.getY();
        boolean boolean25 = point15.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int29 = point28.getX();
        int int30 = point28.getX();
        boolean boolean31 = point20.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point20.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) 'a');
        int int43 = point42.getX();
        boolean boolean44 = point20.dominates(point42);
        java.lang.Class<?> wildcardClass45 = point42.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) '#');
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean23 = point16.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        boolean boolean27 = point16.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        boolean boolean43 = point33.dominates(point41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int47 = point46.getY();
        boolean boolean48 = point33.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        int int59 = point54.getX();
        boolean boolean60 = point51.dominates(point54);
        boolean boolean61 = point46.dominates(point51);
        boolean boolean62 = point26.dominates(point51);
        int int63 = point26.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        boolean boolean19 = point9.dominates(point17);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int23 = point22.getY();
        boolean boolean24 = point9.dominates(point22);
        int int25 = point22.getX();
        boolean boolean26 = point2.dominates(point22);
        java.lang.Class<?> wildcardClass27 = point22.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (byte) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int9 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point12.getX();
        boolean boolean18 = point8.dominates(point12);
        int int19 = point12.getX();
        boolean boolean20 = point5.dominates(point12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int27 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point30.getX();
        boolean boolean36 = point26.dominates(point30);
        int int37 = point30.getX();
        int int38 = point30.getY();
        int int39 = point30.getY();
        boolean boolean40 = point23.dominates(point30);
        boolean boolean41 = point5.dominates(point23);
        int int42 = point23.getX();
        boolean boolean43 = point2.dominates(point23);
        java.lang.Class<?> wildcardClass44 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (-1));
        boolean boolean19 = point13.dominates(point18);
        java.lang.Class<?> wildcardClass20 = point13.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 0);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point14.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        boolean boolean24 = point14.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int28 = point27.getY();
        boolean boolean29 = point14.dominates(point27);
        int int30 = point27.getX();
        boolean boolean31 = point7.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean35 = point27.dominates(point34);
        boolean boolean36 = point2.dominates(point27);
        int int37 = point27.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        boolean boolean21 = point11.dominates(point19);
        int int22 = point11.getX();
        int int23 = point11.getY();
        int int24 = point11.getX();
        int int25 = point11.getX();
        boolean boolean26 = point2.dominates(point11);
        int int27 = point11.getY();
        int int28 = point11.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point32 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList38, pointArray37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm40.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm29.produceFinalSkyLine(pointList38, pointList41);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm28.produceSubSkyLines(pointList38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point47 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList53, pointArray52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm55.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm44.produceFinalSkyLine(pointList53, pointList56);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm28.produceSubSkyLines(pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.produceFinalSkyLine(pointList23, pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm62.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean91 = point87.dominates(point90);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray92 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point87 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList93, pointArray92);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm95 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm95.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm84.produceFinalSkyLine(pointList93, pointList96);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm83.produceSubSkyLines(pointList93);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList99 = skylineAlgorithm0.produceFinalSkyLine(pointList82, pointList93);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(pointArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(pointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(pointArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 1);
        int int36 = point35.getY();
        boolean boolean37 = point2.dominates(point35);
        int int38 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) (byte) 0);
        boolean boolean42 = point35.dominates(point41);
        java.lang.Class<?> wildcardClass43 = point35.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) '#');
        boolean boolean9 = point2.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, 32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) '4');
        boolean boolean16 = point12.dominates(point15);
        int int17 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int21 = point20.getX();
        int int22 = point20.getY();
        boolean boolean23 = point12.dominates(point20);
        boolean boolean24 = point8.dominates(point20);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        int int10 = point9.getY();
        boolean boolean11 = point5.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 97);
        boolean boolean15 = point5.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) '4');
        int int19 = point18.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int23 = point22.getY();
        boolean boolean24 = point18.dominates(point22);
        int int25 = point22.getX();
        boolean boolean26 = point5.dominates(point22);
        java.lang.Class<?> wildcardClass27 = point22.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        java.lang.Class<?> wildcardClass31 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int19 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point22.getX();
        boolean boolean28 = point18.dominates(point22);
        int int29 = point22.getX();
        boolean boolean30 = point5.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        int int38 = point36.getY();
        int int39 = point36.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean43 = point36.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        int int51 = point49.getY();
        int int52 = point49.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean56 = point49.dominates(point55);
        boolean boolean57 = point36.dominates(point49);
        boolean boolean58 = point22.dominates(point49);
        int int59 = point49.getY();
        int int60 = point49.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int64 = point63.getX();
        int int65 = point63.getY();
        int int66 = point63.getY();
        boolean boolean67 = point49.dominates(point63);
        boolean boolean68 = point2.dominates(point63);
        int int69 = point63.getX();
        int int70 = point63.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm32.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point37 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList43, pointArray42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm34.produceFinalSkyLine(pointList43, pointList46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm32.produceFinalSkyLine(pointList47, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm63.produceSubSkyLines(pointList73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point82 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList88, pointArray87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm90.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm79.produceFinalSkyLine(pointList88, pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm63.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm32.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.produceSubSkyLines(pointList92);
        java.lang.Class<?> wildcardClass96 = pointList92.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(pointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(pointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList2 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList3 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList4 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList5 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList6 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList7 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = skylineAlgorithm8.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = skylineAlgorithm10.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point15 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList21 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList21, pointArray20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = skylineAlgorithm23.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = skylineAlgorithm12.produceFinalSkyLine(pointList21, pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point29 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList35, pointArray34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = skylineAlgorithm37.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList39 = skylineAlgorithm26.produceFinalSkyLine(pointList35, pointList38);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm10.produceFinalSkyLine(pointList25, pointList38);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm8.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm8.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm8.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point47 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList53, pointArray52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm55.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm44.produceFinalSkyLine(pointList53, pointList56);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm8.produceSubSkyLines(pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm8.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm8.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm8.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm0.produceFinalSkyLine(pointList61, pointList62);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(pointList2);
        org.junit.Assert.assertNotNull(pointList3);
        org.junit.Assert.assertNotNull(pointList4);
        org.junit.Assert.assertNotNull(pointList5);
        org.junit.Assert.assertNotNull(pointList6);
        org.junit.Assert.assertNotNull(pointList7);
        org.junit.Assert.assertNotNull(pointList9);
        org.junit.Assert.assertNotNull(pointList11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(pointArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(pointList24);
        org.junit.Assert.assertNotNull(pointList25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(pointArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(pointList38);
        org.junit.Assert.assertNotNull(pointList39);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(pointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int6 = point5.getX();
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean11 = point5.dominates(point10);
        boolean boolean12 = point2.dominates(point10);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) '#');
        int int17 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point26.getY();
        int int29 = point26.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean33 = point26.dominates(point32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) '4');
        boolean boolean37 = point32.dominates(point36);
        boolean boolean38 = point20.dominates(point32);
        int int39 = point20.getY();
        boolean boolean40 = point16.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        boolean boolean47 = point43.dominates(point46);
        boolean boolean48 = point20.dominates(point46);
        int int49 = point20.getX();
        boolean boolean50 = point2.dominates(point20);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point29.dominates(point37);
        int int40 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int44 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point47.getX();
        boolean boolean53 = point43.dominates(point47);
        boolean boolean54 = point37.dominates(point43);
        boolean boolean55 = point23.dominates(point37);
        boolean boolean56 = point16.dominates(point37);
        int int57 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int61 = point60.getX();
        int int62 = point60.getY();
        boolean boolean63 = point16.dominates(point60);
        java.lang.Class<?> wildcardClass64 = point60.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (-1));
        boolean boolean19 = point13.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int23 = point22.getX();
        int int24 = point22.getX();
        int int25 = point22.getX();
        int int26 = point22.getY();
        int int27 = point22.getY();
        boolean boolean28 = point13.dominates(point22);
        int int29 = point22.getY();
        int int30 = point22.getX();
        int int31 = point22.getX();
        int int32 = point22.getX();
        java.lang.Class<?> wildcardClass33 = point22.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int8 = point7.getX();
        boolean boolean9 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) '#');
        int int13 = point12.getX();
        boolean boolean14 = point7.dominates(point12);
        int int15 = point7.getY();
        int int16 = point7.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point36 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList42, pointArray41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm44.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm33.produceFinalSkyLine(pointList42, pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm33.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point57 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList63, pointArray62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm65.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm54.produceFinalSkyLine(pointList63, pointList66);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm53.produceSubSkyLines(pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm33.produceSubSkyLines(pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = skylineAlgorithm0.produceSubSkyLines(pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass72 = pointList71.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(pointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(pointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertNotNull(pointList69);
        org.junit.Assert.assertNotNull(pointList70);
        org.junit.Assert.assertNotNull(pointList71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        boolean boolean21 = point2.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        boolean boolean40 = point30.dominates(point38);
        int int41 = point38.getY();
        boolean boolean42 = point24.dominates(point38);
        int int43 = point38.getY();
        boolean boolean44 = point2.dominates(point38);
        java.lang.Class<?> wildcardClass45 = point38.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        int int6 = point2.getX();
        int int7 = point2.getY();
        java.lang.Class<?> wildcardClass8 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int23 = point22.getX();
        int int24 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        int int33 = point30.getX();
        boolean boolean34 = point22.dominates(point30);
        boolean boolean35 = point16.dominates(point30);
        int int36 = point16.getY();
        java.lang.Class<?> wildcardClass37 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getX();
        int int8 = point2.getY();
        int int9 = point2.getX();
        int int10 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int14 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int18 = point17.getY();
        boolean boolean19 = point13.dominates(point17);
        boolean boolean20 = point2.dominates(point17);
        int int21 = point2.getX();
        java.lang.Class<?> wildcardClass22 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        int int5 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        boolean boolean23 = point10.dominates(point20);
        int int24 = point20.getY();
        java.lang.Class<?> wildcardClass25 = point20.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        boolean boolean19 = point9.dominates(point17);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int23 = point22.getY();
        boolean boolean24 = point9.dominates(point22);
        int int25 = point22.getX();
        boolean boolean26 = point2.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = point2.dominates(point27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) ' ');
        int int3 = point2.getX();
        int int4 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int21 = point20.getX();
        boolean boolean22 = point5.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int26 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean30 = point25.dominates(point29);
        boolean boolean31 = point5.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        boolean boolean35 = point25.dominates(point34);
        int int36 = point25.getX();
        java.lang.Class<?> wildcardClass37 = point25.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) (byte) 1);
        int int3 = point2.getX();
        int int4 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        boolean boolean19 = point9.dominates(point17);
        boolean boolean20 = point2.dominates(point9);
        int int21 = point9.getX();
        java.lang.Class<?> wildcardClass22 = point9.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        int int21 = point16.getY();
        int int22 = point16.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 52);
        boolean boolean26 = point16.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (byte) 10);
        boolean boolean30 = point25.dominates(point29);
        int int31 = point25.getX();
        int int32 = point25.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) 'a');
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        boolean boolean11 = point2.dominates(point8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        boolean boolean16 = point11.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) 'a');
        boolean boolean6 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass7 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int6 = point5.getX();
        int int7 = point5.getY();
        int int8 = point5.getX();
        int int9 = point5.getX();
        boolean boolean10 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass11 = point5.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) '4');
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        boolean boolean30 = point20.dominates(point28);
        int int31 = point28.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int35 = point34.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point38.getX();
        boolean boolean44 = point34.dominates(point38);
        boolean boolean45 = point28.dominates(point34);
        boolean boolean46 = point14.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int50 = point49.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        int int58 = point53.getX();
        boolean boolean59 = point49.dominates(point53);
        int int60 = point53.getX();
        int int61 = point53.getY();
        boolean boolean62 = point14.dominates(point53);
        boolean boolean63 = point11.dominates(point53);
        int int64 = point11.getY();
        boolean boolean65 = point2.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int72 = point71.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean79 = point75.dominates(point78);
        int int80 = point75.getX();
        boolean boolean81 = point71.dominates(point75);
        int int82 = point75.getX();
        boolean boolean83 = point68.dominates(point75);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean87 = point75.dominates(point86);
        int int88 = point75.getX();
        int int89 = point75.getY();
        int int90 = point75.getX();
        boolean boolean91 = point11.dominates(point75);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 0);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int10 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        int int18 = point13.getX();
        boolean boolean19 = point9.dominates(point13);
        int int20 = point13.getY();
        boolean boolean21 = point5.dominates(point13);
        java.lang.Class<?> wildcardClass22 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        int int17 = point9.getY();
        int int18 = point9.getY();
        boolean boolean19 = point2.dominates(point9);
        int int20 = point9.getX();
        int int21 = point9.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (-1));
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) '4');
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) '4');
        int int3 = point2.getY();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        int int24 = point13.getX();
        int int25 = point13.getY();
        boolean boolean26 = point7.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        boolean boolean45 = point35.dominates(point43);
        int int46 = point43.getY();
        boolean boolean47 = point29.dominates(point43);
        int int48 = point29.getY();
        boolean boolean49 = point7.dominates(point29);
        boolean boolean50 = point2.dominates(point29);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, 100);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 97);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int3 = point2.getY();
        int int4 = point2.getX();
        int int5 = point2.getX();
        int int6 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point18.getY();
        int int21 = point18.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean25 = point18.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean29 = point18.dominates(point28);
        int int30 = point18.getY();
        int int31 = point18.getX();
        boolean boolean32 = point12.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 100);
        boolean boolean36 = point12.dominates(point35);
        boolean boolean37 = point9.dominates(point35);
        boolean boolean38 = point2.dominates(point9);
        int int39 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean58 = point51.dominates(point57);
        boolean boolean59 = point38.dominates(point51);
        boolean boolean60 = point2.dominates(point38);
        int int61 = point2.getX();
        int int62 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 35);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) '#');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        int int7 = point5.getY();
        int int8 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int12 = point11.getY();
        boolean boolean13 = point5.dominates(point11);
        int int14 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        int int23 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean27 = point20.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean40 = point33.dominates(point39);
        boolean boolean41 = point20.dominates(point33);
        boolean boolean42 = point11.dominates(point33);
        int int43 = point11.getY();
        boolean boolean44 = point2.dominates(point11);
        int int45 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        int int56 = point54.getY();
        int int57 = point54.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean61 = point54.dominates(point60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean65 = point54.dominates(point64);
        int int66 = point64.getX();
        int int67 = point64.getY();
        int int68 = point64.getY();
        boolean boolean69 = point48.dominates(point64);
        int int70 = point64.getX();
        boolean boolean71 = point11.dominates(point64);
        java.lang.Class<?> wildcardClass72 = point64.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 32 + "'", int67 == 32);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 32 + "'", int68 == 32);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        int int9 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point18.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        boolean boolean28 = point18.dominates(point26);
        int int29 = point26.getX();
        int int30 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        int int38 = point36.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        boolean boolean46 = point36.dominates(point44);
        int int47 = point44.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int51 = point50.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        int int59 = point54.getX();
        boolean boolean60 = point50.dominates(point54);
        boolean boolean61 = point44.dominates(point50);
        int int62 = point50.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        int int70 = point68.getY();
        int int71 = point68.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean75 = point68.dominates(point74);
        boolean boolean76 = point50.dominates(point68);
        boolean boolean77 = point26.dominates(point68);
        int int78 = point68.getX();
        boolean boolean79 = point12.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        int int87 = point85.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point93 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean94 = point90.dominates(point93);
        boolean boolean95 = point85.dominates(point93);
        boolean boolean96 = point68.dominates(point93);
        boolean boolean97 = point5.dominates(point68);
        java.lang.Class<?> wildcardClass98 = point68.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean15 = point8.dominates(point14);
        boolean boolean16 = point2.dominates(point14);
        int int17 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) ' ');
        boolean boolean21 = point2.dominates(point20);
        int int22 = point20.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 32 + "'", int22 == 32);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, 1);
        int int3 = point2.getX();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int6 = point5.getX();
        int int7 = point5.getX();
        int int8 = point5.getY();
        int int9 = point5.getY();
        int int10 = point5.getX();
        int int11 = point5.getX();
        boolean boolean12 = point2.dominates(point5);
        int int13 = point2.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.produceSubSkyLines(pointList41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm0.produceFinalSkyLine(pointList41, pointList50);
        java.lang.Class<?> wildcardClass52 = pointList50.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList39 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertNotNull(pointList38);
        org.junit.Assert.assertNotNull(pointList39);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int3 = point2.getY();
        int int4 = point2.getX();
        int int5 = point2.getX();
        int int6 = point2.getY();
        int int7 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        int int24 = point21.getX();
        int int25 = point21.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        boolean boolean41 = point31.dominates(point39);
        int int42 = point39.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int46 = point45.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        int int54 = point49.getX();
        boolean boolean55 = point45.dominates(point49);
        boolean boolean56 = point39.dominates(point45);
        int int57 = point45.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean64 = point60.dominates(point63);
        int int65 = point63.getY();
        int int66 = point63.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean70 = point63.dominates(point69);
        boolean boolean71 = point45.dominates(point63);
        boolean boolean72 = point21.dominates(point63);
        int int73 = point63.getX();
        boolean boolean74 = point2.dominates(point63);
        int int75 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 100 + "'", int75 == 100);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) '4');
        int int3 = point2.getY();
        int int4 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point10.getX();
        boolean boolean16 = point6.dominates(point10);
        int int17 = point10.getX();
        boolean boolean18 = point2.dominates(point10);
        int int19 = point2.getY();
        java.lang.Class<?> wildcardClass20 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        int int21 = point16.getY();
        int int22 = point16.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 52);
        boolean boolean26 = point16.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        boolean boolean45 = point35.dominates(point43);
        int int46 = point43.getY();
        boolean boolean47 = point29.dominates(point43);
        int int48 = point43.getY();
        int int49 = point43.getY();
        int int50 = point43.getY();
        boolean boolean51 = point25.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean58 = point54.dominates(point57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int62 = point61.getX();
        int int63 = point61.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int67 = point66.getX();
        boolean boolean68 = point61.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int72 = point71.getY();
        boolean boolean73 = point66.dominates(point71);
        int int74 = point66.getX();
        boolean boolean75 = point57.dominates(point66);
        int int76 = point57.getY();
        boolean boolean77 = point25.dominates(point57);
        int int78 = point57.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        int int21 = point18.getY();
        int int22 = point18.getY();
        boolean boolean23 = point2.dominates(point18);
        int int24 = point2.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 32 + "'", int21 == 32);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 32 + "'", int22 == 32);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int9 = point8.getY();
        boolean boolean10 = point2.dominates(point8);
        int int11 = point2.getY();
        java.lang.Class<?> wildcardClass12 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) '4');
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int17 = point16.getX();
        int int18 = point16.getX();
        int int19 = point16.getX();
        boolean boolean20 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, 1);
        int int24 = point23.getX();
        boolean boolean25 = point16.dominates(point23);
        int int26 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int30 = point29.getY();
        boolean boolean31 = point23.dominates(point29);
        java.lang.Class<?> wildcardClass32 = point23.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean9 = point5.dominates(point8);
        boolean boolean10 = point2.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int14 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point17.getX();
        boolean boolean23 = point13.dominates(point17);
        int int24 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        boolean boolean40 = point30.dominates(point38);
        int int41 = point38.getX();
        int int42 = point38.getX();
        boolean boolean43 = point13.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        int int51 = point49.getY();
        int int52 = point49.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean56 = point49.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean63 = point59.dominates(point62);
        int int64 = point62.getY();
        int int65 = point62.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean69 = point62.dominates(point68);
        boolean boolean70 = point49.dominates(point62);
        boolean boolean71 = point13.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean78 = point74.dominates(point77);
        int int79 = point77.getY();
        int int80 = point77.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean84 = point77.dominates(point83);
        int int85 = point77.getY();
        boolean boolean86 = point13.dominates(point77);
        int int87 = point13.getY();
        boolean boolean88 = point8.dominates(point13);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 52 + "'", int87 == 52);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (-1));
        int int3 = point2.getY();
        int int4 = point2.getY();
        int int5 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        boolean boolean25 = point5.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int29 = point28.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point32.getX();
        boolean boolean38 = point28.dominates(point32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int42 = point41.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        int int50 = point45.getX();
        boolean boolean51 = point41.dominates(point45);
        int int52 = point45.getX();
        boolean boolean53 = point28.dominates(point45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int57 = point56.getX();
        int int58 = point56.getY();
        boolean boolean59 = point28.dominates(point56);
        boolean boolean60 = point5.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (int) 'a');
        boolean boolean64 = point5.dominates(point63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        int int72 = point70.getY();
        int int73 = point70.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean77 = point70.dominates(point76);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int81 = point80.getY();
        boolean boolean82 = point76.dominates(point80);
        int int83 = point80.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 35);
        boolean boolean87 = point80.dominates(point86);
        boolean boolean88 = point5.dominates(point80);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 97 + "'", int81 == 97);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point37 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList43, pointArray42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm34.produceFinalSkyLine(pointList43, pointList46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm34.produceFinalSkyLine(pointList61, pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm0.produceSubSkyLines(pointList76);
        java.lang.Class<?> wildcardClass78 = pointList77.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(pointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point24 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList30, pointArray29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm21.produceFinalSkyLine(pointList30, pointList33);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm20.produceSubSkyLines(pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm0.produceSubSkyLines(pointList30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = skylineAlgorithm37.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point42 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList48, pointArray47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm50.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm39.produceFinalSkyLine(pointList48, pointList51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean60 = point56.dominates(point59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point56 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList62, pointArray61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm64.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm53.produceFinalSkyLine(pointList62, pointList65);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm37.produceFinalSkyLine(pointList52, pointList65);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm0.produceSubSkyLines(pointList67);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(pointArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList38);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(pointArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(pointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertNotNull(pointList69);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 0);
        int int3 = point2.getX();
        int int4 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        boolean boolean33 = point16.dominates(point22);
        boolean boolean34 = point2.dominates(point16);
        int int35 = point16.getX();
        int int36 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        int int50 = point45.getX();
        boolean boolean51 = point42.dominates(point45);
        boolean boolean52 = point39.dominates(point42);
        int int53 = point42.getY();
        int int54 = point42.getY();
        boolean boolean55 = point16.dominates(point42);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        boolean boolean33 = point16.dominates(point22);
        boolean boolean34 = point2.dominates(point16);
        int int35 = point16.getX();
        int int36 = point16.getY();
        int int37 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        int int45 = point43.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        boolean boolean53 = point43.dominates(point51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean60 = point56.dominates(point59);
        boolean boolean61 = point51.dominates(point59);
        int int62 = point59.getY();
        int int63 = point59.getX();
        int int64 = point59.getY();
        boolean boolean65 = point16.dominates(point59);
        int int66 = point59.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 1);
        int int70 = point69.getY();
        boolean boolean71 = point59.dominates(point69);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean15 = point8.dominates(point14);
        boolean boolean16 = point2.dominates(point14);
        int int17 = point14.getY();
        int int18 = point14.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int6 = point5.getX();
        int int7 = point5.getX();
        int int8 = point5.getY();
        int int9 = point5.getY();
        int int10 = point5.getX();
        int int11 = point5.getY();
        boolean boolean12 = point2.dominates(point5);
        int int13 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        int int25 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean29 = point22.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean33 = point22.dominates(point32);
        int int34 = point32.getX();
        int int35 = point32.getX();
        int int36 = point32.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        boolean boolean52 = point42.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int56 = point55.getY();
        boolean boolean57 = point42.dominates(point55);
        boolean boolean58 = point32.dominates(point42);
        int int59 = point32.getY();
        int int60 = point32.getY();
        int int61 = point32.getY();
        boolean boolean62 = point16.dominates(point32);
        boolean boolean63 = point5.dominates(point32);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int6 = point5.getY();
        int int7 = point5.getX();
        int int8 = point5.getX();
        boolean boolean9 = point2.dominates(point5);
        int int10 = point2.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) (short) -1);
        boolean boolean17 = point6.dominates(point16);
        java.lang.Class<?> wildcardClass18 = point16.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        boolean boolean19 = point9.dominates(point17);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int23 = point22.getY();
        boolean boolean24 = point9.dominates(point22);
        int int25 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int29 = point28.getY();
        int int30 = point28.getY();
        boolean boolean31 = point22.dominates(point28);
        boolean boolean32 = point2.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) ' ');
        boolean boolean36 = point2.dominates(point35);
        int int37 = point35.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm61.produceSubSkyLines(pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm31.produceFinalSkyLine(pointList60, pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.produceSubSkyLines(pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass81 = pointList80.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point11.getX();
        boolean boolean17 = point7.dominates(point11);
        int int18 = point7.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        boolean boolean34 = point24.dominates(point32);
        int int35 = point32.getX();
        int int36 = point32.getX();
        boolean boolean37 = point7.dominates(point32);
        int int38 = point7.getX();
        boolean boolean39 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int43 = point42.getX();
        int int44 = point42.getY();
        int int45 = point42.getX();
        boolean boolean46 = point7.dominates(point42);
        int int47 = point42.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean49 = point42.dominates(point48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        int int8 = point5.getY();
        boolean boolean9 = point2.dominates(point5);
        int int10 = point5.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        int int17 = point13.getX();
        int int18 = point13.getY();
        int int19 = point13.getX();
        int int20 = point13.getX();
        java.lang.Class<?> wildcardClass21 = point13.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        int int9 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int13 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int34 = point33.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        int int42 = point37.getX();
        boolean boolean43 = point33.dominates(point37);
        boolean boolean44 = point27.dominates(point33);
        int int45 = point33.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean58 = point51.dominates(point57);
        boolean boolean59 = point33.dominates(point51);
        int int60 = point33.getX();
        boolean boolean61 = point12.dominates(point33);
        boolean boolean62 = point2.dominates(point12);
        int int63 = point12.getY();
        int int64 = point12.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int16 = point15.getY();
        boolean boolean17 = point11.dominates(point15);
        int int18 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int22 = point21.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        int int31 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean35 = point28.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean39 = point28.dominates(point38);
        int int40 = point38.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int44 = point43.getX();
        int int45 = point43.getX();
        int int46 = point43.getX();
        int int47 = point43.getY();
        boolean boolean48 = point38.dominates(point43);
        int int49 = point43.getY();
        boolean boolean50 = point21.dominates(point43);
        int int51 = point43.getY();
        boolean boolean52 = point15.dominates(point43);
        int int53 = point15.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point10.getX();
        boolean boolean16 = point6.dominates(point10);
        int int17 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        boolean boolean33 = point23.dominates(point31);
        int int34 = point31.getX();
        int int35 = point31.getX();
        boolean boolean36 = point6.dominates(point31);
        boolean boolean37 = point2.dominates(point6);
        int int38 = point2.getY();
        int int39 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (-1));
        boolean boolean43 = point2.dominates(point42);
        int int44 = point2.getX();
        int int45 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, 52);
        boolean boolean21 = point15.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int25 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point28.getX();
        boolean boolean34 = point24.dominates(point28);
        int int35 = point28.getX();
        int int36 = point28.getX();
        boolean boolean37 = point15.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        boolean boolean56 = point46.dominates(point54);
        int int57 = point54.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int61 = point60.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean68 = point64.dominates(point67);
        int int69 = point64.getX();
        boolean boolean70 = point60.dominates(point64);
        boolean boolean71 = point54.dominates(point60);
        boolean boolean72 = point40.dominates(point54);
        int int73 = point40.getY();
        int int74 = point40.getY();
        boolean boolean75 = point28.dominates(point40);
        int int76 = point28.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        int int5 = point2.getX();
        int int6 = point2.getX();
        java.lang.Class<?> wildcardClass7 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 32);
        boolean boolean22 = point5.dominates(point21);
        int int23 = point21.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        int int24 = point21.getY();
        java.lang.Class<?> wildcardClass25 = point21.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        boolean boolean42 = point32.dominates(point40);
        boolean boolean43 = point26.dominates(point40);
        boolean boolean44 = point21.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int48 = point47.getY();
        boolean boolean49 = point40.dominates(point47);
        int int50 = point47.getY();
        int int51 = point47.getY();
        int int52 = point47.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 0);
        int int3 = point2.getX();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int6 = point5.getX();
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean11 = point5.dominates(point10);
        boolean boolean12 = point2.dominates(point10);
        int int13 = point2.getX();
        int int14 = point2.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) '#');
        boolean boolean8 = point2.dominates(point7);
        int int9 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int16 = point15.getY();
        int int17 = point15.getY();
        boolean boolean18 = point12.dominates(point15);
        int int19 = point12.getY();
        boolean boolean20 = point2.dominates(point12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int24 = point23.getY();
        int int25 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point34.getY();
        int int37 = point34.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean41 = point34.dominates(point40);
        boolean boolean42 = point28.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean60 = point56.dominates(point59);
        boolean boolean61 = point51.dominates(point59);
        int int62 = point59.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int66 = point65.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean73 = point69.dominates(point72);
        int int74 = point69.getX();
        boolean boolean75 = point65.dominates(point69);
        boolean boolean76 = point59.dominates(point65);
        boolean boolean77 = point45.dominates(point59);
        boolean boolean78 = point28.dominates(point45);
        boolean boolean79 = point23.dominates(point28);
        int int80 = point23.getX();
        boolean boolean81 = point12.dominates(point23);
        java.lang.Class<?> wildcardClass82 = point12.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point11.getX();
        boolean boolean17 = point7.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int21 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        int int29 = point24.getX();
        boolean boolean30 = point20.dominates(point24);
        int int31 = point24.getX();
        boolean boolean32 = point7.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int36 = point35.getX();
        int int37 = point35.getY();
        boolean boolean38 = point7.dominates(point35);
        boolean boolean39 = point2.dominates(point35);
        int int40 = point35.getX();
        int int41 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) (byte) -1);
        int int45 = point44.getX();
        boolean boolean46 = point35.dominates(point44);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int6 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean10 = point5.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        boolean boolean14 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int18 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int22 = point21.getY();
        boolean boolean23 = point17.dominates(point21);
        int int24 = point17.getX();
        boolean boolean25 = point5.dominates(point17);
        boolean boolean26 = point2.dominates(point5);
        int int27 = point5.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        boolean boolean19 = point9.dominates(point17);
        int int20 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int24 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point27.getX();
        boolean boolean33 = point23.dominates(point27);
        boolean boolean34 = point17.dominates(point23);
        int int35 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point41.getY();
        int int44 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean48 = point41.dominates(point47);
        boolean boolean49 = point23.dominates(point41);
        int int50 = point23.getX();
        boolean boolean51 = point2.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        int int62 = point60.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        boolean boolean70 = point60.dominates(point68);
        int int71 = point68.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int75 = point74.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean82 = point78.dominates(point81);
        int int83 = point78.getX();
        boolean boolean84 = point74.dominates(point78);
        boolean boolean85 = point68.dominates(point74);
        boolean boolean86 = point54.dominates(point68);
        int int87 = point68.getX();
        boolean boolean88 = point2.dominates(point68);
        int int89 = point68.getY();
        int int90 = point68.getX();
        int int91 = point68.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) (byte) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        int int8 = point5.getY();
        boolean boolean9 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int13 = point12.getX();
        int int14 = point12.getY();
        int int15 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int19 = point18.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean23 = point18.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        int int32 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean36 = point29.dominates(point35);
        boolean boolean37 = point18.dominates(point29);
        boolean boolean38 = point12.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) 'a');
        int int42 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 1);
        boolean boolean46 = point41.dominates(point45);
        int int47 = point45.getX();
        boolean boolean48 = point18.dominates(point45);
        boolean boolean49 = point2.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        int int57 = point55.getY();
        int int58 = point55.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean62 = point55.dominates(point61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean66 = point55.dominates(point65);
        int int67 = point65.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int71 = point70.getX();
        int int72 = point70.getX();
        int int73 = point70.getX();
        int int74 = point70.getY();
        boolean boolean75 = point65.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int79 = point78.getX();
        int int80 = point78.getX();
        boolean boolean81 = point70.dominates(point78);
        boolean boolean82 = point2.dominates(point70);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList21 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList22 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = null;
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point30 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList36, pointArray35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList39 = skylineAlgorithm38.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm27.produceFinalSkyLine(pointList36, pointList39);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm26.produceSubSkyLines(pointList36);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm26.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point48 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList54, pointArray53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm56.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm45.produceFinalSkyLine(pointList54, pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm44.produceSubSkyLines(pointList54);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm26.produceSubSkyLines(pointList54);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm26.getPoints();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm0.produceFinalSkyLine(pointList25, pointList61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.size()\" because \"left\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertNotNull(pointList21);
        org.junit.Assert.assertNotNull(pointList22);
        org.junit.Assert.assertNotNull(pointList23);
        org.junit.Assert.assertNotNull(pointList24);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(pointArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(pointList39);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(pointArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        int int14 = point2.getX();
        java.lang.Class<?> wildcardClass15 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        int int9 = point6.getY();
        java.lang.Class<?> wildcardClass10 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean65 = point61.dominates(point64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point61 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList67, pointArray66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = skylineAlgorithm69.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = skylineAlgorithm58.produceFinalSkyLine(pointList67, pointList70);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = skylineAlgorithm57.produceSubSkyLines(pointList67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm43.produceFinalSkyLine(pointList72, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm0.produceSubSkyLines(pointList72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(pointArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(pointList70);
        org.junit.Assert.assertNotNull(pointList71);
        org.junit.Assert.assertNotNull(pointList72);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass46 = pointList45.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (byte) 0);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) '4');
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        boolean boolean30 = point20.dominates(point28);
        int int31 = point28.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int35 = point34.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point38.getX();
        boolean boolean44 = point34.dominates(point38);
        boolean boolean45 = point28.dominates(point34);
        boolean boolean46 = point14.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int50 = point49.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        int int58 = point53.getX();
        boolean boolean59 = point49.dominates(point53);
        int int60 = point53.getX();
        int int61 = point53.getY();
        boolean boolean62 = point14.dominates(point53);
        boolean boolean63 = point11.dominates(point53);
        int int64 = point11.getY();
        boolean boolean65 = point2.dominates(point11);
        int int66 = point2.getX();
        int int67 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) '#');
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point10.getX();
        boolean boolean16 = point6.dominates(point10);
        int int17 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        boolean boolean33 = point23.dominates(point31);
        int int34 = point31.getX();
        int int35 = point31.getX();
        boolean boolean36 = point6.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point42.getY();
        int int45 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean49 = point42.dominates(point48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        int int57 = point55.getY();
        int int58 = point55.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean62 = point55.dominates(point61);
        boolean boolean63 = point42.dominates(point55);
        boolean boolean64 = point6.dominates(point42);
        int int65 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        boolean boolean72 = point68.dominates(point71);
        boolean boolean73 = point6.dominates(point71);
        boolean boolean74 = point2.dominates(point6);
        int int75 = point6.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        int int9 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean22 = point15.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean26 = point15.dominates(point25);
        int int27 = point15.getY();
        int int28 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int32 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int36 = point35.getX();
        int int37 = point35.getX();
        int int38 = point35.getX();
        int int39 = point35.getY();
        int int40 = point35.getY();
        boolean boolean41 = point31.dominates(point35);
        boolean boolean42 = point15.dominates(point31);
        int int43 = point15.getY();
        boolean boolean44 = point6.dominates(point15);
        int int45 = point6.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point33.dominates(point46);
        boolean boolean55 = point19.dominates(point46);
        int int56 = point46.getY();
        int int57 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int61 = point60.getX();
        int int62 = point60.getY();
        int int63 = point60.getY();
        boolean boolean64 = point46.dominates(point60);
        int int65 = point60.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        int int73 = point71.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean80 = point76.dominates(point79);
        boolean boolean81 = point71.dominates(point79);
        boolean boolean82 = point60.dominates(point79);
        int int83 = point60.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int87 = point86.getX();
        int int88 = point86.getY();
        int int89 = point86.getY();
        int int90 = point86.getX();
        boolean boolean91 = point60.dominates(point86);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 97 + "'", int88 == 97);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 97 + "'", int89 == 97);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean58 = point51.dominates(point57);
        boolean boolean59 = point38.dominates(point51);
        boolean boolean60 = point2.dominates(point38);
        int int61 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        boolean boolean68 = point64.dominates(point67);
        boolean boolean69 = point2.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 52);
        int int73 = point72.getX();
        boolean boolean74 = point2.dominates(point72);
        java.lang.Class<?> wildcardClass75 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 97 + "'", int73 == 97);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        int int33 = point27.getY();
        int int34 = point27.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = point27.dominates(point35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (short) 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) (short) -1);
        int int7 = point6.getX();
        boolean boolean8 = point2.dominates(point6);
        int int9 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point49 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList55, pointArray54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm57.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm46.produceFinalSkyLine(pointList55, pointList58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point63 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList69, pointArray68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = skylineAlgorithm71.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm60.produceFinalSkyLine(pointList69, pointList72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm32.produceFinalSkyLine(pointList59, pointList69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean82 = point78.dominates(point81);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point78 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList84, pointArray83);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm86.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm75.produceFinalSkyLine(pointList84, pointList87);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm32.produceSubSkyLines(pointList84);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm0.produceSubSkyLines(pointList84);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass95 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(pointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(pointArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(pointList72);
        org.junit.Assert.assertNotNull(pointList73);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(pointArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(pointList87);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        int int15 = point2.getX();
        int int16 = point2.getY();
        int int17 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) '#');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        int int15 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean19 = point12.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) '4');
        boolean boolean23 = point18.dominates(point22);
        boolean boolean24 = point6.dominates(point18);
        int int25 = point6.getY();
        boolean boolean26 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        boolean boolean33 = point29.dominates(point32);
        boolean boolean34 = point6.dominates(point32);
        int int35 = point6.getX();
        java.lang.Class<?> wildcardClass36 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (short) 10);
        int int3 = point2.getY();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point2.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int25 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean29 = point24.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        int int38 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean42 = point35.dominates(point41);
        boolean boolean43 = point24.dominates(point35);
        boolean boolean44 = point2.dominates(point24);
        int int45 = point24.getX();
        int int46 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 100);
        int int50 = point49.getX();
        int int51 = point49.getY();
        boolean boolean52 = point24.dominates(point49);
        int int53 = point24.getY();
        int int54 = point24.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point11.getX();
        boolean boolean17 = point7.dominates(point11);
        int int18 = point7.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        boolean boolean34 = point24.dominates(point32);
        int int35 = point32.getX();
        int int36 = point32.getX();
        boolean boolean37 = point7.dominates(point32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        int int45 = point43.getY();
        int int46 = point43.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean50 = point43.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        int int58 = point56.getY();
        int int59 = point56.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean63 = point56.dominates(point62);
        boolean boolean64 = point43.dominates(point56);
        boolean boolean65 = point7.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean69 = point43.dominates(point68);
        int int70 = point68.getY();
        boolean boolean71 = point2.dominates(point68);
        int int72 = point68.getY();
        java.lang.Class<?> wildcardClass73 = point68.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point33.dominates(point46);
        boolean boolean55 = point19.dominates(point46);
        int int56 = point46.getY();
        int int57 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int61 = point60.getY();
        int int62 = point60.getY();
        int int63 = point60.getY();
        boolean boolean64 = point46.dominates(point60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 35);
        int int68 = point67.getY();
        boolean boolean69 = point46.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        int int73 = point72.getX();
        int int74 = point72.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int84 = point83.getY();
        boolean boolean85 = point80.dominates(point83);
        boolean boolean86 = point77.dominates(point80);
        boolean boolean87 = point72.dominates(point77);
        int int88 = point77.getY();
        int int89 = point77.getY();
        boolean boolean90 = point67.dominates(point77);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 97 + "'", int74 == 97);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        int int5 = point2.getX();
        int int6 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 10);
        int int10 = point9.getX();
        int int11 = point9.getX();
        boolean boolean12 = point2.dominates(point9);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int9 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point12.getX();
        boolean boolean18 = point8.dominates(point12);
        int int19 = point12.getX();
        boolean boolean20 = point5.dominates(point12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int27 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point30.getX();
        boolean boolean36 = point26.dominates(point30);
        int int37 = point30.getX();
        int int38 = point30.getY();
        int int39 = point30.getY();
        boolean boolean40 = point23.dominates(point30);
        boolean boolean41 = point5.dominates(point23);
        boolean boolean42 = point2.dominates(point23);
        int int43 = point23.getY();
        int int44 = point23.getX();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) '4');
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point14.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        boolean boolean24 = point14.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int28 = point27.getY();
        boolean boolean29 = point14.dominates(point27);
        int int30 = point27.getX();
        boolean boolean31 = point5.dominates(point27);
        int int32 = point5.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        boolean boolean23 = point10.dominates(point20);
        java.lang.Class<?> wildcardClass24 = point20.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) 'a');
        int int3 = point2.getX();
        int int4 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        boolean boolean30 = point13.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) '#');
        boolean boolean34 = point19.dominates(point33);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = point33.dominates(point35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int21 = point20.getX();
        boolean boolean22 = point5.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, (int) (short) -1);
        boolean boolean26 = point5.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        int int35 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean39 = point32.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int43 = point42.getY();
        boolean boolean44 = point38.dominates(point42);
        int int45 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int49 = point48.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        int int57 = point55.getY();
        int int58 = point55.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean62 = point55.dominates(point61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean66 = point55.dominates(point65);
        int int67 = point65.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int71 = point70.getX();
        int int72 = point70.getX();
        int int73 = point70.getX();
        int int74 = point70.getY();
        boolean boolean75 = point65.dominates(point70);
        int int76 = point70.getY();
        boolean boolean77 = point48.dominates(point70);
        int int78 = point70.getY();
        boolean boolean79 = point42.dominates(point70);
        int int80 = point70.getY();
        boolean boolean81 = point5.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int85 = point84.getX();
        int int86 = point84.getY();
        int int87 = point84.getX();
        int int88 = point84.getX();
        boolean boolean89 = point70.dominates(point84);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        int int3 = point2.getX();
        int int4 = point2.getY();
        java.lang.Class<?> wildcardClass5 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        int int23 = point20.getY();
        boolean boolean24 = point6.dominates(point20);
        int int25 = point6.getY();
        boolean boolean26 = point2.dominates(point6);
        int int27 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int31 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point34.getX();
        boolean boolean40 = point30.dominates(point34);
        int int41 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point47.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        boolean boolean57 = point47.dominates(point55);
        int int58 = point55.getX();
        int int59 = point55.getX();
        boolean boolean60 = point30.dominates(point55);
        int int61 = point55.getY();
        int int62 = point55.getX();
        int int63 = point55.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int67 = point66.getX();
        int int68 = point66.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean75 = point71.dominates(point74);
        int int76 = point74.getY();
        int int77 = point74.getX();
        boolean boolean78 = point66.dominates(point74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean85 = point81.dominates(point84);
        int int86 = point84.getY();
        boolean boolean87 = point74.dominates(point84);
        boolean boolean88 = point55.dominates(point74);
        boolean boolean89 = point2.dominates(point74);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 97 + "'", int86 == 97);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int17 = point16.getX();
        int int18 = point16.getY();
        boolean boolean19 = point6.dominates(point16);
        int int20 = point16.getY();
        int int21 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) 'a');
        boolean boolean25 = point16.dominates(point24);
        java.lang.Class<?> wildcardClass26 = point16.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        int int15 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int19 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point22.getX();
        boolean boolean28 = point18.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int32 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point35.getX();
        boolean boolean41 = point31.dominates(point35);
        int int42 = point35.getX();
        boolean boolean43 = point18.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int47 = point46.getX();
        int int48 = point46.getY();
        boolean boolean49 = point18.dominates(point46);
        boolean boolean50 = point12.dominates(point46);
        boolean boolean51 = point6.dominates(point46);
        boolean boolean52 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        int int61 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean65 = point58.dominates(point64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int69 = point68.getY();
        boolean boolean70 = point64.dominates(point68);
        boolean boolean71 = point2.dominates(point64);
        int int72 = point2.getX();
        int int73 = point2.getY();
        int int74 = point2.getY();
        int int75 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 32);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        boolean boolean19 = point9.dominates(point17);
        int int20 = point9.getX();
        int int21 = point9.getY();
        boolean boolean22 = point2.dominates(point9);
        int int23 = point2.getY();
        java.lang.Class<?> wildcardClass24 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        int int3 = point2.getX();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int14 = point13.getY();
        boolean boolean15 = point10.dominates(point13);
        boolean boolean16 = point7.dominates(point10);
        boolean boolean17 = point2.dominates(point7);
        int int18 = point7.getX();
        int int19 = point7.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm31.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm48.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point53 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList59, pointArray58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm61.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm50.produceFinalSkyLine(pointList59, pointList62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm48.produceFinalSkyLine(pointList63, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm31.produceSubSkyLines(pointList78);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.produceSubSkyLines(pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass84 = pointList83.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(pointArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        int int21 = point16.getY();
        int int22 = point16.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 52);
        boolean boolean26 = point16.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        boolean boolean45 = point35.dominates(point43);
        int int46 = point43.getY();
        boolean boolean47 = point29.dominates(point43);
        int int48 = point43.getY();
        int int49 = point43.getY();
        int int50 = point43.getY();
        boolean boolean51 = point25.dominates(point43);
        java.lang.Class<?> wildcardClass52 = point25.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int24 = point23.getX();
        int int25 = point23.getX();
        int int26 = point23.getX();
        int int27 = point23.getY();
        boolean boolean28 = point18.dominates(point23);
        boolean boolean29 = point2.dominates(point23);
        java.lang.Class<?> wildcardClass30 = point23.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point29.dominates(point37);
        int int40 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int44 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point47.getX();
        boolean boolean53 = point43.dominates(point47);
        boolean boolean54 = point37.dominates(point43);
        boolean boolean55 = point23.dominates(point37);
        boolean boolean56 = point16.dominates(point37);
        int int57 = point16.getX();
        int int58 = point16.getY();
        int int59 = point16.getY();
        int int60 = point16.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point11.getX();
        boolean boolean17 = point7.dominates(point11);
        int int18 = point7.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        boolean boolean34 = point24.dominates(point32);
        int int35 = point32.getX();
        int int36 = point32.getX();
        boolean boolean37 = point7.dominates(point32);
        int int38 = point7.getX();
        boolean boolean39 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int43 = point42.getX();
        int int44 = point42.getY();
        int int45 = point42.getX();
        boolean boolean46 = point7.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int50 = point49.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        int int58 = point53.getX();
        boolean boolean59 = point49.dominates(point53);
        int int60 = point53.getX();
        int int61 = point53.getY();
        int int62 = point53.getY();
        int int63 = point53.getY();
        boolean boolean64 = point7.dominates(point53);
        java.lang.Class<?> wildcardClass65 = point7.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) (short) 100);
        int int3 = point2.getX();
        int int4 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point7.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        boolean boolean40 = point30.dominates(point38);
        int int41 = point38.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int45 = point44.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point48.getX();
        boolean boolean54 = point44.dominates(point48);
        boolean boolean55 = point38.dominates(point44);
        boolean boolean56 = point24.dominates(point38);
        boolean boolean57 = point7.dominates(point24);
        boolean boolean58 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (-1));
        boolean boolean62 = point7.dominates(point61);
        java.lang.Class<?> wildcardClass63 = point7.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        boolean boolean21 = point2.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int25 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean29 = point24.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        int int38 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean42 = point35.dominates(point41);
        boolean boolean43 = point24.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int47 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean51 = point46.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        int int59 = point57.getY();
        int int60 = point57.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean64 = point57.dominates(point63);
        boolean boolean65 = point46.dominates(point57);
        boolean boolean66 = point24.dominates(point46);
        boolean boolean67 = point2.dominates(point24);
        int int68 = point24.getX();
        int int69 = point24.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm61.produceSubSkyLines(pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm31.produceFinalSkyLine(pointList60, pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.produceSubSkyLines(pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm0.produceSubSkyLines(pointList84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getX();
        int int8 = point2.getY();
        int int9 = point2.getX();
        int int10 = point2.getX();
        int int11 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int15 = point14.getX();
        int int16 = point14.getY();
        int int17 = point14.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int21 = point20.getY();
        boolean boolean22 = point14.dominates(point20);
        int int23 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        int int32 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean36 = point29.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point42.getY();
        int int45 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean49 = point42.dominates(point48);
        boolean boolean50 = point29.dominates(point42);
        boolean boolean51 = point20.dominates(point42);
        int int52 = point20.getY();
        int int53 = point20.getX();
        boolean boolean54 = point2.dominates(point20);
        java.lang.Class<?> wildcardClass55 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getX();
        int int8 = point2.getY();
        int int9 = point2.getX();
        int int10 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int14 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int18 = point17.getY();
        boolean boolean19 = point13.dominates(point17);
        boolean boolean20 = point2.dominates(point17);
        java.lang.Class<?> wildcardClass21 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, 97);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int19 = point18.getY();
        boolean boolean20 = point5.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point29.dominates(point37);
        boolean boolean40 = point23.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean44 = point37.dominates(point43);
        boolean boolean45 = point18.dominates(point37);
        int int46 = point37.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        int int13 = point11.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        boolean boolean42 = point32.dominates(point40);
        boolean boolean43 = point26.dominates(point40);
        boolean boolean44 = point21.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int48 = point47.getY();
        boolean boolean49 = point40.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        int int57 = point55.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean64 = point60.dominates(point63);
        boolean boolean65 = point55.dominates(point63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (-1));
        boolean boolean69 = point63.dominates(point68);
        boolean boolean70 = point47.dominates(point68);
        java.lang.Class<?> wildcardClass71 = point68.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList2 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList3 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList4 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point8 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList14, pointArray13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm16.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm5.produceFinalSkyLine(pointList14, pointList17);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm5.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm5.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList21 = skylineAlgorithm5.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList22 = skylineAlgorithm5.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point26 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList32, pointArray31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm34.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm23.produceFinalSkyLine(pointList32, pointList35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point40 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList46, pointArray45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm48.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm37.produceFinalSkyLine(pointList46, pointList49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point54 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList60, pointArray59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm51.produceFinalSkyLine(pointList60, pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm23.produceFinalSkyLine(pointList50, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean73 = point69.dominates(point72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point69 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList75, pointArray74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm77.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm66.produceFinalSkyLine(pointList75, pointList78);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm23.produceSubSkyLines(pointList75);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm81.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm5.produceFinalSkyLine(pointList80, pointList82);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm0.produceSubSkyLines(pointList83);
        java.lang.Class<?> wildcardClass85 = pointList83.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(pointList2);
        org.junit.Assert.assertNotNull(pointList3);
        org.junit.Assert.assertNotNull(pointList4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(pointArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertNotNull(pointList21);
        org.junit.Assert.assertNotNull(pointList22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(pointArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(pointArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(pointArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(pointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        boolean boolean23 = point10.dominates(point20);
        int int24 = point10.getY();
        int int25 = point10.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean19 = point8.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        int int28 = point25.getY();
        boolean boolean29 = point8.dominates(point25);
        boolean boolean30 = point2.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        int int38 = point36.getY();
        int int39 = point36.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean43 = point36.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 10);
        boolean boolean47 = point36.dominates(point46);
        boolean boolean48 = point25.dominates(point36);
        java.lang.Class<?> wildcardClass49 = point25.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getX();
        int int6 = point2.getY();
        java.lang.Class<?> wildcardClass7 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        int int13 = point9.getY();
        boolean boolean14 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 100);
        int int18 = point17.getY();
        boolean boolean19 = point2.dominates(point17);
        java.lang.Class<?> wildcardClass20 = point17.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean23 = point16.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean27 = point16.dominates(point26);
        int int28 = point26.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point57 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList63, pointArray62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm65.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm54.produceFinalSkyLine(pointList63, pointList66);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm53.produceSubSkyLines(pointList63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean76 = point72.dominates(point75);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point72 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList78, pointArray77);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm80.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm69.produceFinalSkyLine(pointList78, pointList81);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm53.produceSubSkyLines(pointList82);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm53.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm53.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm53.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm53.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm88 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm88.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm88.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm88.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm88.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm88.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm88.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm88.getPoints();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.produceFinalSkyLine(pointList87, pointList95);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(pointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(pointArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
        org.junit.Assert.assertNotNull(pointList87);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point5.getX();
        boolean boolean11 = point2.dominates(point5);
        int int12 = point5.getY();
        int int13 = point5.getX();
        int int14 = point5.getY();
        int int15 = point5.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point7.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        boolean boolean40 = point30.dominates(point38);
        int int41 = point38.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int45 = point44.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point48.getX();
        boolean boolean54 = point44.dominates(point48);
        boolean boolean55 = point38.dominates(point44);
        boolean boolean56 = point24.dominates(point38);
        boolean boolean57 = point7.dominates(point24);
        boolean boolean58 = point2.dominates(point7);
        int int59 = point7.getY();
        int int60 = point7.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 97 + "'", int60 == 97);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.produceSubSkyLines(pointList41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm0.produceFinalSkyLine(pointList41, pointList50);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass55 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertNotNull(pointList54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        boolean boolean30 = point13.dominates(point19);
        int int31 = point19.getX();
        int int32 = point19.getY();
        int int33 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int37 = point36.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        int int45 = point40.getX();
        boolean boolean46 = point36.dominates(point40);
        int int47 = point36.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        int int55 = point53.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        boolean boolean63 = point53.dominates(point61);
        int int64 = point61.getX();
        int int65 = point61.getX();
        boolean boolean66 = point36.dominates(point61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean73 = point69.dominates(point72);
        int int74 = point72.getY();
        int int75 = point72.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean79 = point72.dominates(point78);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        int int87 = point85.getY();
        int int88 = point85.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point91 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean92 = point85.dominates(point91);
        boolean boolean93 = point72.dominates(point85);
        boolean boolean94 = point36.dominates(point72);
        int int95 = point72.getX();
        int int96 = point72.getY();
        int int97 = point72.getX();
        boolean boolean98 = point19.dominates(point72);
        int int99 = point19.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 52 + "'", int99 == 52);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        int int20 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point26.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        boolean boolean36 = point26.dominates(point34);
        int int37 = point34.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int41 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point44.getX();
        boolean boolean50 = point40.dominates(point44);
        boolean boolean51 = point34.dominates(point40);
        int int52 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        int int61 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean65 = point58.dominates(point64);
        boolean boolean66 = point40.dominates(point58);
        boolean boolean67 = point16.dominates(point58);
        boolean boolean68 = point2.dominates(point58);
        int int69 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point2.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int25 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean29 = point24.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        int int38 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean42 = point35.dominates(point41);
        boolean boolean43 = point24.dominates(point35);
        boolean boolean44 = point2.dominates(point24);
        int int45 = point24.getX();
        int int46 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 100);
        int int50 = point49.getX();
        int int51 = point49.getY();
        boolean boolean52 = point24.dominates(point49);
        java.lang.Class<?> wildcardClass53 = point24.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        int int33 = point27.getX();
        int int34 = point27.getX();
        int int35 = point27.getX();
        java.lang.Class<?> wildcardClass36 = point27.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, 35);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int31 = point30.getX();
        int int32 = point30.getY();
        boolean boolean33 = point2.dominates(point30);
        int int34 = point2.getY();
        java.lang.Class<?> wildcardClass35 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 0);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int26 = point25.getY();
        boolean boolean27 = point12.dominates(point25);
        int int28 = point25.getX();
        boolean boolean29 = point5.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean33 = point25.dominates(point32);
        boolean boolean34 = point2.dominates(point32);
        java.lang.Class<?> wildcardClass35 = point32.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', (int) (byte) 100);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean16 = point9.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean20 = point9.dominates(point19);
        int int21 = point19.getX();
        boolean boolean22 = point2.dominates(point19);
        int int23 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean58 = point51.dominates(point57);
        boolean boolean59 = point38.dominates(point51);
        boolean boolean60 = point2.dominates(point38);
        int int61 = point38.getX();
        int int62 = point38.getY();
        int int63 = point38.getX();
        int int64 = point38.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        int int15 = point2.getX();
        int int16 = point2.getX();
        int int17 = point2.getX();
        java.lang.Class<?> wildcardClass18 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        boolean boolean17 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point9.dominates(point20);
        int int22 = point9.getX();
        int int23 = point9.getY();
        int int24 = point9.getY();
        java.lang.Class<?> wildcardClass25 = point9.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean17 = point10.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean21 = point10.dominates(point20);
        int int22 = point20.getY();
        int int23 = point20.getX();
        int int24 = point20.getX();
        boolean boolean25 = point2.dominates(point20);
        java.lang.Class<?> wildcardClass26 = point20.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 32 + "'", int22 == 32);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = null;
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point22 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList28, pointArray27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm19.produceFinalSkyLine(pointList28, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm19.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm19.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm19.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm36.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point41 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList47, pointArray46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm49.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm38.produceFinalSkyLine(pointList47, pointList50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point55 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList61, pointArray60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm63.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm52.produceFinalSkyLine(pointList61, pointList64);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm36.produceFinalSkyLine(pointList51, pointList64);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm19.produceSubSkyLines(pointList66);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm0.produceFinalSkyLine(pointList18, pointList66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.size()\" because \"left\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(pointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(pointArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(pointArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        boolean boolean21 = point11.dominates(point19);
        int int22 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int26 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point29.getX();
        boolean boolean35 = point25.dominates(point29);
        int int36 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        boolean boolean52 = point42.dominates(point50);
        int int53 = point50.getX();
        int int54 = point50.getX();
        boolean boolean55 = point25.dominates(point50);
        int int56 = point50.getY();
        boolean boolean57 = point11.dominates(point50);
        int int58 = point11.getX();
        boolean boolean59 = point2.dominates(point11);
        java.lang.Class<?> wildcardClass60 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point10.getX();
        boolean boolean16 = point6.dominates(point10);
        int int17 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        boolean boolean33 = point23.dominates(point31);
        int int34 = point31.getX();
        int int35 = point31.getX();
        boolean boolean36 = point6.dominates(point31);
        boolean boolean37 = point2.dominates(point6);
        int int38 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point44.getY();
        int int47 = point44.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean51 = point44.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean55 = point44.dominates(point54);
        int int56 = point54.getX();
        int int57 = point54.getX();
        int int58 = point54.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean65 = point61.dominates(point64);
        int int66 = point64.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean73 = point69.dominates(point72);
        boolean boolean74 = point64.dominates(point72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int78 = point77.getY();
        boolean boolean79 = point64.dominates(point77);
        boolean boolean80 = point54.dominates(point64);
        int int81 = point54.getX();
        boolean boolean82 = point6.dominates(point54);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 32);
        int int3 = point2.getY();
        int int4 = point2.getY();
        int int5 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, 52);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getY();
        int int17 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int21 = point20.getX();
        int int22 = point20.getX();
        int int23 = point20.getX();
        int int24 = point20.getX();
        int int25 = point20.getY();
        boolean boolean26 = point13.dominates(point20);
        int int27 = point13.getY();
        java.lang.Class<?> wildcardClass28 = point13.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int8 = point7.getX();
        int int9 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getX();
        boolean boolean19 = point7.dominates(point15);
        int int20 = point7.getX();
        int int21 = point7.getX();
        boolean boolean22 = point2.dominates(point7);
        int int23 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int27 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int31 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point34.getX();
        boolean boolean40 = point30.dominates(point34);
        int int41 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point47.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        boolean boolean57 = point47.dominates(point55);
        int int58 = point55.getX();
        int int59 = point55.getX();
        boolean boolean60 = point30.dominates(point55);
        boolean boolean61 = point26.dominates(point30);
        boolean boolean62 = point7.dominates(point30);
        int int63 = point30.getY();
        int int64 = point30.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) (short) 10);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (-1));
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean16 = point9.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean20 = point9.dominates(point19);
        int int21 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, 52);
        boolean boolean25 = point19.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int29 = point28.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point32.getX();
        boolean boolean38 = point28.dominates(point32);
        int int39 = point32.getX();
        int int40 = point32.getX();
        boolean boolean41 = point19.dominates(point32);
        boolean boolean42 = point2.dominates(point19);
        int int43 = point19.getX();
        int int44 = point19.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) (byte) -1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        java.lang.Class<?> wildcardClass5 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (short) 10);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, 35);
        int int3 = point2.getX();
        int int4 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int25 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point28.getX();
        boolean boolean34 = point24.dominates(point28);
        int int35 = point28.getX();
        boolean boolean36 = point11.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int40 = point39.getX();
        int int41 = point39.getY();
        boolean boolean42 = point11.dominates(point39);
        boolean boolean43 = point5.dominates(point39);
        int int44 = point5.getY();
        int int45 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int49 = point48.getX();
        boolean boolean50 = point5.dominates(point48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        boolean boolean57 = point53.dominates(point56);
        boolean boolean58 = point5.dominates(point53);
        int int59 = point53.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean61 = point53.dominates(point60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 32 + "'", int59 == 32);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point22 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList28, pointArray27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm19.produceFinalSkyLine(pointList28, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm18.produceSubSkyLines(pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.produceSubSkyLines(pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm36.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point41 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList47, pointArray46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm49.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm38.produceFinalSkyLine(pointList47, pointList50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point55 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList61, pointArray60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm63.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm52.produceFinalSkyLine(pointList61, pointList64);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm36.produceFinalSkyLine(pointList51, pointList64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean75 = point71.dominates(point74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point71 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList77, pointArray76);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm79.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm68.produceFinalSkyLine(pointList77, pointList80);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm67.produceSubSkyLines(pointList77);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean90 = point86.dominates(point89);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray91 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point86 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList92, pointArray91);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm94 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm94.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm83.produceFinalSkyLine(pointList92, pointList95);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm67.produceSubSkyLines(pointList96);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm36.produceSubSkyLines(pointList96);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList99 = skylineAlgorithm0.produceSubSkyLines(pointList98);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(pointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(pointArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(pointArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(pointArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(pointArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
        org.junit.Assert.assertNotNull(pointList99);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int7 = point6.getX();
        int int8 = point6.getX();
        int int9 = point6.getX();
        int int10 = point6.getY();
        int int11 = point6.getY();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getY();
        int int14 = point6.getY();
        int int15 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, 35);
        boolean boolean19 = point6.dominates(point18);
        java.lang.Class<?> wildcardClass20 = point18.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, 52);
        boolean boolean21 = point15.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int25 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point28.getX();
        boolean boolean34 = point24.dominates(point28);
        int int35 = point28.getX();
        int int36 = point28.getX();
        boolean boolean37 = point15.dominates(point28);
        int int38 = point28.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int6 = point5.getX();
        int int7 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int11 = point10.getX();
        int int12 = point10.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point18.getY();
        int int21 = point18.getX();
        boolean boolean22 = point10.dominates(point18);
        int int23 = point10.getX();
        int int24 = point10.getX();
        boolean boolean25 = point5.dominates(point10);
        int int26 = point10.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int30 = point29.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int34 = point33.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        int int42 = point37.getX();
        boolean boolean43 = point33.dominates(point37);
        int int44 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point50.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        boolean boolean60 = point50.dominates(point58);
        int int61 = point58.getX();
        int int62 = point58.getX();
        boolean boolean63 = point33.dominates(point58);
        boolean boolean64 = point29.dominates(point33);
        boolean boolean65 = point10.dominates(point33);
        int int66 = point33.getX();
        int int67 = point33.getY();
        boolean boolean68 = point2.dominates(point33);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int21 = point20.getX();
        int int22 = point20.getX();
        int int23 = point20.getX();
        int int24 = point20.getY();
        boolean boolean25 = point15.dominates(point20);
        int int26 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        boolean boolean35 = point15.dominates(point32);
        java.lang.Class<?> wildcardClass36 = point32.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (short) 0);
        int int3 = point2.getX();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) '#');
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point14.getY();
        int int17 = point14.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean21 = point14.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean25 = point14.dominates(point24);
        int int26 = point14.getY();
        int int27 = point14.getX();
        boolean boolean28 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 100);
        boolean boolean32 = point8.dominates(point31);
        boolean boolean33 = point5.dominates(point31);
        boolean boolean34 = point2.dominates(point31);
        int int35 = point2.getY();
        int int36 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) ' ');
        int int3 = point2.getY();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int17 = point16.getX();
        int int18 = point16.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean22 = point16.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        int int24 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        int int33 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean37 = point30.dominates(point36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int41 = point40.getY();
        boolean boolean42 = point36.dominates(point40);
        int int43 = point40.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int47 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        int int55 = point53.getY();
        int int56 = point53.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean60 = point53.dominates(point59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean64 = point53.dominates(point63);
        int int65 = point63.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int69 = point68.getX();
        int int70 = point68.getX();
        int int71 = point68.getX();
        int int72 = point68.getY();
        boolean boolean73 = point63.dominates(point68);
        int int74 = point68.getY();
        boolean boolean75 = point46.dominates(point68);
        int int76 = point68.getY();
        boolean boolean77 = point40.dominates(point68);
        boolean boolean78 = point13.dominates(point40);
        int int79 = point40.getY();
        boolean boolean80 = point10.dominates(point40);
        boolean boolean81 = point7.dominates(point40);
        boolean boolean82 = point2.dominates(point40);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 97 + "'", int79 == 97);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) -1);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        boolean boolean23 = point6.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int27 = point26.getX();
        int int28 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point34.getY();
        int int37 = point34.getX();
        boolean boolean38 = point26.dominates(point34);
        boolean boolean39 = point20.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int43 = point42.getX();
        boolean boolean44 = point34.dominates(point42);
        boolean boolean45 = point2.dominates(point34);
        int int46 = point34.getX();
        int int47 = point34.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        int int15 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int19 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point22.getX();
        boolean boolean28 = point18.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int32 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point35.getX();
        boolean boolean41 = point31.dominates(point35);
        int int42 = point35.getX();
        boolean boolean43 = point18.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int47 = point46.getX();
        int int48 = point46.getY();
        boolean boolean49 = point18.dominates(point46);
        boolean boolean50 = point12.dominates(point46);
        boolean boolean51 = point6.dominates(point46);
        boolean boolean52 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        int int61 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean65 = point58.dominates(point64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int69 = point68.getY();
        boolean boolean70 = point64.dominates(point68);
        boolean boolean71 = point2.dominates(point64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int75 = point74.getX();
        int int76 = point74.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) '#');
        boolean boolean80 = point74.dominates(point79);
        int int81 = point74.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int88 = point87.getY();
        int int89 = point87.getY();
        boolean boolean90 = point84.dominates(point87);
        int int91 = point84.getY();
        boolean boolean92 = point74.dominates(point84);
        boolean boolean93 = point64.dominates(point74);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 97 + "'", int75 == 97);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 97 + "'", int76 == 97);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 97 + "'", int81 == 97);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point10.getX();
        boolean boolean16 = point6.dominates(point10);
        int int17 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        boolean boolean33 = point23.dominates(point31);
        int int34 = point31.getX();
        int int35 = point31.getX();
        boolean boolean36 = point6.dominates(point31);
        boolean boolean37 = point2.dominates(point6);
        int int38 = point2.getX();
        int int39 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) 'a');
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        boolean boolean25 = point15.dominates(point23);
        int int26 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int30 = point29.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        int int38 = point33.getX();
        boolean boolean39 = point29.dominates(point33);
        boolean boolean40 = point23.dominates(point29);
        boolean boolean41 = point9.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int45 = point44.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point48.getX();
        boolean boolean54 = point44.dominates(point48);
        int int55 = point48.getX();
        int int56 = point48.getY();
        boolean boolean57 = point9.dominates(point48);
        boolean boolean58 = point6.dominates(point48);
        boolean boolean59 = point2.dominates(point48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        int int70 = point68.getY();
        int int71 = point68.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean75 = point68.dominates(point74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean79 = point68.dominates(point78);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        int int87 = point85.getY();
        int int88 = point85.getY();
        boolean boolean89 = point68.dominates(point85);
        boolean boolean90 = point62.dominates(point85);
        boolean boolean91 = point2.dominates(point85);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 97);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point14.getY();
        int int17 = point14.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean21 = point14.dominates(point20);
        boolean boolean22 = point8.dominates(point20);
        int int23 = point20.getX();
        boolean boolean24 = point5.dominates(point20);
        boolean boolean25 = point2.dominates(point20);
        int int26 = point20.getY();
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point36 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList42, pointArray41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm44.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm33.produceFinalSkyLine(pointList42, pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm33.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point52 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList58, pointArray57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm60.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm49.produceFinalSkyLine(pointList58, pointList61);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm33.produceSubSkyLines(pointList58);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm33.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean73 = point69.dominates(point72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point69 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList75, pointArray74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm77.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm66.produceFinalSkyLine(pointList75, pointList78);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm65.produceSubSkyLines(pointList75);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean88 = point84.dominates(point87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point84 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList90, pointArray89);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm92 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm92.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm81.produceFinalSkyLine(pointList90, pointList93);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm65.produceSubSkyLines(pointList94);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm33.produceSubSkyLines(pointList94);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.produceSubSkyLines(pointList96);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList99 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(pointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(pointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(pointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(pointArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
        org.junit.Assert.assertNotNull(pointList99);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) (short) 10);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, 0);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, (int) (short) 100);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 1);
        boolean boolean10 = point6.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        int int32 = point27.getY();
        boolean boolean33 = point13.dominates(point27);
        int int34 = point27.getX();
        boolean boolean35 = point9.dominates(point27);
        boolean boolean36 = point2.dominates(point27);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int9 = point8.getY();
        boolean boolean10 = point5.dominates(point8);
        boolean boolean11 = point2.dominates(point5);
        int int12 = point2.getY();
        int int13 = point2.getY();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean16 = point9.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean20 = point9.dominates(point19);
        int int21 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int25 = point24.getX();
        int int26 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int30 = point29.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        int int38 = point33.getX();
        boolean boolean39 = point29.dominates(point33);
        int int40 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        boolean boolean56 = point46.dominates(point54);
        int int57 = point54.getX();
        int int58 = point54.getX();
        boolean boolean59 = point29.dominates(point54);
        int int60 = point29.getX();
        boolean boolean61 = point24.dominates(point29);
        boolean boolean62 = point19.dominates(point24);
        int int63 = point19.getX();
        boolean boolean64 = point2.dominates(point19);
        java.lang.Class<?> wildcardClass65 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        int int20 = point16.getY();
        int int21 = point16.getY();
        int int22 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = point16.dominates(point23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        int int21 = point16.getY();
        int int22 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) 10);
        int int26 = point25.getY();
        int int27 = point25.getX();
        boolean boolean28 = point16.dominates(point25);
        int int29 = point25.getY();
        java.lang.Class<?> wildcardClass30 = point25.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getX();
        int int6 = point2.getY();
        int int7 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) '4');
        int int11 = point10.getX();
        boolean boolean12 = point2.dominates(point10);
        int int13 = point10.getY();
        int int14 = point10.getY();
        int int15 = point10.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 35);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        boolean boolean19 = point9.dominates(point17);
        int int20 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int24 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point27.getX();
        boolean boolean33 = point23.dominates(point27);
        int int34 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        int int42 = point40.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        boolean boolean50 = point40.dominates(point48);
        int int51 = point48.getX();
        int int52 = point48.getX();
        boolean boolean53 = point23.dominates(point48);
        int int54 = point48.getY();
        boolean boolean55 = point9.dominates(point48);
        boolean boolean56 = point2.dominates(point48);
        int int57 = point48.getX();
        int int58 = point48.getX();
        int int59 = point48.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int19 = point18.getY();
        boolean boolean20 = point5.dominates(point18);
        int int21 = point18.getY();
        int int22 = point18.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 1);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        boolean boolean30 = point13.dominates(point19);
        int int31 = point19.getX();
        int int32 = point19.getY();
        int int33 = point19.getY();
        int int34 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = point19.dominates(point35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, 100);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int9 = point8.getY();
        boolean boolean10 = point2.dominates(point8);
        int int11 = point8.getX();
        int int12 = point8.getX();
        int int13 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        int int30 = point23.getX();
        boolean boolean31 = point16.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int38 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point41.getX();
        boolean boolean47 = point37.dominates(point41);
        int int48 = point41.getX();
        int int49 = point41.getY();
        int int50 = point41.getY();
        boolean boolean51 = point34.dominates(point41);
        boolean boolean52 = point16.dominates(point34);
        int int53 = point34.getX();
        boolean boolean54 = point8.dominates(point34);
        int int55 = point8.getX();
        java.lang.Class<?> wildcardClass56 = point8.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (-1));
        int int6 = point5.getX();
        boolean boolean7 = point2.dominates(point5);
        int int8 = point5.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean16 = point9.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean20 = point9.dominates(point19);
        int int21 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int25 = point24.getX();
        int int26 = point24.getX();
        int int27 = point24.getX();
        int int28 = point24.getY();
        boolean boolean29 = point19.dominates(point24);
        int int30 = point24.getY();
        boolean boolean31 = point2.dominates(point24);
        int int32 = point24.getY();
        int int33 = point24.getX();
        int int34 = point24.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 10);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        boolean boolean8 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass9 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int9 = point8.getY();
        int int10 = point8.getY();
        boolean boolean11 = point5.dominates(point8);
        int int12 = point5.getY();
        int int13 = point5.getY();
        boolean boolean14 = point2.dominates(point5);
        int int15 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        int int27 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean31 = point24.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean35 = point24.dominates(point34);
        int int36 = point34.getX();
        boolean boolean37 = point18.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int41 = point40.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean45 = point40.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean58 = point51.dominates(point57);
        boolean boolean59 = point40.dominates(point51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int63 = point62.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean67 = point62.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean74 = point70.dominates(point73);
        int int75 = point73.getY();
        int int76 = point73.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean80 = point73.dominates(point79);
        boolean boolean81 = point62.dominates(point73);
        boolean boolean82 = point40.dominates(point62);
        boolean boolean83 = point18.dominates(point40);
        int int84 = point40.getX();
        boolean boolean85 = point5.dominates(point40);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        boolean boolean19 = point9.dominates(point17);
        int int20 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int24 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point27.getX();
        boolean boolean33 = point23.dominates(point27);
        int int34 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        int int42 = point40.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        boolean boolean50 = point40.dominates(point48);
        int int51 = point48.getX();
        int int52 = point48.getX();
        boolean boolean53 = point23.dominates(point48);
        int int54 = point48.getY();
        boolean boolean55 = point9.dominates(point48);
        boolean boolean56 = point2.dominates(point48);
        int int57 = point48.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int61 = point60.getY();
        int int62 = point60.getY();
        int int63 = point60.getX();
        boolean boolean64 = point48.dominates(point60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (-1));
        boolean boolean68 = point48.dominates(point67);
        java.lang.Class<?> wildcardClass69 = point48.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int25 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point28.getX();
        boolean boolean34 = point24.dominates(point28);
        int int35 = point28.getX();
        boolean boolean36 = point11.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int40 = point39.getX();
        int int41 = point39.getY();
        boolean boolean42 = point11.dominates(point39);
        boolean boolean43 = point5.dominates(point39);
        int int44 = point5.getY();
        java.lang.Class<?> wildcardClass45 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 97);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int19 = point18.getY();
        boolean boolean20 = point5.dominates(point18);
        java.lang.Class<?> wildcardClass21 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (short) 10);
        int int3 = point2.getY();
        int int4 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int7 = point6.getX();
        int int8 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int12 = point11.getX();
        boolean boolean13 = point6.dominates(point11);
        int int14 = point11.getY();
        int int15 = point11.getY();
        boolean boolean16 = point2.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 10);
        int int20 = point19.getX();
        boolean boolean21 = point2.dominates(point19);
        int int22 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        int int31 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean35 = point28.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean39 = point28.dominates(point38);
        int int40 = point28.getY();
        int int41 = point28.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int45 = point44.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int49 = point48.getX();
        int int50 = point48.getX();
        int int51 = point48.getX();
        int int52 = point48.getY();
        int int53 = point48.getY();
        boolean boolean54 = point44.dominates(point48);
        boolean boolean55 = point28.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        int int64 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean68 = point61.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean72 = point61.dominates(point71);
        int int73 = point71.getY();
        boolean boolean74 = point44.dominates(point71);
        boolean boolean75 = point2.dominates(point71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean85 = point81.dominates(point84);
        int int86 = point84.getY();
        int int87 = point84.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean91 = point84.dominates(point90);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point94 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) '4');
        boolean boolean95 = point90.dominates(point94);
        boolean boolean96 = point78.dominates(point90);
        boolean boolean97 = point2.dominates(point90);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 32 + "'", int73 == 32);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 1);
        boolean boolean17 = point2.dominates(point16);
        int int18 = point2.getY();
        int int19 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        int int28 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int32 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point35.getX();
        boolean boolean41 = point31.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int45 = point44.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point48.getX();
        boolean boolean54 = point44.dominates(point48);
        int int55 = point48.getX();
        boolean boolean56 = point31.dominates(point48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int60 = point59.getX();
        int int61 = point59.getY();
        boolean boolean62 = point31.dominates(point59);
        boolean boolean63 = point25.dominates(point59);
        int int64 = point59.getX();
        int int65 = point59.getY();
        boolean boolean66 = point2.dominates(point59);
        java.lang.Class<?> wildcardClass67 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        int int24 = point21.getY();
        int int25 = point21.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int29 = point28.getX();
        int int30 = point28.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        int int38 = point36.getY();
        int int39 = point36.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean43 = point36.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean47 = point36.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getX();
        int int50 = point46.getX();
        boolean boolean51 = point28.dominates(point46);
        boolean boolean52 = point21.dominates(point28);
        java.lang.Class<?> wildcardClass53 = point28.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 32 + "'", int48 == 32);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        int int13 = point5.getY();
        int int14 = point5.getY();
        int int15 = point5.getY();
        int int16 = point5.getY();
        java.lang.Class<?> wildcardClass17 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 0);
        int int3 = point2.getY();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (int) (byte) -1);
        boolean boolean8 = point2.dominates(point7);
        int int9 = point7.getX();
        int int10 = point7.getY();
        int int11 = point7.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass36 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int17 = point16.getX();
        int int18 = point16.getY();
        boolean boolean19 = point6.dominates(point16);
        int int20 = point16.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        int int24 = point23.getY();
        boolean boolean25 = point16.dominates(point23);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        boolean boolean11 = point2.dominates(point8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int21 = point20.getX();
        int int22 = point20.getX();
        int int23 = point20.getX();
        int int24 = point20.getY();
        boolean boolean25 = point15.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int29 = point28.getX();
        int int30 = point28.getX();
        boolean boolean31 = point20.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point20.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) '#');
        boolean boolean43 = point37.dominates(point42);
        int int44 = point42.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 32 + "'", int44 == 32);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        boolean boolean8 = point2.dominates(point5);
        int int9 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int13 = point12.getX();
        int int14 = point12.getY();
        int int15 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int19 = point18.getY();
        boolean boolean20 = point12.dominates(point18);
        int int21 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (byte) -1);
        int int25 = point24.getX();
        boolean boolean26 = point18.dominates(point24);
        int int27 = point18.getY();
        boolean boolean28 = point2.dominates(point18);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getX();
        int int8 = point2.getY();
        int int9 = point2.getX();
        int int10 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int14 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point17.getX();
        boolean boolean23 = point13.dominates(point17);
        int int24 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        int int33 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean37 = point30.dominates(point36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean41 = point30.dominates(point40);
        int int42 = point30.getY();
        int int43 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        int int51 = point49.getY();
        int int52 = point49.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean56 = point49.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean60 = point49.dominates(point59);
        boolean boolean61 = point30.dominates(point49);
        boolean boolean62 = point13.dominates(point49);
        boolean boolean63 = point2.dominates(point13);
        int int64 = point2.getY();
        int int65 = point2.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point53 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList59, pointArray58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm61.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm50.produceFinalSkyLine(pointList59, pointList62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point68 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList74, pointArray73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm76.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm65.produceFinalSkyLine(pointList74, pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm64.produceSubSkyLines(pointList74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm80.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm50.produceFinalSkyLine(pointList79, pointList81);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.produceSubSkyLines(pointList79);
        java.lang.Class<?> wildcardClass84 = pointList83.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(pointArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(pointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean58 = point51.dominates(point57);
        boolean boolean59 = point38.dominates(point51);
        boolean boolean60 = point2.dominates(point38);
        int int61 = point38.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean68 = point64.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) '#');
        boolean boolean72 = point64.dominates(point71);
        boolean boolean73 = point38.dominates(point64);
        int int74 = point64.getY();
        int int75 = point64.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        int int21 = point16.getY();
        int int22 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) 10);
        int int26 = point25.getY();
        int int27 = point25.getX();
        boolean boolean28 = point16.dominates(point25);
        int int29 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        boolean boolean45 = point35.dominates(point43);
        int int46 = point43.getY();
        int int47 = point43.getX();
        int int48 = point43.getY();
        boolean boolean49 = point25.dominates(point43);
        int int50 = point43.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        int int15 = point2.getX();
        int int16 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int20 = point19.getX();
        int int21 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        int int29 = point27.getY();
        int int30 = point27.getX();
        boolean boolean31 = point19.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        boolean boolean40 = point27.dominates(point37);
        boolean boolean41 = point2.dominates(point37);
        int int42 = point37.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 32 + "'", int42 == 32);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList3 = skylineAlgorithm2.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point7 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList13, pointArray12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm15.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm4.produceFinalSkyLine(pointList13, pointList16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm2.produceFinalSkyLine(pointList17, pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.produceSubSkyLines(pointList32);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point39 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList45, pointArray44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm36.produceFinalSkyLine(pointList45, pointList48);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm0.produceSubSkyLines(pointList49);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass52 = pointList51.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(pointList3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(pointArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(pointArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        int int33 = point27.getX();
        int int34 = point27.getX();
        int int35 = point27.getX();
        int int36 = point27.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 97);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int43 = point42.getY();
        boolean boolean44 = point39.dominates(point42);
        int int45 = point39.getX();
        boolean boolean46 = point27.dominates(point39);
        int int47 = point27.getX();
        int int48 = point27.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (short) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point5.getX();
        int int11 = point5.getY();
        int int12 = point5.getX();
        int int13 = point5.getX();
        boolean boolean14 = point2.dominates(point5);
        int int15 = point5.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, 0);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int13 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point16.getX();
        boolean boolean22 = point12.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int26 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point29.getX();
        boolean boolean35 = point25.dominates(point29);
        int int36 = point29.getX();
        boolean boolean37 = point12.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        int int45 = point43.getY();
        int int46 = point43.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean50 = point43.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        int int58 = point56.getY();
        int int59 = point56.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean63 = point56.dominates(point62);
        boolean boolean64 = point43.dominates(point56);
        boolean boolean65 = point29.dominates(point56);
        int int66 = point56.getY();
        int int67 = point56.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int71 = point70.getX();
        int int72 = point70.getY();
        int int73 = point70.getY();
        boolean boolean74 = point56.dominates(point70);
        boolean boolean75 = point9.dominates(point70);
        int int76 = point9.getX();
        int int77 = point9.getY();
        boolean boolean78 = point5.dominates(point9);
        int int79 = point5.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        int int21 = point18.getX();
        int int22 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        boolean boolean38 = point28.dominates(point36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int42 = point41.getY();
        boolean boolean43 = point28.dominates(point41);
        boolean boolean44 = point18.dominates(point28);
        int int45 = point18.getY();
        int int46 = point18.getY();
        int int47 = point18.getY();
        boolean boolean48 = point2.dominates(point18);
        int int49 = point2.getY();
        int int50 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point49 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList55, pointArray54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm57.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm46.produceFinalSkyLine(pointList55, pointList58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point63 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList69, pointArray68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = skylineAlgorithm71.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm60.produceFinalSkyLine(pointList69, pointList72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm32.produceFinalSkyLine(pointList59, pointList69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean82 = point78.dominates(point81);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point78 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList84, pointArray83);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm86.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm75.produceFinalSkyLine(pointList84, pointList87);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm32.produceSubSkyLines(pointList84);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm0.produceSubSkyLines(pointList84);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm0.produceSubSkyLines(pointList93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(pointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(pointArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(pointList72);
        org.junit.Assert.assertNotNull(pointList73);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(pointArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(pointList87);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point29.dominates(point37);
        int int40 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int44 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point47.getX();
        boolean boolean53 = point43.dominates(point47);
        boolean boolean54 = point37.dominates(point43);
        boolean boolean55 = point23.dominates(point37);
        boolean boolean56 = point16.dominates(point37);
        int int57 = point16.getX();
        int int58 = point16.getY();
        int int59 = point16.getX();
        int int60 = point16.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int64 = point63.getX();
        int int65 = point63.getX();
        int int66 = point63.getY();
        boolean boolean67 = point16.dominates(point63);
        int int68 = point63.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 0);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 97);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        int int23 = point20.getY();
        boolean boolean24 = point6.dominates(point20);
        int int25 = point20.getY();
        int int26 = point20.getX();
        int int27 = point20.getY();
        int int28 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point34.getY();
        int int37 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int41 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point44.getX();
        boolean boolean50 = point40.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int54 = point53.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        int int62 = point57.getX();
        boolean boolean63 = point53.dominates(point57);
        int int64 = point57.getX();
        boolean boolean65 = point40.dominates(point57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int69 = point68.getX();
        int int70 = point68.getY();
        boolean boolean71 = point40.dominates(point68);
        boolean boolean72 = point34.dominates(point68);
        int int73 = point34.getY();
        int int74 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int78 = point77.getX();
        boolean boolean79 = point34.dominates(point77);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        boolean boolean86 = point82.dominates(point85);
        boolean boolean87 = point34.dominates(point82);
        boolean boolean88 = point20.dominates(point82);
        boolean boolean89 = point2.dominates(point20);
        int int90 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point93 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, 10);
        boolean boolean94 = point20.dominates(point93);
        java.lang.Class<?> wildcardClass95 = point20.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 97 + "'", int78 == 97);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int18 = point17.getX();
        boolean boolean19 = point2.dominates(point17);
        int int20 = point2.getX();
        int int21 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int25 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int29 = point28.getX();
        int int30 = point28.getX();
        int int31 = point28.getX();
        int int32 = point28.getY();
        int int33 = point28.getY();
        boolean boolean34 = point24.dominates(point28);
        int int35 = point28.getY();
        int int36 = point28.getY();
        int int37 = point28.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, 35);
        boolean boolean41 = point28.dominates(point40);
        int int42 = point40.getX();
        boolean boolean43 = point2.dominates(point40);
        java.lang.Class<?> wildcardClass44 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        int int9 = point5.getX();
        int int10 = point5.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point5.getX();
        boolean boolean11 = point2.dominates(point5);
        int int12 = point2.getX();
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        int int17 = point16.getX();
        int int18 = point16.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int28 = point27.getY();
        boolean boolean29 = point24.dominates(point27);
        boolean boolean30 = point21.dominates(point24);
        boolean boolean31 = point16.dominates(point21);
        int int32 = point21.getX();
        int int33 = point21.getY();
        boolean boolean34 = point2.dominates(point21);
        int int35 = point21.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (-1));
        boolean boolean19 = point13.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int23 = point22.getX();
        int int24 = point22.getX();
        int int25 = point22.getX();
        int int26 = point22.getY();
        int int27 = point22.getY();
        boolean boolean28 = point13.dominates(point22);
        int int29 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int36 = point35.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point39.getX();
        boolean boolean45 = point35.dominates(point39);
        int int46 = point39.getX();
        boolean boolean47 = point32.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point39.dominates(point50);
        boolean boolean52 = point22.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        int int61 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean65 = point58.dominates(point64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean69 = point58.dominates(point68);
        int int70 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int74 = point73.getX();
        boolean boolean75 = point58.dominates(point73);
        int int76 = point58.getY();
        boolean boolean77 = point39.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int81 = point80.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean88 = point84.dominates(point87);
        int int89 = point84.getX();
        boolean boolean90 = point80.dominates(point84);
        int int91 = point84.getX();
        int int92 = point84.getY();
        boolean boolean93 = point58.dominates(point84);
        int int94 = point58.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int7 = point6.getX();
        int int8 = point6.getX();
        int int9 = point6.getX();
        int int10 = point6.getY();
        int int11 = point6.getY();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) -1);
        int int16 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        boolean boolean35 = point25.dominates(point33);
        boolean boolean36 = point19.dominates(point33);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int40 = point39.getX();
        int int41 = point39.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point47.getY();
        int int50 = point47.getX();
        boolean boolean51 = point39.dominates(point47);
        boolean boolean52 = point33.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int56 = point55.getX();
        boolean boolean57 = point47.dominates(point55);
        boolean boolean58 = point15.dominates(point47);
        int int59 = point15.getX();
        int int60 = point15.getX();
        boolean boolean61 = point6.dominates(point15);
        java.lang.Class<?> wildcardClass62 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int6 = point5.getX();
        int int7 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int11 = point10.getX();
        boolean boolean12 = point5.dominates(point10);
        int int13 = point10.getX();
        int int14 = point10.getX();
        int int15 = point10.getX();
        int int16 = point10.getX();
        boolean boolean17 = point2.dominates(point10);
        java.lang.Class<?> wildcardClass18 = point10.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point10.getX();
        boolean boolean16 = point6.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        int int30 = point23.getX();
        boolean boolean31 = point6.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        int int40 = point37.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean44 = point37.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point50.getY();
        int int53 = point50.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean57 = point50.dominates(point56);
        boolean boolean58 = point37.dominates(point50);
        boolean boolean59 = point23.dominates(point50);
        int int60 = point50.getY();
        int int61 = point50.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int65 = point64.getX();
        int int66 = point64.getY();
        int int67 = point64.getY();
        boolean boolean68 = point50.dominates(point64);
        int int69 = point50.getX();
        boolean boolean70 = point2.dominates(point50);
        java.lang.Class<?> wildcardClass71 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        int int6 = point5.getX();
        int int7 = point5.getX();
        boolean boolean8 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass9 = point5.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        int int33 = point30.getX();
        int int34 = point30.getX();
        boolean boolean35 = point5.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point41.getY();
        int int44 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean48 = point41.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        int int56 = point54.getY();
        int int57 = point54.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean61 = point54.dominates(point60);
        boolean boolean62 = point41.dominates(point54);
        boolean boolean63 = point5.dominates(point41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean67 = point41.dominates(point66);
        boolean boolean68 = point2.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = point2.dominates(point69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int8 = point7.getX();
        boolean boolean9 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int13 = point12.getY();
        boolean boolean14 = point7.dominates(point12);
        int int15 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        int int27 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean31 = point24.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean35 = point24.dominates(point34);
        int int36 = point34.getX();
        boolean boolean37 = point18.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        boolean boolean56 = point46.dominates(point54);
        int int57 = point54.getY();
        boolean boolean58 = point40.dominates(point54);
        int int59 = point54.getY();
        boolean boolean60 = point18.dominates(point54);
        boolean boolean61 = point7.dominates(point54);
        int int62 = point54.getY();
        java.lang.Class<?> wildcardClass63 = point54.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.lang.Class<?> wildcardClass14 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        int int18 = point15.getX();
        int int19 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        boolean boolean35 = point25.dominates(point33);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int39 = point38.getY();
        boolean boolean40 = point25.dominates(point38);
        boolean boolean41 = point15.dominates(point25);
        int int42 = point15.getY();
        java.lang.Class<?> wildcardClass43 = point15.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        int int3 = point2.getX();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int14 = point13.getY();
        boolean boolean15 = point10.dominates(point13);
        boolean boolean16 = point7.dominates(point10);
        boolean boolean17 = point2.dominates(point7);
        int int18 = point7.getY();
        int int19 = point7.getY();
        int int20 = point7.getY();
        java.lang.Class<?> wildcardClass21 = point7.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int8 = point7.getX();
        int int9 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getX();
        boolean boolean19 = point7.dominates(point15);
        int int20 = point7.getX();
        int int21 = point7.getX();
        boolean boolean22 = point2.dominates(point7);
        int int23 = point7.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int27 = point26.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        int int38 = point36.getY();
        int int39 = point36.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int43 = point42.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        int int51 = point46.getX();
        boolean boolean52 = point42.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int56 = point55.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean63 = point59.dominates(point62);
        int int64 = point59.getX();
        boolean boolean65 = point55.dominates(point59);
        int int66 = point59.getX();
        boolean boolean67 = point42.dominates(point59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int71 = point70.getX();
        int int72 = point70.getY();
        boolean boolean73 = point42.dominates(point70);
        boolean boolean74 = point36.dominates(point70);
        boolean boolean75 = point30.dominates(point70);
        boolean boolean76 = point26.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean83 = point79.dominates(point82);
        int int84 = point82.getY();
        int int85 = point82.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point88 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean89 = point82.dominates(point88);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point92 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int93 = point92.getY();
        boolean boolean94 = point88.dominates(point92);
        boolean boolean95 = point26.dominates(point88);
        int int96 = point26.getX();
        int int97 = point26.getY();
        boolean boolean98 = point7.dominates(point26);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 97 + "'", int93 == 97);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 52 + "'", int96 == 52);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int9 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean13 = point8.dominates(point12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        int int22 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean26 = point19.dominates(point25);
        boolean boolean27 = point8.dominates(point19);
        boolean boolean28 = point2.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) 'a');
        int int32 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 1);
        boolean boolean36 = point31.dominates(point35);
        int int37 = point35.getX();
        boolean boolean38 = point8.dominates(point35);
        int int39 = point8.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int25 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point28.getX();
        boolean boolean34 = point24.dominates(point28);
        int int35 = point28.getX();
        boolean boolean36 = point11.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int40 = point39.getX();
        int int41 = point39.getY();
        boolean boolean42 = point11.dominates(point39);
        boolean boolean43 = point5.dominates(point39);
        int int44 = point5.getY();
        int int45 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int49 = point48.getX();
        boolean boolean50 = point5.dominates(point48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        boolean boolean57 = point53.dominates(point56);
        boolean boolean58 = point5.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) '#');
        int int62 = point61.getY();
        boolean boolean63 = point5.dominates(point61);
        int int64 = point5.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (-1));
        boolean boolean19 = point13.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int23 = point22.getX();
        int int24 = point22.getX();
        int int25 = point22.getX();
        int int26 = point22.getY();
        int int27 = point22.getY();
        boolean boolean28 = point13.dominates(point22);
        int int29 = point22.getY();
        java.lang.Class<?> wildcardClass30 = point22.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        boolean boolean30 = point13.dominates(point19);
        int int31 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        int int40 = point37.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean44 = point37.dominates(point43);
        boolean boolean45 = point19.dominates(point37);
        int int46 = point37.getY();
        int int47 = point37.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int24 = point23.getX();
        int int25 = point23.getX();
        int int26 = point23.getX();
        int int27 = point23.getY();
        boolean boolean28 = point18.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int32 = point31.getX();
        int int33 = point31.getX();
        boolean boolean34 = point23.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean41 = point37.dominates(point40);
        boolean boolean42 = point23.dominates(point40);
        int int43 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        int int51 = point49.getY();
        int int52 = point49.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean56 = point49.dominates(point55);
        boolean boolean57 = point23.dominates(point55);
        int int58 = point23.getY();
        boolean boolean59 = point2.dominates(point23);
        java.lang.Class<?> wildcardClass60 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 100);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, 100);
        boolean boolean7 = point2.dominates(point6);
        java.lang.Class<?> wildcardClass8 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int31 = point30.getX();
        int int32 = point30.getY();
        boolean boolean33 = point2.dominates(point30);
        int int34 = point30.getX();
        int int35 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean39 = point30.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int21 = point20.getX();
        int int22 = point20.getX();
        int int23 = point20.getX();
        int int24 = point20.getY();
        boolean boolean25 = point15.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int29 = point28.getX();
        int int30 = point28.getX();
        boolean boolean31 = point20.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point20.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) 'a');
        int int43 = point42.getX();
        boolean boolean44 = point20.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point50.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        boolean boolean60 = point50.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        boolean boolean68 = point58.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean78 = point74.dominates(point77);
        int int79 = point77.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        boolean boolean87 = point77.dominates(point85);
        boolean boolean88 = point71.dominates(point85);
        boolean boolean89 = point66.dominates(point85);
        int int90 = point66.getY();
        boolean boolean91 = point20.dominates(point66);
        int int92 = point20.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) '#');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int9 = point8.getX();
        int int10 = point8.getY();
        int int11 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int15 = point14.getY();
        boolean boolean16 = point8.dominates(point14);
        int int17 = point14.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        int int26 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean30 = point23.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        int int38 = point36.getY();
        int int39 = point36.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean43 = point36.dominates(point42);
        boolean boolean44 = point23.dominates(point36);
        boolean boolean45 = point14.dominates(point36);
        int int46 = point14.getY();
        boolean boolean47 = point5.dominates(point14);
        boolean boolean48 = point2.dominates(point14);
        int int49 = point2.getX();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean16 = point9.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean20 = point9.dominates(point19);
        int int21 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int25 = point24.getX();
        int int26 = point24.getX();
        int int27 = point24.getX();
        int int28 = point24.getY();
        boolean boolean29 = point19.dominates(point24);
        int int30 = point24.getY();
        boolean boolean31 = point2.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int35 = point34.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point38.getX();
        boolean boolean44 = point34.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int48 = point47.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        int int56 = point51.getX();
        boolean boolean57 = point47.dominates(point51);
        int int58 = point51.getX();
        boolean boolean59 = point34.dominates(point51);
        int int60 = point34.getX();
        boolean boolean61 = point24.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int65 = point64.getX();
        int int66 = point64.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int70 = point69.getX();
        boolean boolean71 = point64.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) 'a');
        boolean boolean75 = point69.dominates(point74);
        int int76 = point74.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int80 = point79.getX();
        int int81 = point79.getY();
        int int82 = point79.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int86 = point85.getY();
        boolean boolean87 = point79.dominates(point85);
        int int88 = point85.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point91 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (byte) -1);
        int int92 = point91.getX();
        boolean boolean93 = point85.dominates(point91);
        boolean boolean94 = point74.dominates(point91);
        int int95 = point91.getY();
        boolean boolean96 = point24.dominates(point91);
        int int97 = point91.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 100 + "'", int88 == 100);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) 'a');
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 1);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, 32);
        boolean boolean11 = point6.dominates(point10);
        int int12 = point6.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point10.getX();
        boolean boolean16 = point6.dominates(point10);
        int int17 = point10.getX();
        boolean boolean18 = point2.dominates(point10);
        int int19 = point2.getY();
        int int20 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        int int25 = point22.getY();
        boolean boolean26 = point5.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean30 = point22.dominates(point29);
        int int31 = point29.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point53 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList59, pointArray58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm61.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm50.produceFinalSkyLine(pointList59, pointList62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point68 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList74, pointArray73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm76.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm65.produceFinalSkyLine(pointList74, pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm64.produceSubSkyLines(pointList74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm80.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm50.produceFinalSkyLine(pointList79, pointList81);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.produceSubSkyLines(pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass89 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(pointArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(pointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
        org.junit.Assert.assertNotNull(pointList87);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (short) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int6 = point5.getX();
        int int7 = point5.getY();
        int int8 = point5.getX();
        boolean boolean9 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int13 = point12.getX();
        int int14 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        int int23 = point20.getX();
        boolean boolean24 = point12.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        boolean boolean33 = point20.dominates(point30);
        int int34 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int38 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point41.getX();
        boolean boolean47 = point37.dominates(point41);
        int int48 = point41.getX();
        int int49 = point41.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int53 = point52.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean57 = point52.dominates(point56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean64 = point60.dominates(point63);
        int int65 = point63.getY();
        int int66 = point63.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean70 = point63.dominates(point69);
        boolean boolean71 = point52.dominates(point63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int75 = point74.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean79 = point74.dominates(point78);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        int int87 = point85.getY();
        int int88 = point85.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point91 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean92 = point85.dominates(point91);
        boolean boolean93 = point74.dominates(point85);
        boolean boolean94 = point52.dominates(point74);
        boolean boolean95 = point41.dominates(point74);
        int int96 = point74.getX();
        boolean boolean97 = point20.dominates(point74);
        boolean boolean98 = point5.dominates(point20);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList39 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point43 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList49, pointArray48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm51.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm40.produceFinalSkyLine(pointList49, pointList52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point57 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList63, pointArray62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm65.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm54.produceFinalSkyLine(pointList63, pointList66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean75 = point71.dominates(point74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point71 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList77, pointArray76);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm79.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm68.produceFinalSkyLine(pointList77, pointList80);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm40.produceFinalSkyLine(pointList67, pointList77);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean90 = point86.dominates(point89);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray91 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point86 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList92, pointArray91);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm94 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm94.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm83.produceFinalSkyLine(pointList92, pointList95);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm40.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm0.produceSubSkyLines(pointList97);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList99 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertNotNull(pointList38);
        org.junit.Assert.assertNotNull(pointList39);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(pointArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(pointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(pointArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(pointArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
        org.junit.Assert.assertNotNull(pointList99);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList21 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList22 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point26 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList32, pointArray31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm34.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm23.produceFinalSkyLine(pointList32, pointList35);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm23.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = skylineAlgorithm23.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList39 = skylineAlgorithm23.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm23.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm23.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm23.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm23.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm23.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point49 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList55, pointArray54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm57.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm46.produceFinalSkyLine(pointList55, pointList58);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm45.produceSubSkyLines(pointList55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm61.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point66 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList72, pointArray71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm74.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm63.produceFinalSkyLine(pointList72, pointList75);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean84 = point80.dominates(point83);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point80 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList86, pointArray85);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm88 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm88.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm77.produceFinalSkyLine(pointList86, pointList89);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm61.produceFinalSkyLine(pointList76, pointList89);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm45.produceSubSkyLines(pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm23.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm0.produceSubSkyLines(pointList93);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertNotNull(pointList21);
        org.junit.Assert.assertNotNull(pointList22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(pointArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertNotNull(pointList38);
        org.junit.Assert.assertNotNull(pointList39);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(pointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(pointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(pointArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int7 = point6.getX();
        int int8 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int12 = point11.getX();
        boolean boolean13 = point6.dominates(point11);
        int int14 = point11.getY();
        int int15 = point11.getY();
        boolean boolean16 = point2.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 10);
        int int20 = point19.getX();
        boolean boolean21 = point2.dominates(point19);
        int int22 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        int int31 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean35 = point28.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean39 = point28.dominates(point38);
        int int40 = point28.getY();
        int int41 = point28.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int45 = point44.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int49 = point48.getX();
        int int50 = point48.getX();
        int int51 = point48.getX();
        int int52 = point48.getY();
        int int53 = point48.getY();
        boolean boolean54 = point44.dominates(point48);
        boolean boolean55 = point28.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        int int64 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean68 = point61.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean72 = point61.dominates(point71);
        int int73 = point71.getY();
        boolean boolean74 = point44.dominates(point71);
        boolean boolean75 = point2.dominates(point71);
        java.lang.Class<?> wildcardClass76 = point71.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 32 + "'", int73 == 32);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 100);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass35 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        int int20 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point26.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        boolean boolean36 = point26.dominates(point34);
        int int37 = point34.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int41 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point44.getX();
        boolean boolean50 = point40.dominates(point44);
        boolean boolean51 = point34.dominates(point40);
        int int52 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        int int61 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean65 = point58.dominates(point64);
        boolean boolean66 = point40.dominates(point58);
        boolean boolean67 = point16.dominates(point58);
        int int68 = point58.getX();
        boolean boolean69 = point2.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int73 = point72.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean77 = point72.dominates(point76);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        boolean boolean81 = point72.dominates(point80);
        boolean boolean82 = point2.dominates(point72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point88 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        boolean boolean89 = point85.dominates(point88);
        int int90 = point85.getX();
        boolean boolean91 = point72.dominates(point85);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 97);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        int int23 = point20.getY();
        boolean boolean24 = point6.dominates(point20);
        int int25 = point20.getY();
        int int26 = point20.getX();
        int int27 = point20.getY();
        int int28 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point34.getY();
        int int37 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int41 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point44.getX();
        boolean boolean50 = point40.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int54 = point53.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        int int62 = point57.getX();
        boolean boolean63 = point53.dominates(point57);
        int int64 = point57.getX();
        boolean boolean65 = point40.dominates(point57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int69 = point68.getX();
        int int70 = point68.getY();
        boolean boolean71 = point40.dominates(point68);
        boolean boolean72 = point34.dominates(point68);
        int int73 = point34.getY();
        int int74 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int78 = point77.getX();
        boolean boolean79 = point34.dominates(point77);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        boolean boolean86 = point82.dominates(point85);
        boolean boolean87 = point34.dominates(point82);
        boolean boolean88 = point20.dominates(point82);
        boolean boolean89 = point2.dominates(point20);
        int int90 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point93 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, 10);
        boolean boolean94 = point20.dominates(point93);
        int int95 = point93.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 97 + "'", int78 == 97);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 32 + "'", int95 == 32);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        int int17 = point9.getY();
        int int18 = point9.getY();
        int int19 = point9.getY();
        int int20 = point9.getX();
        boolean boolean21 = point2.dominates(point9);
        int int22 = point9.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 1);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) ' ');
        int int3 = point2.getY();
        int int4 = point2.getX();
        int int5 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int9 = point8.getX();
        int int10 = point8.getY();
        int int11 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int15 = point14.getY();
        boolean boolean16 = point8.dominates(point14);
        int int17 = point14.getX();
        int int18 = point14.getX();
        int int19 = point14.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int26 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point29.getX();
        boolean boolean35 = point25.dominates(point29);
        int int36 = point29.getX();
        boolean boolean37 = point22.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int44 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point47.getX();
        boolean boolean53 = point43.dominates(point47);
        int int54 = point47.getX();
        int int55 = point47.getY();
        int int56 = point47.getY();
        boolean boolean57 = point40.dominates(point47);
        boolean boolean58 = point22.dominates(point40);
        int int59 = point40.getX();
        boolean boolean60 = point14.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        int int68 = point66.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean75 = point71.dominates(point74);
        boolean boolean76 = point66.dominates(point74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean83 = point79.dominates(point82);
        boolean boolean84 = point74.dominates(point82);
        int int85 = point82.getY();
        int int86 = point82.getX();
        int int87 = point82.getY();
        boolean boolean88 = point14.dominates(point82);
        boolean boolean89 = point2.dominates(point82);
        int int90 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 32 + "'", int90 == 32);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        int int7 = point5.getY();
        int int8 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int12 = point11.getY();
        boolean boolean13 = point5.dominates(point11);
        int int14 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        int int23 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean27 = point20.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean40 = point33.dominates(point39);
        boolean boolean41 = point20.dominates(point33);
        boolean boolean42 = point11.dominates(point33);
        int int43 = point11.getY();
        int int44 = point11.getX();
        boolean boolean45 = point2.dominates(point11);
        int int46 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int50 = point49.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean60 = point56.dominates(point59);
        int int61 = point59.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean68 = point64.dominates(point67);
        boolean boolean69 = point59.dominates(point67);
        boolean boolean70 = point53.dominates(point67);
        int int71 = point53.getY();
        int int72 = point53.getY();
        boolean boolean73 = point49.dominates(point53);
        int int74 = point49.getX();
        boolean boolean75 = point11.dominates(point49);
        int int76 = point49.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList39 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass41 = pointList40.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertNotNull(pointList38);
        org.junit.Assert.assertNotNull(pointList39);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int6 = point5.getX();
        int int7 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int11 = point10.getX();
        boolean boolean12 = point5.dominates(point10);
        boolean boolean13 = point2.dominates(point5);
        int int14 = point2.getY();
        java.lang.Class<?> wildcardClass15 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean23 = point16.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean27 = point16.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) '4');
        boolean boolean31 = point16.dominates(point30);
        int int32 = point30.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        boolean boolean8 = point2.dominates(point5);
        int int9 = point2.getY();
        int int10 = point2.getY();
        java.lang.Class<?> wildcardClass11 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 100);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        int int20 = point16.getX();
        int int21 = point16.getY();
        boolean boolean22 = point2.dominates(point16);
        int int23 = point16.getX();
        int int24 = point16.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        int int13 = point5.getY();
        int int14 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 100);
        int int18 = point17.getY();
        boolean boolean19 = point5.dominates(point17);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point25.getX();
        int int31 = point25.getY();
        int int32 = point25.getX();
        int int33 = point25.getX();
        int int34 = point25.getX();
        boolean boolean35 = point22.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int39 = point38.getX();
        int int40 = point38.getY();
        int int41 = point38.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int45 = point44.getY();
        boolean boolean46 = point38.dominates(point44);
        int int47 = point44.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        int int55 = point53.getY();
        int int56 = point53.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean60 = point53.dominates(point59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        int int68 = point66.getY();
        int int69 = point66.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean73 = point66.dominates(point72);
        boolean boolean74 = point53.dominates(point66);
        boolean boolean75 = point44.dominates(point66);
        int int76 = point44.getY();
        boolean boolean77 = point25.dominates(point44);
        boolean boolean78 = point17.dominates(point25);
        int int79 = point25.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm32.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean60 = point56.dominates(point59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point56 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList62, pointArray61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm64.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm53.produceFinalSkyLine(pointList62, pointList65);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm32.produceSubSkyLines(pointList62);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm0.produceSubSkyLines(pointList62);
        java.lang.Class<?> wildcardClass69 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(pointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (-1));
        int int3 = point2.getY();
        int int4 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList2 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList3 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList4 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList5 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass6 = pointList5.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(pointList2);
        org.junit.Assert.assertNotNull(pointList3);
        org.junit.Assert.assertNotNull(pointList4);
        org.junit.Assert.assertNotNull(pointList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        boolean boolean8 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point11.getX();
        int int17 = point11.getY();
        int int18 = point11.getX();
        int int19 = point11.getX();
        boolean boolean20 = point5.dominates(point11);
        int int21 = point11.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int9 = point8.getX();
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean14 = point8.dominates(point13);
        boolean boolean15 = point5.dominates(point8);
        boolean boolean16 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass17 = point5.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) (byte) 1);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean23 = point16.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean27 = point16.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) '4');
        boolean boolean31 = point16.dominates(point30);
        int int32 = point16.getY();
        int int33 = point16.getX();
        java.lang.Class<?> wildcardClass34 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean15 = point8.dominates(point14);
        boolean boolean16 = point2.dominates(point14);
        int int17 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = point2.dominates(point18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        boolean boolean17 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int21 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean25 = point20.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point31.getY();
        int int34 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean38 = point31.dominates(point37);
        boolean boolean39 = point20.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int43 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean47 = point42.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        int int55 = point53.getY();
        int int56 = point53.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean60 = point53.dominates(point59);
        boolean boolean61 = point42.dominates(point53);
        boolean boolean62 = point20.dominates(point42);
        int int63 = point42.getX();
        int int64 = point42.getY();
        boolean boolean65 = point9.dominates(point42);
        int int66 = point9.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean16 = point9.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean20 = point9.dominates(point19);
        int int21 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int25 = point24.getX();
        int int26 = point24.getX();
        int int27 = point24.getX();
        int int28 = point24.getY();
        boolean boolean29 = point19.dominates(point24);
        int int30 = point24.getY();
        boolean boolean31 = point2.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int35 = point34.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point38.getX();
        boolean boolean44 = point34.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int48 = point47.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        int int56 = point51.getX();
        boolean boolean57 = point47.dominates(point51);
        int int58 = point51.getX();
        boolean boolean59 = point34.dominates(point51);
        int int60 = point34.getX();
        boolean boolean61 = point24.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int65 = point64.getX();
        int int66 = point64.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int70 = point69.getX();
        boolean boolean71 = point64.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) 'a');
        boolean boolean75 = point69.dominates(point74);
        int int76 = point74.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int80 = point79.getX();
        int int81 = point79.getY();
        int int82 = point79.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int86 = point85.getY();
        boolean boolean87 = point79.dominates(point85);
        int int88 = point85.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point91 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (byte) -1);
        int int92 = point91.getX();
        boolean boolean93 = point85.dominates(point91);
        boolean boolean94 = point74.dominates(point91);
        int int95 = point91.getY();
        boolean boolean96 = point24.dominates(point91);
        int int97 = point24.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 100 + "'", int88 == 100);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point22 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList28, pointArray27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm19.produceFinalSkyLine(pointList28, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm18.produceSubSkyLines(pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.produceSubSkyLines(pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm0.produceSubSkyLines(pointList39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(pointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertNotNull(pointList38);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        int int27 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean31 = point24.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean35 = point24.dominates(point34);
        boolean boolean36 = point5.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) (short) 10);
        int int40 = point39.getY();
        boolean boolean41 = point5.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int45 = point44.getX();
        int int46 = point44.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int50 = point49.getX();
        boolean boolean51 = point44.dominates(point49);
        boolean boolean52 = point5.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        int int61 = point58.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean65 = point58.dominates(point64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 10);
        boolean boolean69 = point58.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int73 = point72.getX();
        int int74 = point72.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int78 = point77.getX();
        boolean boolean79 = point72.dominates(point77);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) '#');
        int int83 = point82.getX();
        boolean boolean84 = point77.dominates(point82);
        boolean boolean85 = point68.dominates(point77);
        boolean boolean86 = point5.dominates(point77);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int22 = point21.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int26 = point25.getX();
        int int27 = point25.getX();
        int int28 = point25.getX();
        int int29 = point25.getY();
        int int30 = point25.getY();
        boolean boolean31 = point21.dominates(point25);
        boolean boolean32 = point5.dominates(point21);
        int int33 = point5.getY();
        int int34 = point5.getY();
        java.lang.Class<?> wildcardClass35 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, 97);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        int int7 = point6.getY();
        int int8 = point6.getY();
        boolean boolean9 = point2.dominates(point6);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 52);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 52);
        boolean boolean7 = point2.dominates(point6);
        int int8 = point6.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 1);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        boolean boolean17 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point9.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        int int29 = point27.getY();
        int int30 = point27.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean34 = point27.dominates(point33);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean38 = point27.dominates(point37);
        int int39 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int43 = point42.getX();
        int int44 = point42.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int48 = point47.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        int int56 = point51.getX();
        boolean boolean57 = point47.dominates(point51);
        int int58 = point47.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean65 = point61.dominates(point64);
        int int66 = point64.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean73 = point69.dominates(point72);
        boolean boolean74 = point64.dominates(point72);
        int int75 = point72.getX();
        int int76 = point72.getX();
        boolean boolean77 = point47.dominates(point72);
        int int78 = point47.getX();
        boolean boolean79 = point42.dominates(point47);
        boolean boolean80 = point37.dominates(point42);
        boolean boolean81 = point20.dominates(point37);
        java.lang.Class<?> wildcardClass82 = point37.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        int int15 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int19 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point22.getX();
        boolean boolean28 = point18.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int32 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point35.getX();
        boolean boolean41 = point31.dominates(point35);
        int int42 = point35.getX();
        boolean boolean43 = point18.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int47 = point46.getX();
        int int48 = point46.getY();
        boolean boolean49 = point18.dominates(point46);
        boolean boolean50 = point12.dominates(point46);
        boolean boolean51 = point6.dominates(point46);
        boolean boolean52 = point2.dominates(point6);
        int int53 = point6.getY();
        int int54 = point6.getY();
        int int55 = point6.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        int int20 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point26.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        boolean boolean36 = point26.dominates(point34);
        int int37 = point34.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int41 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point44.getX();
        boolean boolean50 = point40.dominates(point44);
        boolean boolean51 = point34.dominates(point40);
        int int52 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        int int61 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean65 = point58.dominates(point64);
        boolean boolean66 = point40.dominates(point58);
        boolean boolean67 = point16.dominates(point58);
        int int68 = point58.getX();
        boolean boolean69 = point2.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int73 = point72.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean77 = point72.dominates(point76);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        boolean boolean81 = point72.dominates(point80);
        boolean boolean82 = point2.dominates(point72);
        java.lang.Class<?> wildcardClass83 = point72.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int9 = point8.getY();
        boolean boolean10 = point2.dominates(point8);
        int int11 = point8.getX();
        int int12 = point8.getX();
        int int13 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        int int30 = point23.getX();
        boolean boolean31 = point16.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int38 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point41.getX();
        boolean boolean47 = point37.dominates(point41);
        int int48 = point41.getX();
        int int49 = point41.getY();
        int int50 = point41.getY();
        boolean boolean51 = point34.dominates(point41);
        boolean boolean52 = point16.dominates(point34);
        int int53 = point34.getX();
        boolean boolean54 = point8.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        int int62 = point60.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        boolean boolean70 = point60.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean77 = point73.dominates(point76);
        boolean boolean78 = point68.dominates(point76);
        int int79 = point76.getY();
        int int80 = point76.getX();
        int int81 = point76.getY();
        boolean boolean82 = point8.dominates(point76);
        int int83 = point8.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 52);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        int int18 = point15.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.lang.Class<?> wildcardClass47 = pointList40.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        boolean boolean17 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point9.dominates(point20);
        int int22 = point9.getX();
        int int23 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        int int35 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean39 = point32.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) '4');
        boolean boolean43 = point38.dominates(point42);
        boolean boolean44 = point26.dominates(point38);
        int int45 = point26.getX();
        int int46 = point26.getY();
        boolean boolean47 = point9.dominates(point26);
        java.lang.Class<?> wildcardClass48 = point26.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int21 = point20.getX();
        boolean boolean22 = point5.dominates(point20);
        int int23 = point5.getY();
        int int24 = point5.getY();
        java.lang.Class<?> wildcardClass25 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        boolean boolean42 = point32.dominates(point40);
        boolean boolean43 = point26.dominates(point40);
        boolean boolean44 = point21.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int48 = point47.getY();
        boolean boolean49 = point40.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        int int57 = point55.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean64 = point60.dominates(point63);
        boolean boolean65 = point55.dominates(point63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (-1));
        boolean boolean69 = point63.dominates(point68);
        boolean boolean70 = point47.dominates(point68);
        int int71 = point68.getX();
        java.lang.Class<?> wildcardClass72 = point68.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        int int14 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean18 = point11.dominates(point17);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean22 = point11.dominates(point21);
        int int23 = point11.getY();
        int int24 = point11.getX();
        boolean boolean25 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 100);
        boolean boolean29 = point5.dominates(point28);
        boolean boolean30 = point2.dominates(point28);
        int int31 = point28.getY();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList21 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList22 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm28.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point49 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList55, pointArray54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm57.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm46.produceFinalSkyLine(pointList55, pointList58);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm30.produceFinalSkyLine(pointList45, pointList58);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm28.produceSubSkyLines(pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm62.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean85 = point81.dominates(point84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point81 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList87, pointArray86);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm89.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm78.produceFinalSkyLine(pointList87, pointList90);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm62.produceFinalSkyLine(pointList77, pointList90);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.produceFinalSkyLine(pointList60, pointList96);
        java.lang.Class<?> wildcardClass98 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertNotNull(pointList21);
        org.junit.Assert.assertNotNull(pointList22);
        org.junit.Assert.assertNotNull(pointList23);
        org.junit.Assert.assertNotNull(pointList24);
        org.junit.Assert.assertNotNull(pointList25);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(pointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(pointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) -1);
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) (byte) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        int int8 = point5.getY();
        boolean boolean9 = point2.dominates(point5);
        int int10 = point5.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int6 = point5.getX();
        int int7 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int11 = point10.getX();
        boolean boolean12 = point5.dominates(point10);
        boolean boolean13 = point2.dominates(point5);
        int int14 = point2.getX();
        int int15 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        int int27 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean31 = point24.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean35 = point24.dominates(point34);
        int int36 = point24.getY();
        int int37 = point24.getX();
        boolean boolean38 = point18.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 100);
        boolean boolean42 = point18.dominates(point41);
        boolean boolean43 = point2.dominates(point41);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 100);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point38 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList44, pointArray43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm35.produceFinalSkyLine(pointList44, pointList47);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm34.produceSubSkyLines(pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm0.produceSubSkyLines(pointList49);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = null;
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point58 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList64, pointArray63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm66.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm55.produceFinalSkyLine(pointList64, pointList67);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm54.produceSubSkyLines(pointList64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean77 = point73.dominates(point76);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point73 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList79, pointArray78);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm81.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm70.produceFinalSkyLine(pointList79, pointList82);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm54.produceSubSkyLines(pointList83);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm54.getPoints();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm0.produceFinalSkyLine(pointList53, pointList89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.size()\" because \"left\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(pointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(pointArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertNotNull(pointList69);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(pointArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
        org.junit.Assert.assertNotNull(pointList87);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) 100);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int10 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        int int18 = point13.getX();
        boolean boolean19 = point9.dominates(point13);
        int int20 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point26.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        boolean boolean36 = point26.dominates(point34);
        int int37 = point34.getX();
        int int38 = point34.getX();
        boolean boolean39 = point9.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point45.getY();
        int int48 = point45.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean52 = point45.dominates(point51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        int int61 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean65 = point58.dominates(point64);
        boolean boolean66 = point45.dominates(point58);
        boolean boolean67 = point9.dominates(point45);
        boolean boolean68 = point6.dominates(point9);
        int int69 = point9.getX();
        int int70 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int74 = point73.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int78 = point77.getY();
        boolean boolean79 = point73.dominates(point77);
        boolean boolean80 = point9.dominates(point77);
        boolean boolean81 = point2.dominates(point9);
        int int82 = point9.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 32 + "'", int78 == 32);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 52 + "'", int82 == 52);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        int int8 = point5.getY();
        boolean boolean9 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int16 = point15.getX();
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int21 = point20.getX();
        boolean boolean22 = point15.dominates(point20);
        boolean boolean23 = point12.dominates(point15);
        boolean boolean24 = point5.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 97);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int31 = point30.getY();
        boolean boolean32 = point27.dominates(point30);
        int int33 = point27.getX();
        boolean boolean34 = point15.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = point15.dominates(point35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point33.dominates(point46);
        boolean boolean55 = point19.dominates(point46);
        int int56 = point46.getY();
        int int57 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int61 = point60.getX();
        int int62 = point60.getY();
        int int63 = point60.getY();
        boolean boolean64 = point46.dominates(point60);
        int int65 = point60.getX();
        int int66 = point60.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 1);
        boolean boolean17 = point2.dominates(point16);
        int int18 = point2.getY();
        int int19 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        int int28 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int32 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point35.getX();
        boolean boolean41 = point31.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int45 = point44.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point48.getX();
        boolean boolean54 = point44.dominates(point48);
        int int55 = point48.getX();
        boolean boolean56 = point31.dominates(point48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int60 = point59.getX();
        int int61 = point59.getY();
        boolean boolean62 = point31.dominates(point59);
        boolean boolean63 = point25.dominates(point59);
        int int64 = point59.getX();
        int int65 = point59.getY();
        boolean boolean66 = point2.dominates(point59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int70 = point69.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean74 = point69.dominates(point73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        boolean boolean78 = point69.dominates(point77);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean85 = point81.dominates(point84);
        int int86 = point84.getY();
        int int87 = point84.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean91 = point84.dominates(point90);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point94 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean95 = point84.dominates(point94);
        int int96 = point94.getX();
        boolean boolean97 = point69.dominates(point94);
        boolean boolean98 = point59.dominates(point69);
        int int99 = point59.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point22 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList28, pointArray27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm19.produceFinalSkyLine(pointList28, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm18.produceSubSkyLines(pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm18.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm18.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm18.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm18.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = skylineAlgorithm18.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList39 = skylineAlgorithm18.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm18.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm18.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm18.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm18.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm18.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm47.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point52 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList58, pointArray57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm60.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm49.produceFinalSkyLine(pointList58, pointList61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point66 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList72, pointArray71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm74.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm63.produceFinalSkyLine(pointList72, pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm47.produceFinalSkyLine(pointList62, pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm45.produceSubSkyLines(pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm45.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean88 = point84.dominates(point87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point84 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList90, pointArray89);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm92 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm92.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm81.produceFinalSkyLine(pointList90, pointList93);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm45.produceSubSkyLines(pointList94);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.produceFinalSkyLine(pointList44, pointList94);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(pointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertNotNull(pointList38);
        org.junit.Assert.assertNotNull(pointList39);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(pointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(pointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(pointArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        boolean boolean17 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int21 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean25 = point20.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point31.getY();
        int int34 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean38 = point31.dominates(point37);
        boolean boolean39 = point20.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int43 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean47 = point42.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        int int55 = point53.getY();
        int int56 = point53.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean60 = point53.dominates(point59);
        boolean boolean61 = point42.dominates(point53);
        boolean boolean62 = point20.dominates(point42);
        int int63 = point42.getX();
        int int64 = point42.getY();
        boolean boolean65 = point9.dominates(point42);
        int int66 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, 32);
        int int70 = point69.getX();
        boolean boolean71 = point42.dominates(point69);
        int int72 = point69.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm31.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point36 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList42, pointArray41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm44.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm33.produceFinalSkyLine(pointList42, pointList45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm31.produceFinalSkyLine(pointList46, pointList59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point66 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList72, pointArray71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm74.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm63.produceFinalSkyLine(pointList72, pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm62.produceSubSkyLines(pointList72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean85 = point81.dominates(point84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point81 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList87, pointArray86);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm89.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm78.produceFinalSkyLine(pointList87, pointList90);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm62.produceSubSkyLines(pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm31.produceSubSkyLines(pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm0.produceSubSkyLines(pointList93);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList99 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(pointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(pointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(pointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
        org.junit.Assert.assertNotNull(pointList99);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) (byte) -1);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        int int28 = point2.getY();
        int int29 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 32);
        int int33 = point32.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        int int41 = point39.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        boolean boolean49 = point39.dominates(point47);
        int int50 = point39.getX();
        int int51 = point39.getY();
        boolean boolean52 = point32.dominates(point39);
        int int53 = point32.getY();
        boolean boolean54 = point2.dominates(point32);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 32 + "'", int53 == 32);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point5.getX();
        int int17 = point5.getY();
        int int18 = point5.getX();
        int int19 = point5.getY();
        int int20 = point5.getX();
        java.lang.Class<?> wildcardClass21 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 1);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (-1));
        boolean boolean10 = point2.dominates(point9);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point2.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int25 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean29 = point24.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        int int38 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean42 = point35.dominates(point41);
        boolean boolean43 = point24.dominates(point35);
        boolean boolean44 = point2.dominates(point24);
        int int45 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) 'a');
        boolean boolean49 = point24.dominates(point48);
        int int50 = point48.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.produceSubSkyLines(pointList41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm0.produceFinalSkyLine(pointList41, pointList50);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass60 = pointList59.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertNotNull(pointList54);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 10);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point8.getX();
        int int20 = point8.getY();
        boolean boolean21 = point2.dominates(point8);
        int int22 = point2.getY();
        int int23 = point2.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int3 = point2.getX();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, 35);
        int int3 = point2.getX();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int3 = point2.getY();
        int int4 = point2.getX();
        int int5 = point2.getX();
        int int6 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point18.getY();
        int int21 = point18.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean25 = point18.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean29 = point18.dominates(point28);
        int int30 = point18.getY();
        int int31 = point18.getX();
        boolean boolean32 = point12.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 100);
        boolean boolean36 = point12.dominates(point35);
        boolean boolean37 = point9.dominates(point35);
        boolean boolean38 = point2.dominates(point9);
        java.lang.Class<?> wildcardClass39 = point9.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList29);
        java.lang.Class<?> wildcardClass31 = pointList29.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int25 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point28.getX();
        boolean boolean34 = point24.dominates(point28);
        int int35 = point28.getX();
        boolean boolean36 = point11.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int40 = point39.getX();
        int int41 = point39.getY();
        boolean boolean42 = point11.dominates(point39);
        boolean boolean43 = point5.dominates(point39);
        int int44 = point5.getY();
        int int45 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int49 = point48.getX();
        boolean boolean50 = point5.dominates(point48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 32);
        boolean boolean54 = point5.dominates(point53);
        int int55 = point53.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point8.getX();
        boolean boolean14 = point5.dominates(point8);
        int int15 = point5.getX();
        boolean boolean16 = point2.dominates(point5);
        int int17 = point5.getY();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) 'a');
        int int3 = point2.getY();
        int int4 = point2.getX();
        int int5 = point2.getY();
        int int6 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) -1);
        boolean boolean13 = point9.dominates(point12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int17 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int21 = point20.getY();
        boolean boolean22 = point16.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        boolean boolean38 = point28.dominates(point36);
        int int39 = point36.getY();
        int int40 = point36.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int44 = point43.getX();
        int int45 = point43.getX();
        int int46 = point43.getX();
        int int47 = point43.getX();
        int int48 = point43.getY();
        boolean boolean49 = point36.dominates(point43);
        boolean boolean50 = point16.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean57 = point53.dominates(point56);
        int int58 = point56.getY();
        boolean boolean59 = point16.dominates(point56);
        int int60 = point16.getY();
        boolean boolean61 = point9.dominates(point16);
        boolean boolean62 = point2.dominates(point9);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        int int21 = point18.getX();
        int int22 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        boolean boolean38 = point28.dominates(point36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int42 = point41.getY();
        boolean boolean43 = point28.dominates(point41);
        boolean boolean44 = point18.dominates(point28);
        int int45 = point18.getY();
        int int46 = point18.getY();
        int int47 = point18.getY();
        boolean boolean48 = point2.dominates(point18);
        java.lang.Class<?> wildcardClass49 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        int int27 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean31 = point24.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean35 = point24.dominates(point34);
        boolean boolean36 = point5.dominates(point24);
        int int37 = point24.getX();
        int int38 = point24.getY();
        int int39 = point24.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        boolean boolean17 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int24 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point27.getX();
        boolean boolean33 = point23.dominates(point27);
        int int34 = point27.getX();
        int int35 = point27.getY();
        int int36 = point27.getY();
        boolean boolean37 = point20.dominates(point27);
        boolean boolean38 = point2.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point44.getY();
        int int47 = point44.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean51 = point44.dominates(point50);
        int int52 = point44.getY();
        boolean boolean53 = point2.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int57 = point56.getX();
        boolean boolean58 = point2.dominates(point56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = point56.dominates(point59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        int int13 = point9.getY();
        boolean boolean14 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 0);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        int int29 = point27.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        boolean boolean37 = point27.dominates(point35);
        int int38 = point27.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int42 = point41.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        int int50 = point45.getX();
        boolean boolean51 = point41.dominates(point45);
        int int52 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        boolean boolean68 = point58.dominates(point66);
        int int69 = point66.getX();
        int int70 = point66.getX();
        boolean boolean71 = point41.dominates(point66);
        int int72 = point66.getY();
        boolean boolean73 = point27.dominates(point66);
        int int74 = point66.getY();
        boolean boolean75 = point17.dominates(point66);
        int int76 = point66.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) 'a');
        boolean boolean83 = point79.dominates(point82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) '4');
        boolean boolean87 = point82.dominates(point86);
        boolean boolean88 = point66.dominates(point82);
        boolean boolean89 = point2.dominates(point82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point92 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        int int93 = point92.getY();
        boolean boolean94 = point82.dominates(point92);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point95 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = point82.dominates(point95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) '4');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        boolean boolean21 = point11.dominates(point19);
        boolean boolean22 = point5.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int26 = point25.getX();
        int int27 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getX();
        boolean boolean37 = point25.dominates(point33);
        boolean boolean38 = point19.dominates(point33);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int42 = point41.getX();
        boolean boolean43 = point33.dominates(point41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        boolean boolean47 = point41.dominates(point46);
        boolean boolean48 = point2.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int52 = point51.getX();
        int int53 = point51.getX();
        int int54 = point51.getX();
        int int55 = point51.getY();
        int int56 = point51.getY();
        int int57 = point51.getY();
        int int58 = point51.getY();
        int int59 = point51.getY();
        int int60 = point51.getX();
        boolean boolean61 = point2.dominates(point51);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        boolean boolean21 = point2.dominates(point18);
        int int22 = point2.getX();
        int int23 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 1);
        int int36 = point35.getY();
        boolean boolean37 = point2.dominates(point35);
        int int38 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) (byte) 0);
        boolean boolean42 = point35.dominates(point41);
        int int43 = point41.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        int int20 = point2.getY();
        int int21 = point2.getY();
        int int22 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int26 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point29.getX();
        boolean boolean35 = point25.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int39 = point38.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point42.getX();
        boolean boolean48 = point38.dominates(point42);
        int int49 = point42.getX();
        boolean boolean50 = point25.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        int int58 = point56.getY();
        int int59 = point56.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean63 = point56.dominates(point62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        int int71 = point69.getY();
        int int72 = point69.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean76 = point69.dominates(point75);
        boolean boolean77 = point56.dominates(point69);
        boolean boolean78 = point42.dominates(point69);
        int int79 = point69.getY();
        int int80 = point69.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int84 = point83.getX();
        int int85 = point83.getY();
        int int86 = point83.getY();
        boolean boolean87 = point69.dominates(point83);
        int int88 = point83.getX();
        boolean boolean89 = point2.dominates(point83);
        int int90 = point83.getX();
        int int91 = point83.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 52 + "'", int85 == 52);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 52 + "'", int86 == 52);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 52 + "'", int91 == 52);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 32);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int6 = point5.getX();
        int int7 = point5.getY();
        int int8 = point5.getX();
        int int9 = point5.getX();
        boolean boolean10 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) 'a');
        int int14 = point13.getY();
        boolean boolean15 = point2.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 1);
        int int19 = point18.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        int int28 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean32 = point25.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean36 = point25.dominates(point35);
        int int37 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        boolean boolean45 = point25.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int49 = point48.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        int int57 = point52.getX();
        boolean boolean58 = point48.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int62 = point61.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        int int70 = point65.getX();
        boolean boolean71 = point61.dominates(point65);
        int int72 = point65.getX();
        boolean boolean73 = point48.dominates(point65);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int77 = point76.getX();
        int int78 = point76.getY();
        boolean boolean79 = point48.dominates(point76);
        boolean boolean80 = point25.dominates(point48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (int) 'a');
        boolean boolean84 = point25.dominates(point83);
        boolean boolean85 = point18.dominates(point25);
        int int86 = point18.getY();
        boolean boolean87 = point2.dominates(point18);
        java.lang.Class<?> wildcardClass88 = point18.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) -1);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        boolean boolean23 = point6.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int27 = point26.getX();
        int int28 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point34.getY();
        int int37 = point34.getX();
        boolean boolean38 = point26.dominates(point34);
        boolean boolean39 = point20.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int43 = point42.getX();
        boolean boolean44 = point34.dominates(point42);
        boolean boolean45 = point2.dominates(point34);
        int int46 = point2.getY();
        java.lang.Class<?> wildcardClass47 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point24 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList30, pointArray29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm21.produceFinalSkyLine(pointList30, pointList33);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm20.produceSubSkyLines(pointList30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point39 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList45, pointArray44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm36.produceFinalSkyLine(pointList45, pointList48);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm20.produceSubSkyLines(pointList49);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm0.produceSubSkyLines(pointList50);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(pointArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(pointArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 10);
        boolean boolean16 = point5.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int20 = point19.getX();
        int int21 = point19.getX();
        int int22 = point19.getY();
        int int23 = point19.getY();
        boolean boolean24 = point15.dominates(point19);
        java.lang.Class<?> wildcardClass25 = point15.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm16.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm16.produceFinalSkyLine(pointList31, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.produceSubSkyLines(pointList46);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass52 = pointList51.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList2 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList3 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList4 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point8 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList14, pointArray13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm16.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm5.produceFinalSkyLine(pointList14, pointList17);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point22 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList28, pointArray27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm19.produceFinalSkyLine(pointList28, pointList31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point36 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList42, pointArray41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm44.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm33.produceFinalSkyLine(pointList42, pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm5.produceFinalSkyLine(pointList32, pointList42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm5.produceSubSkyLines(pointList57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point66 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList72, pointArray71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm74.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm63.produceFinalSkyLine(pointList72, pointList75);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean85 = point81.dominates(point84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point81 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList87, pointArray86);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm89.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm78.produceFinalSkyLine(pointList87, pointList90);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm77.produceSubSkyLines(pointList87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm93 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm93.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm63.produceFinalSkyLine(pointList92, pointList94);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm5.produceSubSkyLines(pointList95);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.produceSubSkyLines(pointList95);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(pointList2);
        org.junit.Assert.assertNotNull(pointList3);
        org.junit.Assert.assertNotNull(pointList4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(pointArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(pointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(pointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(pointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(pointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        int int22 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean26 = point19.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean30 = point19.dominates(point29);
        int int31 = point19.getY();
        int int32 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean49 = point38.dominates(point48);
        boolean boolean50 = point19.dominates(point38);
        boolean boolean51 = point2.dominates(point38);
        int int52 = point38.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) 'a');
        int int3 = point2.getY();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 32);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) 'a');
        boolean boolean11 = point7.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int15 = point14.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        int int23 = point21.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        boolean boolean31 = point21.dominates(point29);
        int int32 = point21.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int36 = point35.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point39.getX();
        boolean boolean45 = point35.dominates(point39);
        int int46 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        int int54 = point52.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        boolean boolean62 = point52.dominates(point60);
        int int63 = point60.getX();
        int int64 = point60.getX();
        boolean boolean65 = point35.dominates(point60);
        int int66 = point60.getY();
        boolean boolean67 = point21.dominates(point60);
        boolean boolean68 = point14.dominates(point60);
        int int69 = point60.getX();
        int int70 = point60.getX();
        boolean boolean71 = point7.dominates(point60);
        boolean boolean72 = point2.dominates(point7);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) 1);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = null;
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point22 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList28, pointArray27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm19.produceFinalSkyLine(pointList28, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm18.produceSubSkyLines(pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm18.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm18.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm18.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point40 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList46, pointArray45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm48.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm37.produceFinalSkyLine(pointList46, pointList49);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm37.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm37.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm37.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean63 = point59.dominates(point62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point59 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList65, pointArray64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm67.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm56.produceFinalSkyLine(pointList65, pointList68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean77 = point73.dominates(point76);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point73 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList79, pointArray78);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm81.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm70.produceFinalSkyLine(pointList79, pointList82);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm54.produceFinalSkyLine(pointList69, pointList82);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm37.produceSubSkyLines(pointList84);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm18.produceSubSkyLines(pointList85);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm0.produceFinalSkyLine(pointList17, pointList85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.size()\" because \"left\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(pointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(pointArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(pointArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertNotNull(pointList69);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(pointArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean16 = point9.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean20 = point9.dominates(point19);
        int int21 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int25 = point24.getX();
        int int26 = point24.getX();
        int int27 = point24.getX();
        int int28 = point24.getY();
        boolean boolean29 = point19.dominates(point24);
        int int30 = point24.getY();
        boolean boolean31 = point2.dominates(point24);
        int int32 = point24.getY();
        int int33 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int37 = point36.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean41 = point36.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point47.getY();
        int int50 = point47.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean54 = point47.dominates(point53);
        boolean boolean55 = point36.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int59 = point58.getX();
        int int60 = point58.getX();
        int int61 = point58.getY();
        boolean boolean62 = point36.dominates(point58);
        int int63 = point36.getX();
        boolean boolean64 = point24.dominates(point36);
        int int65 = point36.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList2 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList4 = skylineAlgorithm3.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point8 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList14, pointArray13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm16.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm5.produceFinalSkyLine(pointList14, pointList17);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point22 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList28, pointArray27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm19.produceFinalSkyLine(pointList28, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm3.produceFinalSkyLine(pointList18, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm3.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm35.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point40 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList46, pointArray45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm48.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm37.produceFinalSkyLine(pointList46, pointList49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point54 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList60, pointArray59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm51.produceFinalSkyLine(pointList60, pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm35.produceFinalSkyLine(pointList50, pointList63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean74 = point70.dominates(point73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point70 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList76, pointArray75);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm78.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm67.produceFinalSkyLine(pointList76, pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm66.produceSubSkyLines(pointList76);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point88 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean89 = point85.dominates(point88);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point85 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList91, pointArray90);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm93 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm93.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm82.produceFinalSkyLine(pointList91, pointList94);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm66.produceSubSkyLines(pointList95);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm35.produceSubSkyLines(pointList95);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm3.produceSubSkyLines(pointList95);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList99 = skylineAlgorithm0.produceSubSkyLines(pointList98);
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(pointList2);
        org.junit.Assert.assertNotNull(pointList4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(pointArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(pointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(pointArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(pointArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(pointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(pointArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
        org.junit.Assert.assertNotNull(pointList99);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) 'a');
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        int int24 = point13.getX();
        int int25 = point13.getY();
        int int26 = point13.getX();
        int int27 = point13.getY();
        int int28 = point13.getX();
        int int29 = point13.getY();
        int int30 = point13.getY();
        int int31 = point13.getX();
        boolean boolean32 = point5.dominates(point13);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 100);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 35);
        int int27 = point26.getY();
        boolean boolean28 = point13.dominates(point26);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int3 = point2.getY();
        int int4 = point2.getX();
        int int5 = point2.getX();
        int int6 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) (byte) -1);
        boolean boolean10 = point2.dominates(point9);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 0);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 10);
        int int3 = point2.getY();
        int int4 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int6 = point5.getX();
        int int7 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int11 = point10.getX();
        boolean boolean12 = point5.dominates(point10);
        boolean boolean13 = point2.dominates(point5);
        int int14 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 1);
        boolean boolean18 = point2.dominates(point17);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 32);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point2.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int25 = point24.getX();
        int int26 = point24.getX();
        int int27 = point24.getY();
        boolean boolean28 = point2.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 0);
        boolean boolean32 = point2.dominates(point31);
        java.lang.Class<?> wildcardClass33 = point31.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point5.getX();
        int int11 = point5.getY();
        int int12 = point5.getX();
        int int13 = point5.getX();
        int int14 = point5.getX();
        boolean boolean15 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int19 = point18.getX();
        int int20 = point18.getY();
        int int21 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int25 = point24.getY();
        boolean boolean26 = point18.dominates(point24);
        int int27 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point33.dominates(point46);
        boolean boolean55 = point24.dominates(point46);
        int int56 = point24.getY();
        boolean boolean57 = point5.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        int int68 = point63.getX();
        boolean boolean69 = point60.dominates(point63);
        int int70 = point63.getY();
        boolean boolean71 = point5.dominates(point63);
        int int72 = point63.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) 0);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        int int20 = point16.getX();
        int int21 = point16.getY();
        boolean boolean22 = point2.dominates(point16);
        int int23 = point16.getY();
        java.lang.Class<?> wildcardClass24 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getY();
        int int6 = point2.getX();
        int int7 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int14 = point13.getX();
        int int15 = point13.getY();
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int20 = point19.getY();
        boolean boolean21 = point13.dominates(point19);
        int int22 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        int int31 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean35 = point28.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point41.getY();
        int int44 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean48 = point41.dominates(point47);
        boolean boolean49 = point28.dominates(point41);
        boolean boolean50 = point19.dominates(point41);
        int int51 = point19.getY();
        int int52 = point19.getX();
        boolean boolean53 = point10.dominates(point19);
        boolean boolean54 = point2.dominates(point10);
        int int55 = point2.getX();
        java.lang.Class<?> wildcardClass56 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        boolean boolean21 = point11.dominates(point19);
        int int22 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int26 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point29.getX();
        boolean boolean35 = point25.dominates(point29);
        boolean boolean36 = point19.dominates(point25);
        boolean boolean37 = point5.dominates(point19);
        int int38 = point19.getX();
        int int39 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int43 = point42.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        int int51 = point46.getX();
        boolean boolean52 = point42.dominates(point46);
        int int53 = point46.getX();
        boolean boolean54 = point19.dominates(point46);
        boolean boolean55 = point2.dominates(point19);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean23 = point16.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean27 = point16.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) '4');
        boolean boolean31 = point16.dominates(point30);
        int int32 = point16.getY();
        int int33 = point16.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        boolean boolean21 = point11.dominates(point19);
        int int22 = point11.getX();
        int int23 = point11.getY();
        boolean boolean24 = point5.dominates(point11);
        boolean boolean25 = point2.dominates(point11);
        java.lang.Class<?> wildcardClass26 = point11.getClass();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 35);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (short) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        int int15 = point9.getY();
        int int16 = point9.getX();
        int int17 = point9.getX();
        boolean boolean18 = point6.dominates(point9);
        int int19 = point6.getY();
        boolean boolean20 = point2.dominates(point6);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        boolean boolean17 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int24 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point27.getX();
        boolean boolean33 = point23.dominates(point27);
        int int34 = point27.getX();
        int int35 = point27.getY();
        int int36 = point27.getY();
        boolean boolean37 = point20.dominates(point27);
        boolean boolean38 = point2.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point44.getY();
        int int47 = point44.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean51 = point44.dominates(point50);
        int int52 = point44.getY();
        boolean boolean53 = point2.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int57 = point56.getX();
        boolean boolean58 = point2.dominates(point56);
        java.lang.Class<?> wildcardClass59 = point56.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point2.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int25 = point24.getX();
        int int26 = point24.getX();
        int int27 = point24.getY();
        boolean boolean28 = point2.dominates(point24);
        java.lang.Class<?> wildcardClass29 = point24.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 32);
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int19 = point18.getY();
        boolean boolean20 = point14.dominates(point18);
        int int21 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 35);
        boolean boolean25 = point18.dominates(point24);
        boolean boolean26 = point2.dominates(point18);
        int int27 = point18.getY();
        java.lang.Class<?> wildcardClass28 = point18.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, 32);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        boolean boolean23 = point10.dominates(point20);
        int int24 = point20.getY();
        int int25 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int29 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean33 = point28.dominates(point32);
        boolean boolean34 = point20.dominates(point32);
        int int35 = point32.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean83 = point79.dominates(point82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point79 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList85, pointArray84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm87.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm76.produceFinalSkyLine(pointList85, pointList88);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm48.produceFinalSkyLine(pointList75, pointList85);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm0.produceSubSkyLines(pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList99 = skylineAlgorithm0.produceSubSkyLines(pointList98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(pointArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int7 = point6.getX();
        int int8 = point6.getX();
        int int9 = point6.getX();
        int int10 = point6.getY();
        int int11 = point6.getY();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getY();
        int int14 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 0);
        boolean boolean18 = point6.dominates(point17);
        java.lang.Class<?> wildcardClass19 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int6 = point5.getX();
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean11 = point5.dominates(point10);
        boolean boolean12 = point2.dominates(point10);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        int int22 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean26 = point19.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int30 = point29.getY();
        boolean boolean31 = point25.dominates(point29);
        int int32 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int36 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point42.getY();
        int int45 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean49 = point42.dominates(point48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean53 = point42.dominates(point52);
        int int54 = point52.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int58 = point57.getX();
        int int59 = point57.getX();
        int int60 = point57.getX();
        int int61 = point57.getY();
        boolean boolean62 = point52.dominates(point57);
        int int63 = point57.getY();
        boolean boolean64 = point35.dominates(point57);
        int int65 = point57.getY();
        boolean boolean66 = point29.dominates(point57);
        boolean boolean67 = point2.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (byte) 10);
        boolean boolean71 = point2.dominates(point70);
        int int72 = point70.getY();
        java.lang.Class<?> wildcardClass73 = point70.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) -1);
        boolean boolean18 = point2.dominates(point17);
        int int19 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int9 = point8.getY();
        boolean boolean10 = point2.dominates(point8);
        int int11 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        int int19 = point17.getY();
        int int20 = point17.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean24 = point17.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        int int33 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean37 = point30.dominates(point36);
        boolean boolean38 = point17.dominates(point30);
        boolean boolean39 = point8.dominates(point30);
        int int40 = point30.getX();
        int int41 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 35);
        int int45 = point44.getY();
        boolean boolean46 = point30.dominates(point44);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        int int28 = point2.getY();
        int int29 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int33 = point32.getX();
        int int34 = point32.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int38 = point37.getX();
        boolean boolean39 = point32.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) 'a');
        boolean boolean43 = point37.dominates(point42);
        int int44 = point42.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int48 = point47.getX();
        int int49 = point47.getY();
        int int50 = point47.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int54 = point53.getY();
        boolean boolean55 = point47.dominates(point53);
        int int56 = point53.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (byte) -1);
        int int60 = point59.getX();
        boolean boolean61 = point53.dominates(point59);
        boolean boolean62 = point42.dominates(point59);
        int int63 = point59.getY();
        int int64 = point59.getY();
        int int65 = point59.getY();
        boolean boolean66 = point2.dominates(point59);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean58 = point51.dominates(point57);
        boolean boolean59 = point38.dominates(point51);
        boolean boolean60 = point2.dominates(point38);
        int int61 = point38.getX();
        int int62 = point38.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        int int27 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean31 = point24.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean35 = point24.dominates(point34);
        boolean boolean36 = point5.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) (short) 10);
        int int40 = point39.getY();
        boolean boolean41 = point5.dominates(point39);
        int int42 = point39.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) (short) 100);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point32 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList38, pointArray37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm40.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm29.produceFinalSkyLine(pointList38, pointList41);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm28.produceSubSkyLines(pointList38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point47 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList53, pointArray52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm55.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm44.produceFinalSkyLine(pointList53, pointList56);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm28.produceSubSkyLines(pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.produceFinalSkyLine(pointList23, pointList57);
        java.lang.Class<?> wildcardClass60 = pointList59.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(pointArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(pointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (byte) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        int int7 = point5.getY();
        int int8 = point5.getY();
        int int9 = point5.getX();
        boolean boolean10 = point2.dominates(point5);
        int int11 = point2.getY();
        int int12 = point2.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        boolean boolean17 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point9.dominates(point20);
        int int22 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 0);
        int int26 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        boolean boolean42 = point32.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int46 = point45.getY();
        boolean boolean47 = point32.dominates(point45);
        int int48 = point45.getX();
        boolean boolean49 = point25.dominates(point45);
        boolean boolean50 = point20.dominates(point25);
        java.lang.Class<?> wildcardClass51 = point20.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point49 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList55, pointArray54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm57.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm46.produceFinalSkyLine(pointList55, pointList58);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm46.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm63.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point68 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList74, pointArray73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm76.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm65.produceFinalSkyLine(pointList74, pointList77);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point82 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList88, pointArray87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm90.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm79.produceFinalSkyLine(pointList88, pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm63.produceFinalSkyLine(pointList78, pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm46.produceSubSkyLines(pointList93);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.produceSubSkyLines(pointList94);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList99 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(pointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(pointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(pointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
        org.junit.Assert.assertNotNull(pointList99);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        int int23 = point20.getY();
        boolean boolean24 = point6.dominates(point20);
        int int25 = point6.getY();
        boolean boolean26 = point2.dominates(point6);
        int int27 = point2.getY();
        int int28 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int32 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point35.getX();
        boolean boolean41 = point31.dominates(point35);
        int int42 = point35.getY();
        boolean boolean43 = point2.dominates(point35);
        int int44 = point2.getX();
        java.lang.Class<?> wildcardClass45 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 97 + "'", int44 == 97);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean65 = point61.dominates(point64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point61 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList67, pointArray66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = skylineAlgorithm69.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = skylineAlgorithm58.produceFinalSkyLine(pointList67, pointList70);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = skylineAlgorithm57.produceSubSkyLines(pointList67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm43.produceFinalSkyLine(pointList72, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm0.produceSubSkyLines(pointList72);
        java.lang.Class<?> wildcardClass77 = pointList72.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(pointArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(pointList70);
        org.junit.Assert.assertNotNull(pointList71);
        org.junit.Assert.assertNotNull(pointList72);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean17 = point10.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean21 = point10.dominates(point20);
        int int22 = point20.getY();
        int int23 = point20.getX();
        int int24 = point20.getX();
        boolean boolean25 = point2.dominates(point20);
        int int26 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 32 + "'", int22 == 32);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int9 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point12.getX();
        boolean boolean18 = point8.dominates(point12);
        int int19 = point12.getX();
        boolean boolean20 = point5.dominates(point12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int27 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point30.getX();
        boolean boolean36 = point26.dominates(point30);
        int int37 = point30.getX();
        int int38 = point30.getY();
        int int39 = point30.getY();
        boolean boolean40 = point23.dominates(point30);
        boolean boolean41 = point5.dominates(point23);
        int int42 = point23.getX();
        boolean boolean43 = point2.dominates(point23);
        java.lang.Class<?> wildcardClass44 = point23.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int9 = point8.getX();
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean14 = point8.dominates(point13);
        int int15 = point8.getX();
        boolean boolean16 = point2.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        int int28 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean32 = point25.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean36 = point25.dominates(point35);
        int int37 = point25.getY();
        int int38 = point25.getX();
        boolean boolean39 = point19.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 100);
        boolean boolean43 = point19.dominates(point42);
        int int44 = point42.getX();
        boolean boolean45 = point2.dominates(point42);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.produceSubSkyLines(pointList41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm0.produceFinalSkyLine(pointList41, pointList50);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertNotNull(pointList54);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 97);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 10);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int8 = point7.getX();
        int int9 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int13 = point12.getX();
        int int14 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        int int23 = point20.getX();
        boolean boolean24 = point12.dominates(point20);
        int int25 = point12.getX();
        int int26 = point12.getX();
        boolean boolean27 = point7.dominates(point12);
        int int28 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int32 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int36 = point35.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point39.getX();
        boolean boolean45 = point35.dominates(point39);
        int int46 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        int int54 = point52.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        boolean boolean62 = point52.dominates(point60);
        int int63 = point60.getX();
        int int64 = point60.getX();
        boolean boolean65 = point35.dominates(point60);
        boolean boolean66 = point31.dominates(point35);
        boolean boolean67 = point12.dominates(point35);
        int int68 = point35.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        boolean boolean72 = point35.dominates(point71);
        boolean boolean73 = point2.dominates(point71);
        int int74 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int21 = point20.getX();
        boolean boolean22 = point5.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        boolean boolean41 = point31.dominates(point39);
        boolean boolean42 = point25.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int46 = point45.getX();
        int int47 = point45.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        int int55 = point53.getY();
        int int56 = point53.getX();
        boolean boolean57 = point45.dominates(point53);
        boolean boolean58 = point39.dominates(point53);
        int int59 = point39.getY();
        int int60 = point39.getY();
        boolean boolean61 = point20.dominates(point39);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean58 = point51.dominates(point57);
        boolean boolean59 = point38.dominates(point51);
        boolean boolean60 = point2.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        int int68 = point66.getY();
        int int69 = point66.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean73 = point66.dominates(point72);
        int int74 = point66.getY();
        boolean boolean75 = point2.dominates(point66);
        int int76 = point66.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        int int17 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        boolean boolean33 = point23.dominates(point31);
        int int34 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int38 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point41.getX();
        boolean boolean47 = point37.dominates(point41);
        boolean boolean48 = point31.dominates(point37);
        int int49 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        int int57 = point55.getY();
        int int58 = point55.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean62 = point55.dominates(point61);
        boolean boolean63 = point37.dominates(point55);
        boolean boolean64 = point13.dominates(point55);
        int int65 = point55.getX();
        int int66 = point55.getX();
        java.lang.Class<?> wildcardClass67 = point55.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }
}


package SkylineAlgorithm;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test2501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2501");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean15 = point8.dominates(point14);
        boolean boolean16 = point2.dominates(point14);
        int int17 = point14.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point26.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        boolean boolean36 = point26.dominates(point34);
        int int37 = point34.getY();
        boolean boolean38 = point20.dominates(point34);
        int int39 = point20.getY();
        boolean boolean40 = point14.dominates(point20);
        int int41 = point14.getX();
        int int42 = point14.getY();
        int int43 = point14.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test2502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2502");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) '4');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int6 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        int int23 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int27 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point30.getX();
        boolean boolean36 = point26.dominates(point30);
        boolean boolean37 = point20.dominates(point26);
        int int38 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point44.getY();
        int int47 = point44.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean51 = point44.dominates(point50);
        boolean boolean52 = point26.dominates(point44);
        int int53 = point26.getX();
        boolean boolean54 = point5.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean64 = point60.dominates(point63);
        int int65 = point63.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        boolean boolean73 = point63.dominates(point71);
        int int74 = point71.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int78 = point77.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean85 = point81.dominates(point84);
        int int86 = point81.getX();
        boolean boolean87 = point77.dominates(point81);
        boolean boolean88 = point71.dominates(point77);
        boolean boolean89 = point57.dominates(point71);
        int int90 = point71.getX();
        boolean boolean91 = point5.dominates(point71);
        int int92 = point71.getY();
        int int93 = point71.getX();
        boolean boolean94 = point2.dominates(point71);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test2503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2503");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList3 = skylineAlgorithm2.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point7 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList13, pointArray12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm15.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm4.produceFinalSkyLine(pointList13, pointList16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm2.produceFinalSkyLine(pointList17, pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.produceSubSkyLines(pointList32);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point41 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList47, pointArray46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm49.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm38.produceFinalSkyLine(pointList47, pointList50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point55 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList61, pointArray60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm63.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm52.produceFinalSkyLine(pointList61, pointList64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean73 = point69.dominates(point72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point69 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList75, pointArray74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm77.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm66.produceFinalSkyLine(pointList75, pointList78);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm38.produceFinalSkyLine(pointList65, pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.produceSubSkyLines(pointList65);
        java.lang.Class<?> wildcardClass82 = pointList81.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(pointList3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(pointArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(pointArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(pointArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(pointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2504");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point49 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList55, pointArray54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm57.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm46.produceFinalSkyLine(pointList55, pointList58);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm46.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean74 = point70.dominates(point73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point70 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList76, pointArray75);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm78.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm67.produceFinalSkyLine(pointList76, pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm46.produceSubSkyLines(pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.produceSubSkyLines(pointList81);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(pointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(pointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
        org.junit.Assert.assertNotNull(pointList87);
    }

    @Test
    public void test2505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2505");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean9 = point5.dominates(point8);
        boolean boolean10 = point2.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        int int18 = point16.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        boolean boolean26 = point16.dominates(point24);
        int int27 = point24.getX();
        int int28 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        boolean boolean44 = point34.dominates(point42);
        int int45 = point42.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int49 = point48.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        int int57 = point52.getX();
        boolean boolean58 = point48.dominates(point52);
        boolean boolean59 = point42.dominates(point48);
        int int60 = point48.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        int int68 = point66.getY();
        int int69 = point66.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean73 = point66.dominates(point72);
        boolean boolean74 = point48.dominates(point66);
        boolean boolean75 = point24.dominates(point66);
        int int76 = point66.getX();
        boolean boolean77 = point2.dominates(point66);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test2506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2506");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        boolean boolean19 = point9.dominates(point17);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int23 = point22.getY();
        boolean boolean24 = point9.dominates(point22);
        int int25 = point22.getX();
        boolean boolean26 = point2.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean30 = point22.dominates(point29);
        int int31 = point22.getY();
        int int32 = point22.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test2507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2507");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getX();
        int int19 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int23 = point22.getX();
        int int24 = point22.getX();
        int int25 = point22.getX();
        int int26 = point22.getY();
        int int27 = point22.getY();
        boolean boolean28 = point15.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int32 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point41.getY();
        int int44 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean48 = point41.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean52 = point41.dominates(point51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        int int61 = point58.getY();
        boolean boolean62 = point41.dominates(point58);
        boolean boolean63 = point35.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        int int71 = point69.getY();
        int int72 = point69.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean76 = point69.dominates(point75);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 10);
        boolean boolean80 = point69.dominates(point79);
        boolean boolean81 = point58.dominates(point69);
        int int82 = point69.getX();
        boolean boolean83 = point31.dominates(point69);
        boolean boolean84 = point22.dominates(point31);
        int int85 = point22.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 32 + "'", int17 == 32);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test2508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2508");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        boolean boolean20 = point10.dominates(point18);
        int int21 = point18.getX();
        int int22 = point18.getX();
        int int23 = point18.getY();
        int int24 = point18.getX();
        boolean boolean25 = point2.dominates(point18);
        java.lang.Class<?> wildcardClass26 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test2509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2509");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        boolean boolean21 = point2.dominates(point18);
        int int22 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int26 = point25.getX();
        int int27 = point25.getY();
        boolean boolean28 = point18.dominates(point25);
        int int29 = point25.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
    }

    @Test
    public void test2510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2510");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int6 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 0);
        int int10 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int14 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point17.getX();
        boolean boolean23 = point13.dominates(point17);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int27 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point30.getX();
        boolean boolean36 = point26.dominates(point30);
        int int37 = point30.getX();
        boolean boolean38 = point13.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point44.getY();
        int int47 = point44.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean51 = point44.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        int int59 = point57.getY();
        int int60 = point57.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean64 = point57.dominates(point63);
        boolean boolean65 = point44.dominates(point57);
        boolean boolean66 = point30.dominates(point57);
        int int67 = point57.getY();
        int int68 = point57.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int72 = point71.getX();
        int int73 = point71.getY();
        int int74 = point71.getY();
        boolean boolean75 = point57.dominates(point71);
        int int76 = point57.getX();
        boolean boolean77 = point9.dominates(point57);
        boolean boolean78 = point5.dominates(point57);
        boolean boolean79 = point2.dominates(point57);
        int int80 = point57.getY();
        java.lang.Class<?> wildcardClass81 = point57.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2511");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        boolean boolean30 = point13.dominates(point19);
        int int31 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        int int40 = point37.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean44 = point37.dominates(point43);
        boolean boolean45 = point19.dominates(point37);
        int int46 = point19.getY();
        int int47 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        int int51 = point50.getY();
        boolean boolean52 = point19.dominates(point50);
        java.lang.Class<?> wildcardClass53 = point19.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test2512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2512");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean12 = point5.dominates(point11);
        int int13 = point11.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test2513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2513");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', (int) (byte) 100);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean16 = point9.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean20 = point9.dominates(point19);
        int int21 = point19.getX();
        boolean boolean22 = point2.dominates(point19);
        java.lang.Class<?> wildcardClass23 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test2514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2514");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        int int6 = point5.getX();
        int int7 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean11 = point5.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int17 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point20.getX();
        boolean boolean26 = point16.dominates(point20);
        int int27 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int31 = point30.getX();
        int int32 = point30.getY();
        boolean boolean33 = point20.dominates(point30);
        int int34 = point30.getY();
        boolean boolean35 = point10.dominates(point30);
        boolean boolean36 = point2.dominates(point10);
        int int37 = point2.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
    }

    @Test
    public void test2515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2515");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList2 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList3 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList4 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList5 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList6 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList7 = null;
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = skylineAlgorithm8.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point13 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList19, pointArray18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList22 = skylineAlgorithm21.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = skylineAlgorithm10.produceFinalSkyLine(pointList19, pointList22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point27 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList33, pointArray32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm35.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm24.produceFinalSkyLine(pointList33, pointList36);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = skylineAlgorithm8.produceFinalSkyLine(pointList23, pointList36);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList39 = skylineAlgorithm8.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm8.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point44 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList50, pointArray49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm52.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = skylineAlgorithm41.produceFinalSkyLine(pointList50, pointList53);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm41.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm41.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm41.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm41.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm41.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm41.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm61.produceSubSkyLines(pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm41.produceSubSkyLines(pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm8.produceSubSkyLines(pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm8.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm8.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm8.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm8.getPoints();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.produceFinalSkyLine(pointList7, pointList82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.size()\" because \"left\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(pointList2);
        org.junit.Assert.assertNotNull(pointList3);
        org.junit.Assert.assertNotNull(pointList4);
        org.junit.Assert.assertNotNull(pointList5);
        org.junit.Assert.assertNotNull(pointList6);
        org.junit.Assert.assertNotNull(pointList9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(pointArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(pointList22);
        org.junit.Assert.assertNotNull(pointList23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(pointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertNotNull(pointList38);
        org.junit.Assert.assertNotNull(pointList39);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(pointArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertNotNull(pointList54);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
    }

    @Test
    public void test2516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2516");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        int int8 = point5.getY();
        boolean boolean9 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass10 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2517");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean58 = point51.dominates(point57);
        boolean boolean59 = point38.dominates(point51);
        boolean boolean60 = point2.dominates(point38);
        int int61 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        boolean boolean68 = point64.dominates(point67);
        boolean boolean69 = point2.dominates(point67);
        java.lang.Class<?> wildcardClass70 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2518");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        boolean boolean19 = point9.dominates(point17);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int23 = point22.getY();
        boolean boolean24 = point9.dominates(point22);
        int int25 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int29 = point28.getY();
        int int30 = point28.getY();
        boolean boolean31 = point22.dominates(point28);
        boolean boolean32 = point2.dominates(point22);
        int int33 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) 'a');
        int int37 = point36.getY();
        int int38 = point36.getX();
        boolean boolean39 = point2.dominates(point36);
        java.lang.Class<?> wildcardClass40 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 97 + "'", int37 == 97);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2519");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (-1));
        int int3 = point2.getY();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2520");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int10 = point9.getX();
        int int11 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int15 = point14.getX();
        boolean boolean16 = point9.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int20 = point19.getY();
        boolean boolean21 = point14.dominates(point19);
        int int22 = point14.getX();
        boolean boolean23 = point5.dominates(point14);
        int int24 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int31 = point30.getY();
        boolean boolean32 = point27.dominates(point30);
        boolean boolean33 = point5.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point45.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        boolean boolean55 = point45.dominates(point53);
        int int56 = point53.getY();
        boolean boolean57 = point39.dominates(point53);
        boolean boolean58 = point36.dominates(point53);
        boolean boolean59 = point27.dominates(point36);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test2521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2521");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean58 = point51.dominates(point57);
        boolean boolean59 = point38.dominates(point51);
        boolean boolean60 = point2.dominates(point38);
        int int61 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        boolean boolean68 = point64.dominates(point67);
        boolean boolean69 = point2.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 52);
        int int73 = point72.getX();
        boolean boolean74 = point2.dominates(point72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        int int78 = point77.getY();
        boolean boolean79 = point2.dominates(point77);
        int int80 = point77.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 97 + "'", int73 == 97);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test2522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2522");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean16 = point5.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 52);
        boolean boolean20 = point15.dominates(point19);
        int int21 = point19.getX();
        int int22 = point19.getX();
        int int23 = point19.getY();
        int int24 = point19.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
    }

    @Test
    public void test2523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2523");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int25 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point28.getX();
        boolean boolean34 = point24.dominates(point28);
        int int35 = point28.getX();
        boolean boolean36 = point11.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int40 = point39.getX();
        int int41 = point39.getY();
        boolean boolean42 = point11.dominates(point39);
        boolean boolean43 = point5.dominates(point39);
        int int44 = point5.getY();
        int int45 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int49 = point48.getX();
        boolean boolean50 = point5.dominates(point48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        boolean boolean57 = point53.dominates(point56);
        boolean boolean58 = point5.dominates(point53);
        java.lang.Class<?> wildcardClass59 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2524");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (-1));
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        int int10 = point9.getX();
        int int11 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean15 = point9.dominates(point14);
        int int16 = point14.getY();
        int int17 = point14.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int21 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        int int29 = point24.getX();
        boolean boolean30 = point20.dominates(point24);
        int int31 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int35 = point34.getX();
        int int36 = point34.getY();
        boolean boolean37 = point24.dominates(point34);
        int int38 = point34.getY();
        boolean boolean39 = point14.dominates(point34);
        boolean boolean40 = point5.dominates(point14);
        boolean boolean41 = point2.dominates(point5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test2525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2525");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        boolean boolean17 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point9.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = point9.dominates(point22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2526");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (byte) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean19 = point8.dominates(point18);
        boolean boolean20 = point2.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 97);
        int int24 = point23.getX();
        boolean boolean25 = point8.dominates(point23);
        int int26 = point23.getX();
        int int27 = point23.getX();
        int int28 = point23.getY();
        java.lang.Class<?> wildcardClass29 = point23.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test2527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2527");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (byte) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean19 = point8.dominates(point18);
        boolean boolean20 = point2.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point29.dominates(point37);
        boolean boolean40 = point23.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int44 = point43.getX();
        int int45 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getX();
        boolean boolean55 = point43.dominates(point51);
        boolean boolean56 = point37.dominates(point51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int60 = point59.getX();
        boolean boolean61 = point51.dominates(point59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        boolean boolean65 = point59.dominates(point64);
        boolean boolean66 = point8.dominates(point64);
        int int67 = point8.getX();
        int int68 = point8.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
    }

    @Test
    public void test2528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2528");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (-1));
        int int3 = point2.getY();
        int int4 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test2529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2529");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int25 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point28.getX();
        boolean boolean34 = point24.dominates(point28);
        int int35 = point28.getX();
        boolean boolean36 = point11.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int40 = point39.getX();
        int int41 = point39.getY();
        boolean boolean42 = point11.dominates(point39);
        boolean boolean43 = point5.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        int int51 = point46.getX();
        int int52 = point46.getX();
        int int53 = point46.getY();
        int int54 = point46.getX();
        boolean boolean55 = point5.dominates(point46);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test2530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2530");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (byte) 10);
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test2531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2531");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        boolean boolean33 = point16.dominates(point22);
        boolean boolean34 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        int int42 = point40.getY();
        int int43 = point40.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean47 = point40.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        boolean boolean51 = point46.dominates(point50);
        boolean boolean52 = point16.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        boolean boolean61 = point16.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean63 = point58.dominates(point62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test2532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2532");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int9 = point8.getY();
        boolean boolean10 = point2.dominates(point8);
        int int11 = point8.getX();
        int int12 = point8.getX();
        int int13 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        int int30 = point23.getX();
        boolean boolean31 = point16.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int38 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point41.getX();
        boolean boolean47 = point37.dominates(point41);
        int int48 = point41.getX();
        int int49 = point41.getY();
        int int50 = point41.getY();
        boolean boolean51 = point34.dominates(point41);
        boolean boolean52 = point16.dominates(point34);
        int int53 = point34.getX();
        boolean boolean54 = point8.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) 'a');
        boolean boolean58 = point34.dominates(point57);
        int int59 = point34.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
    }

    @Test
    public void test2533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2533");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        boolean boolean19 = point9.dominates(point17);
        boolean boolean20 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point26.getY();
        int int29 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean33 = point26.dominates(point32);
        int int34 = point32.getX();
        boolean boolean35 = point2.dominates(point32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int39 = point38.getX();
        int int40 = point38.getX();
        int int41 = point38.getX();
        int int42 = point38.getX();
        int int43 = point38.getX();
        boolean boolean44 = point2.dominates(point38);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2534");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        int int20 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point26.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        boolean boolean36 = point26.dominates(point34);
        int int37 = point34.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int41 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point44.getX();
        boolean boolean50 = point40.dominates(point44);
        boolean boolean51 = point34.dominates(point40);
        int int52 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        int int61 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean65 = point58.dominates(point64);
        boolean boolean66 = point40.dominates(point58);
        boolean boolean67 = point16.dominates(point58);
        int int68 = point58.getX();
        boolean boolean69 = point2.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean76 = point72.dominates(point75);
        int int77 = point75.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean84 = point80.dominates(point83);
        boolean boolean85 = point75.dominates(point83);
        boolean boolean86 = point58.dominates(point83);
        int int87 = point58.getY();
        java.lang.Class<?> wildcardClass88 = point58.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2535");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList3 = skylineAlgorithm2.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point7 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList13, pointArray12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm15.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm4.produceFinalSkyLine(pointList13, pointList16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm2.produceFinalSkyLine(pointList17, pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.produceSubSkyLines(pointList32);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass38 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(pointList3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(pointArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test2536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2536");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, 10);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = point2.dominates(point5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test2537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2537");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean23 = point16.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean27 = point16.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) '4');
        boolean boolean31 = point16.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int35 = point34.getY();
        int int36 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int40 = point39.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point43.getX();
        boolean boolean49 = point39.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int53 = point52.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean60 = point56.dominates(point59);
        int int61 = point56.getX();
        boolean boolean62 = point52.dominates(point56);
        int int63 = point56.getX();
        boolean boolean64 = point39.dominates(point56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int68 = point67.getX();
        int int69 = point67.getY();
        boolean boolean70 = point39.dominates(point67);
        boolean boolean71 = point34.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) '4');
        int int75 = point74.getX();
        boolean boolean76 = point67.dominates(point74);
        int int77 = point74.getX();
        int int78 = point74.getY();
        boolean boolean79 = point30.dominates(point74);
        int int80 = point30.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 100 + "'", int75 == 100);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 97 + "'", int80 == 97);
    }

    @Test
    public void test2538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2538");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = null;
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm15.produceSubSkyLines(pointList25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm15.produceSubSkyLines(pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm15.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm15.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm15.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm49.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point54 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList60, pointArray59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm51.produceFinalSkyLine(pointList60, pointList63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point68 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList74, pointArray73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm76.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm65.produceFinalSkyLine(pointList74, pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm49.produceFinalSkyLine(pointList64, pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm15.produceSubSkyLines(pointList64);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm15.getPoints();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.produceFinalSkyLine(pointList14, pointList81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.size()\" because \"left\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(pointArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(pointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
    }

    @Test
    public void test2539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2539");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        int int33 = point27.getY();
        int int34 = point27.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int38 = point37.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int42 = point41.getX();
        int int43 = point41.getX();
        int int44 = point41.getX();
        int int45 = point41.getY();
        int int46 = point41.getY();
        boolean boolean47 = point37.dominates(point41);
        int int48 = point41.getY();
        int int49 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int56 = point55.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean63 = point59.dominates(point62);
        int int64 = point59.getX();
        boolean boolean65 = point55.dominates(point59);
        int int66 = point59.getX();
        boolean boolean67 = point52.dominates(point59);
        boolean boolean68 = point41.dominates(point59);
        boolean boolean69 = point27.dominates(point59);
        int int70 = point27.getX();
        int int71 = point27.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int75 = point74.getX();
        int int76 = point74.getX();
        int int77 = point74.getY();
        int int78 = point74.getY();
        int int79 = point74.getX();
        boolean boolean80 = point27.dominates(point74);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test2540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2540");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 10);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean16 = point9.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int20 = point19.getY();
        boolean boolean21 = point15.dominates(point19);
        int int22 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int26 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        int int35 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean39 = point32.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean43 = point32.dominates(point42);
        int int44 = point42.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int48 = point47.getX();
        int int49 = point47.getX();
        int int50 = point47.getX();
        int int51 = point47.getY();
        boolean boolean52 = point42.dominates(point47);
        int int53 = point47.getY();
        boolean boolean54 = point25.dominates(point47);
        int int55 = point47.getY();
        boolean boolean56 = point19.dominates(point47);
        int int57 = point47.getY();
        boolean boolean58 = point2.dominates(point47);
        int int59 = point47.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test2541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2541");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 1);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int7 = point6.getY();
        int int8 = point6.getY();
        int int9 = point6.getX();
        boolean boolean10 = point2.dominates(point6);
        int int11 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test2542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2542");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        int int9 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int13 = point12.getX();
        int int14 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int18 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point21.getX();
        boolean boolean27 = point17.dominates(point21);
        int int28 = point17.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        boolean boolean44 = point34.dominates(point42);
        int int45 = point42.getX();
        int int46 = point42.getX();
        boolean boolean47 = point17.dominates(point42);
        int int48 = point17.getX();
        boolean boolean49 = point12.dominates(point17);
        boolean boolean50 = point5.dominates(point17);
        int int51 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) -1);
        boolean boolean55 = point17.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        int int64 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean68 = point61.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean72 = point61.dominates(point71);
        boolean boolean73 = point17.dominates(point71);
        int int74 = point17.getX();
        int int75 = point17.getX();
        int int76 = point17.getY();
        java.lang.Class<?> wildcardClass77 = point17.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 52 + "'", int76 == 52);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2543");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 100);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2544");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        int int20 = point16.getY();
        int int21 = point16.getY();
        int int22 = point16.getX();
        int int23 = point16.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test2545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2545");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) 'a');
        int int3 = point2.getY();
        int int4 = point2.getX();
        int int5 = point2.getY();
        int int6 = point2.getY();
        int int7 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
    }

    @Test
    public void test2546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2546");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.produceSubSkyLines(pointList52);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point66 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList72, pointArray71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm74.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm63.produceFinalSkyLine(pointList72, pointList75);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean85 = point81.dominates(point84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point81 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList87, pointArray86);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm89.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm78.produceFinalSkyLine(pointList87, pointList90);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm77.produceSubSkyLines(pointList87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm93 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm93.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm63.produceFinalSkyLine(pointList92, pointList94);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList99 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(pointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(pointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
        org.junit.Assert.assertNotNull(pointList99);
    }

    @Test
    public void test2547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2547");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point33.dominates(point46);
        boolean boolean55 = point19.dominates(point46);
        int int56 = point46.getY();
        int int57 = point46.getY();
        int int58 = point46.getX();
        int int59 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean66 = point62.dominates(point65);
        int int67 = point65.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean74 = point70.dominates(point73);
        boolean boolean75 = point65.dominates(point73);
        int int76 = point73.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int80 = point79.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean87 = point83.dominates(point86);
        int int88 = point83.getX();
        boolean boolean89 = point79.dominates(point83);
        boolean boolean90 = point73.dominates(point79);
        int int91 = point79.getX();
        boolean boolean92 = point46.dominates(point79);
        int int93 = point46.getY();
        int int94 = point46.getX();
        java.lang.Class<?> wildcardClass95 = point46.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2548");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        int int22 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        boolean boolean38 = point28.dominates(point36);
        int int39 = point36.getX();
        int int40 = point36.getX();
        boolean boolean41 = point11.dominates(point36);
        boolean boolean42 = point7.dominates(point11);
        int int43 = point11.getY();
        boolean boolean44 = point2.dominates(point11);
        int int45 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int49 = point48.getX();
        int int50 = point48.getX();
        int int51 = point48.getX();
        boolean boolean52 = point11.dominates(point48);
        int int53 = point11.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test2549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2549");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) '#');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        int int12 = point8.getX();
        int int13 = point8.getX();
        int int14 = point8.getY();
        boolean boolean15 = point2.dominates(point8);
        java.lang.Class<?> wildcardClass16 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2550");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) '4');
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test2551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2551");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        boolean boolean8 = point2.dominates(point5);
        int int9 = point2.getX();
        int int10 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int14 = point13.getX();
        int int15 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int19 = point18.getX();
        boolean boolean20 = point13.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) 'a');
        boolean boolean24 = point18.dominates(point23);
        boolean boolean25 = point2.dominates(point18);
        java.lang.Class<?> wildcardClass26 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test2552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2552");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int6 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean10 = point5.dominates(point9);
        int int11 = point5.getY();
        int int12 = point5.getY();
        boolean boolean13 = point2.dominates(point5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2553");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int10 = point9.getX();
        int int11 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int15 = point14.getX();
        boolean boolean16 = point9.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int20 = point19.getY();
        boolean boolean21 = point14.dominates(point19);
        int int22 = point14.getX();
        boolean boolean23 = point5.dominates(point14);
        int int24 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int31 = point30.getY();
        boolean boolean32 = point27.dominates(point30);
        boolean boolean33 = point5.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 100);
        boolean boolean37 = point27.dominates(point36);
        int int38 = point27.getX();
        int int39 = point27.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test2554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2554");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point8.getX();
        int int20 = point8.getY();
        boolean boolean21 = point2.dominates(point8);
        int int22 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 1);
        boolean boolean29 = point25.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        boolean boolean49 = point44.dominates(point48);
        boolean boolean50 = point32.dominates(point44);
        boolean boolean51 = point25.dominates(point44);
        boolean boolean52 = point2.dominates(point44);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2555");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm17.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point22 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList28, pointArray27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm19.produceFinalSkyLine(pointList28, pointList31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point36 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList42, pointArray41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm44.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm33.produceFinalSkyLine(pointList42, pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm17.produceFinalSkyLine(pointList32, pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm0.produceSubSkyLines(pointList47);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass53 = pointList52.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(pointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(pointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test2556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2556");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        boolean boolean16 = point11.dominates(point15);
        int int17 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int21 = point20.getX();
        int int22 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int26 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point29.getX();
        boolean boolean35 = point25.dominates(point29);
        int int36 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        boolean boolean52 = point42.dominates(point50);
        int int53 = point50.getX();
        int int54 = point50.getX();
        boolean boolean55 = point25.dominates(point50);
        int int56 = point25.getX();
        boolean boolean57 = point20.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int61 = point60.getX();
        int int62 = point60.getY();
        int int63 = point60.getX();
        boolean boolean64 = point25.dominates(point60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int68 = point67.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean75 = point71.dominates(point74);
        int int76 = point71.getX();
        boolean boolean77 = point67.dominates(point71);
        int int78 = point71.getX();
        int int79 = point71.getY();
        int int80 = point71.getY();
        int int81 = point71.getY();
        boolean boolean82 = point25.dominates(point71);
        int int83 = point71.getY();
        boolean boolean84 = point15.dominates(point71);
        java.lang.Class<?> wildcardClass85 = point71.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2557");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        int int15 = point10.getX();
        java.lang.Class<?> wildcardClass16 = point10.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2558");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getY();
        int int6 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        boolean boolean25 = point15.dominates(point23);
        boolean boolean26 = point9.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int30 = point29.getX();
        int int31 = point29.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        int int40 = point37.getX();
        boolean boolean41 = point29.dominates(point37);
        boolean boolean42 = point23.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int46 = point45.getX();
        boolean boolean47 = point37.dominates(point45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        boolean boolean51 = point45.dominates(point50);
        boolean boolean52 = point2.dominates(point45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        int int64 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean68 = point61.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean72 = point61.dominates(point71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean79 = point75.dominates(point78);
        int int80 = point78.getY();
        int int81 = point78.getY();
        boolean boolean82 = point61.dominates(point78);
        boolean boolean83 = point55.dominates(point78);
        int int84 = point78.getX();
        boolean boolean85 = point2.dominates(point78);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test2559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2559");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 10);
    }

    @Test
    public void test2560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2560");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 100);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test2561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2561");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = point2.dominates(point5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test2562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2562");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 1);
        int int6 = point5.getX();
        boolean boolean7 = point2.dominates(point5);
        int int8 = point2.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
    }

    @Test
    public void test2563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2563");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 52);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 52);
        boolean boolean7 = point2.dominates(point6);
        int int8 = point2.getY();
        int int9 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point12.getY();
        boolean boolean18 = point2.dominates(point12);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2564");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point24 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList30, pointArray29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm21.produceFinalSkyLine(pointList30, pointList33);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm20.produceSubSkyLines(pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm0.produceSubSkyLines(pointList30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point40 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList46, pointArray45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm48.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm37.produceFinalSkyLine(pointList46, pointList49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point54 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList60, pointArray59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm51.produceFinalSkyLine(pointList60, pointList63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point68 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList74, pointArray73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm76.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm65.produceFinalSkyLine(pointList74, pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm37.produceFinalSkyLine(pointList64, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.produceSubSkyLines(pointList64);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass86 = pointList85.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(pointArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(pointArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(pointArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(pointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2565");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        int int20 = point2.getY();
        int int21 = point2.getY();
        int int22 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        boolean boolean41 = point31.dominates(point39);
        int int42 = point39.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int46 = point45.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        int int54 = point49.getX();
        boolean boolean55 = point45.dominates(point49);
        boolean boolean56 = point39.dominates(point45);
        boolean boolean57 = point25.dominates(point39);
        boolean boolean58 = point2.dominates(point39);
        int int59 = point2.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
    }

    @Test
    public void test2566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2566");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getX();
        int int14 = point6.getY();
        int int15 = point6.getY();
        int int16 = point6.getY();
        int int17 = point6.getX();
        int int18 = point6.getX();
        int int19 = point6.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test2567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2567");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 32);
        boolean boolean22 = point5.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int26 = point25.getY();
        int int27 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int31 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int35 = point34.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point38.getX();
        boolean boolean44 = point34.dominates(point38);
        int int45 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean60 = point56.dominates(point59);
        boolean boolean61 = point51.dominates(point59);
        int int62 = point59.getX();
        int int63 = point59.getX();
        boolean boolean64 = point34.dominates(point59);
        boolean boolean65 = point30.dominates(point34);
        int int66 = point34.getY();
        boolean boolean67 = point25.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int71 = point70.getX();
        int int72 = point70.getY();
        int int73 = point70.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int77 = point76.getY();
        boolean boolean78 = point70.dominates(point76);
        boolean boolean79 = point34.dominates(point76);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (byte) -1);
        int int83 = point82.getX();
        boolean boolean84 = point34.dominates(point82);
        int int85 = point34.getX();
        boolean boolean86 = point5.dominates(point34);
        int int87 = point5.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 35 + "'", int83 == 35);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test2568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2568");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 97);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int24 = point23.getX();
        int int25 = point23.getX();
        int int26 = point23.getX();
        int int27 = point23.getY();
        boolean boolean28 = point18.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int32 = point31.getX();
        int int33 = point31.getX();
        boolean boolean34 = point23.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean41 = point37.dominates(point40);
        boolean boolean42 = point23.dominates(point40);
        int int43 = point23.getX();
        boolean boolean44 = point2.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) 0);
        int int48 = point47.getX();
        boolean boolean49 = point2.dominates(point47);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2569");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        int int9 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int13 = point12.getX();
        int int14 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int18 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point21.getX();
        boolean boolean27 = point17.dominates(point21);
        int int28 = point17.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        boolean boolean44 = point34.dominates(point42);
        int int45 = point42.getX();
        int int46 = point42.getX();
        boolean boolean47 = point17.dominates(point42);
        int int48 = point17.getX();
        boolean boolean49 = point12.dominates(point17);
        boolean boolean50 = point5.dominates(point17);
        int int51 = point5.getY();
        int int52 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point55.getX();
        int int61 = point55.getY();
        int int62 = point55.getY();
        int int63 = point55.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        boolean boolean70 = point66.dominates(point69);
        boolean boolean71 = point55.dominates(point69);
        boolean boolean72 = point5.dominates(point55);
        java.lang.Class<?> wildcardClass73 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2570");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (int) (short) -1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        boolean boolean20 = point10.dominates(point18);
        int int21 = point10.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int25 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point28.getX();
        boolean boolean34 = point24.dominates(point28);
        int int35 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        boolean boolean51 = point41.dominates(point49);
        int int52 = point49.getX();
        int int53 = point49.getX();
        boolean boolean54 = point24.dominates(point49);
        int int55 = point49.getY();
        boolean boolean56 = point10.dominates(point49);
        int int57 = point10.getX();
        int int58 = point10.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean68 = point64.dominates(point67);
        int int69 = point67.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean76 = point72.dominates(point75);
        boolean boolean77 = point67.dominates(point75);
        boolean boolean78 = point61.dominates(point75);
        int int79 = point61.getY();
        int int80 = point61.getY();
        boolean boolean81 = point10.dominates(point61);
        boolean boolean82 = point2.dominates(point61);
        int int83 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test2571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2571");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, 32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) '4');
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int11 = point10.getX();
        int int12 = point10.getY();
        boolean boolean13 = point2.dominates(point10);
        int int14 = point2.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test2572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2572");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm16.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm16.produceFinalSkyLine(pointList31, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.produceSubSkyLines(pointList46);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
    }

    @Test
    public void test2573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2573");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        int int5 = point2.getX();
        int int6 = point2.getY();
        int int7 = point2.getY();
        java.lang.Class<?> wildcardClass8 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2574");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int17 = point16.getX();
        int int18 = point16.getX();
        int int19 = point16.getX();
        boolean boolean20 = point2.dominates(point16);
        int int21 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (short) 100);
        boolean boolean25 = point2.dominates(point24);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test2575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2575");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int8 = point7.getX();
        boolean boolean9 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) 'a');
        boolean boolean13 = point7.dominates(point12);
        int int14 = point7.getX();
        int int15 = point7.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test2576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2576");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        boolean boolean21 = point2.dominates(point18);
        int int22 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int26 = point25.getX();
        int int27 = point25.getY();
        boolean boolean28 = point18.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 10);
        int int32 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int49 = point48.getY();
        boolean boolean50 = point44.dominates(point48);
        int int51 = point48.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int55 = point54.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        int int64 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean68 = point61.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean72 = point61.dominates(point71);
        int int73 = point71.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int77 = point76.getX();
        int int78 = point76.getX();
        int int79 = point76.getX();
        int int80 = point76.getY();
        boolean boolean81 = point71.dominates(point76);
        int int82 = point76.getY();
        boolean boolean83 = point54.dominates(point76);
        int int84 = point76.getY();
        boolean boolean85 = point48.dominates(point76);
        int int86 = point76.getY();
        boolean boolean87 = point31.dominates(point76);
        boolean boolean88 = point18.dominates(point76);
        java.lang.Class<?> wildcardClass89 = point76.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 97 + "'", int51 == 97);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2577");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean20 = point13.dominates(point19);
        int int21 = point13.getY();
        boolean boolean22 = point2.dominates(point13);
        int int23 = point2.getY();
        int int24 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test2578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2578");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        int int24 = point21.getY();
        int int25 = point21.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, 32);
        boolean boolean29 = point21.dominates(point28);
        int int30 = point28.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
    }

    @Test
    public void test2579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2579");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean58 = point51.dominates(point57);
        boolean boolean59 = point38.dominates(point51);
        boolean boolean60 = point2.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean64 = point38.dominates(point63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) 'a');
        int int68 = point67.getY();
        int int69 = point67.getY();
        int int70 = point67.getY();
        boolean boolean71 = point63.dominates(point67);
        int int72 = point63.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 97 + "'", int68 == 97);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 97 + "'", int70 == 97);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
    }

    @Test
    public void test2580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2580");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point66 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList72, pointArray71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm74.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm63.produceFinalSkyLine(pointList72, pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm62.produceSubSkyLines(pointList72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm78.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm48.produceFinalSkyLine(pointList77, pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.produceSubSkyLines(pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(pointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
        org.junit.Assert.assertNotNull(pointList87);
        org.junit.Assert.assertNotNull(pointList88);
    }

    @Test
    public void test2581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2581");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) ' ');
    }

    @Test
    public void test2582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2582");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point38 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList44, pointArray43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm35.produceFinalSkyLine(pointList44, pointList47);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm34.produceSubSkyLines(pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm0.produceSubSkyLines(pointList49);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean60 = point56.dominates(point59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point56 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList62, pointArray61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm64.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm53.produceFinalSkyLine(pointList62, pointList65);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean74 = point70.dominates(point73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point70 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList76, pointArray75);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm78.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm67.produceFinalSkyLine(pointList76, pointList79);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean88 = point84.dominates(point87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point84 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList90, pointArray89);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm92 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm92.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm81.produceFinalSkyLine(pointList90, pointList93);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm53.produceFinalSkyLine(pointList80, pointList90);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.produceSubSkyLines(pointList80);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(pointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(pointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(pointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(pointArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
    }

    @Test
    public void test2583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2583");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point38 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList44, pointArray43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm35.produceFinalSkyLine(pointList44, pointList47);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm35.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm35.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point54 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList60, pointArray59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm51.produceFinalSkyLine(pointList60, pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm35.produceSubSkyLines(pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm35.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm35.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm35.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean77 = point73.dominates(point76);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point73 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList79, pointArray78);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm81.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm70.produceFinalSkyLine(pointList79, pointList82);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm69.produceSubSkyLines(pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm35.produceSubSkyLines(pointList84);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm0.produceSubSkyLines(pointList84);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(pointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(pointArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(pointArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
        org.junit.Assert.assertNotNull(pointList87);
        org.junit.Assert.assertNotNull(pointList88);
    }

    @Test
    public void test2584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2584");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean16 = point9.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean20 = point9.dominates(point19);
        int int21 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int25 = point24.getX();
        int int26 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int30 = point29.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        int int38 = point33.getX();
        boolean boolean39 = point29.dominates(point33);
        int int40 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        boolean boolean56 = point46.dominates(point54);
        int int57 = point54.getX();
        int int58 = point54.getX();
        boolean boolean59 = point29.dominates(point54);
        int int60 = point29.getX();
        boolean boolean61 = point24.dominates(point29);
        boolean boolean62 = point19.dominates(point24);
        int int63 = point19.getX();
        boolean boolean64 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) '#');
        int int68 = point67.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean78 = point74.dominates(point77);
        int int79 = point77.getY();
        int int80 = point77.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean84 = point77.dominates(point83);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) '4');
        boolean boolean88 = point83.dominates(point87);
        boolean boolean89 = point71.dominates(point83);
        int int90 = point71.getY();
        boolean boolean91 = point67.dominates(point71);
        boolean boolean92 = point2.dominates(point71);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 35 + "'", int90 == 35);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test2585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2585");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) '4');
        int int6 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int10 = point9.getY();
        boolean boolean11 = point5.dominates(point9);
        boolean boolean12 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (-1));
        boolean boolean16 = point2.dominates(point15);
        int int17 = point2.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test2586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2586");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.produceSubSkyLines(pointList52);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point63 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList69, pointArray68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = skylineAlgorithm71.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm60.produceFinalSkyLine(pointList69, pointList72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm59.produceSubSkyLines(pointList69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean82 = point78.dominates(point81);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point78 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList84, pointArray83);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm86.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm75.produceFinalSkyLine(pointList84, pointList87);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm59.produceSubSkyLines(pointList88);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm0.produceSubSkyLines(pointList88);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.produceSubSkyLines(pointList94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(pointArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(pointList72);
        org.junit.Assert.assertNotNull(pointList73);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(pointArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(pointList87);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
    }

    @Test
    public void test2587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2587");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int21 = point20.getX();
        boolean boolean22 = point5.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (byte) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point31.getY();
        int int34 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean38 = point31.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean42 = point31.dominates(point41);
        boolean boolean43 = point25.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 97);
        int int47 = point46.getX();
        boolean boolean48 = point31.dominates(point46);
        boolean boolean49 = point5.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int53 = point52.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) -1);
        boolean boolean60 = point56.dominates(point59);
        boolean boolean61 = point52.dominates(point59);
        int int62 = point52.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int66 = point65.getY();
        int int67 = point65.getY();
        boolean boolean68 = point52.dominates(point65);
        boolean boolean69 = point5.dominates(point52);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 97 + "'", int47 == 97);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test2588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2588");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        int int6 = point5.getX();
        int int7 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean11 = point5.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int17 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point20.getX();
        boolean boolean26 = point16.dominates(point20);
        int int27 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int31 = point30.getX();
        int int32 = point30.getY();
        boolean boolean33 = point20.dominates(point30);
        int int34 = point30.getY();
        boolean boolean35 = point10.dominates(point30);
        boolean boolean36 = point2.dominates(point10);
        int int37 = point10.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test2589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2589");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (byte) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean19 = point8.dominates(point18);
        boolean boolean20 = point2.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point29.dominates(point37);
        boolean boolean40 = point23.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int44 = point43.getX();
        int int45 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getX();
        boolean boolean55 = point43.dominates(point51);
        boolean boolean56 = point37.dominates(point51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int60 = point59.getX();
        boolean boolean61 = point51.dominates(point59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        boolean boolean65 = point59.dominates(point64);
        boolean boolean66 = point8.dominates(point64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) '#');
        int int70 = point69.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int74 = point73.getX();
        int int75 = point73.getX();
        boolean boolean76 = point69.dominates(point73);
        boolean boolean77 = point64.dominates(point73);
        int int78 = point64.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 32 + "'", int70 == 32);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test2590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2590");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 0);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test2591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2591");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 1);
        int int36 = point35.getY();
        boolean boolean37 = point2.dominates(point35);
        int int38 = point2.getY();
        int int39 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test2592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2592");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        boolean boolean21 = point11.dominates(point19);
        int int22 = point19.getY();
        boolean boolean23 = point5.dominates(point19);
        boolean boolean24 = point2.dominates(point19);
        int int25 = point2.getY();
        int int26 = point2.getX();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
    }

    @Test
    public void test2593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2593");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        int int13 = point9.getY();
        boolean boolean14 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 0);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        int int29 = point27.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        boolean boolean37 = point27.dominates(point35);
        int int38 = point27.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int42 = point41.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        int int50 = point45.getX();
        boolean boolean51 = point41.dominates(point45);
        int int52 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        boolean boolean68 = point58.dominates(point66);
        int int69 = point66.getX();
        int int70 = point66.getX();
        boolean boolean71 = point41.dominates(point66);
        int int72 = point66.getY();
        boolean boolean73 = point27.dominates(point66);
        int int74 = point66.getY();
        boolean boolean75 = point17.dominates(point66);
        int int76 = point66.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) 'a');
        boolean boolean83 = point79.dominates(point82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) '4');
        boolean boolean87 = point82.dominates(point86);
        boolean boolean88 = point66.dominates(point82);
        boolean boolean89 = point2.dominates(point82);
        int int90 = point82.getY();
        int int91 = point82.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 97 + "'", int90 == 97);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 97 + "'", int91 == 97);
    }

    @Test
    public void test2594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2594");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList3 = skylineAlgorithm2.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point7 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList13, pointArray12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm15.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm4.produceFinalSkyLine(pointList13, pointList16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm2.produceFinalSkyLine(pointList17, pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.produceSubSkyLines(pointList32);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point39 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList45, pointArray44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm36.produceFinalSkyLine(pointList45, pointList48);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm0.produceSubSkyLines(pointList49);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm0.produceSubSkyLines(pointList52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(pointList3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(pointArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(pointArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
    }

    @Test
    public void test2595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2595");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getY();
        int int6 = point2.getX();
        int int7 = point2.getY();
        int int8 = point2.getX();
        java.lang.Class<?> wildcardClass9 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2596");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int7 = point6.getX();
        int int8 = point6.getX();
        int int9 = point6.getX();
        int int10 = point6.getY();
        int int11 = point6.getY();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getY();
        int int14 = point6.getX();
        java.lang.Class<?> wildcardClass15 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2597");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int3 = point2.getY();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        int int24 = point21.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int28 = point27.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point31.getX();
        boolean boolean37 = point27.dominates(point31);
        boolean boolean38 = point21.dominates(point27);
        boolean boolean39 = point7.dominates(point21);
        int int40 = point21.getY();
        int int41 = point21.getX();
        boolean boolean42 = point2.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) (byte) 100);
        boolean boolean46 = point21.dominates(point45);
        int int47 = point21.getX();
        int int48 = point21.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int52 = point51.getX();
        int int53 = point51.getY();
        int int54 = point51.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) '#');
        boolean boolean58 = point51.dominates(point57);
        int int59 = point51.getY();
        boolean boolean60 = point21.dominates(point51);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test2598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2598");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        int int8 = point2.getX();
        int int9 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int16 = point15.getY();
        boolean boolean17 = point12.dominates(point15);
        boolean boolean18 = point2.dominates(point12);
        int int19 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (-1));
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        int int27 = point26.getX();
        int int28 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean32 = point26.dominates(point31);
        int int33 = point31.getY();
        int int34 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int38 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point41.getX();
        boolean boolean47 = point37.dominates(point41);
        int int48 = point41.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int52 = point51.getX();
        int int53 = point51.getY();
        boolean boolean54 = point41.dominates(point51);
        int int55 = point51.getY();
        boolean boolean56 = point31.dominates(point51);
        boolean boolean57 = point22.dominates(point31);
        boolean boolean58 = point12.dominates(point31);
        java.lang.Class<?> wildcardClass59 = point12.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2599");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int18 = point17.getX();
        boolean boolean19 = point2.dominates(point17);
        int int20 = point17.getX();
        int int21 = point17.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int25 = point24.getX();
        int int26 = point24.getX();
        int int27 = point24.getY();
        int int28 = point24.getY();
        int int29 = point24.getX();
        int int30 = point24.getY();
        int int31 = point24.getX();
        int int32 = point24.getY();
        int int33 = point24.getY();
        boolean boolean34 = point17.dominates(point24);
        int int35 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point44.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        boolean boolean54 = point44.dominates(point52);
        int int55 = point52.getY();
        boolean boolean56 = point38.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean66 = point62.dominates(point65);
        int int67 = point65.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean74 = point70.dominates(point73);
        boolean boolean75 = point65.dominates(point73);
        int int76 = point73.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int80 = point79.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean87 = point83.dominates(point86);
        int int88 = point83.getX();
        boolean boolean89 = point79.dominates(point83);
        boolean boolean90 = point73.dominates(point79);
        boolean boolean91 = point59.dominates(point73);
        boolean boolean92 = point52.dominates(point73);
        boolean boolean93 = point17.dominates(point73);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test2600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2600");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point45.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        boolean boolean55 = point45.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        boolean boolean71 = point61.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point6, point13, point22, point38, point45, point61 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm0.produceSubSkyLines(pointList73);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean85 = point81.dominates(point84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point81 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList87, pointArray86);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm89.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm78.produceFinalSkyLine(pointList87, pointList90);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm0.produceSubSkyLines(pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass96 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(pointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2601");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) (short) 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int7 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int11 = point10.getY();
        boolean boolean12 = point6.dominates(point10);
        int int13 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int17 = point16.getX();
        int int18 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int22 = point21.getX();
        int int23 = point21.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        int int32 = point29.getX();
        boolean boolean33 = point21.dominates(point29);
        int int34 = point21.getX();
        int int35 = point21.getX();
        boolean boolean36 = point16.dominates(point21);
        int int37 = point21.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int41 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int45 = point44.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point48.getX();
        boolean boolean54 = point44.dominates(point48);
        int int55 = point44.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        boolean boolean71 = point61.dominates(point69);
        int int72 = point69.getX();
        int int73 = point69.getX();
        boolean boolean74 = point44.dominates(point69);
        boolean boolean75 = point40.dominates(point44);
        boolean boolean76 = point21.dominates(point44);
        int int77 = point44.getX();
        int int78 = point44.getY();
        int int79 = point44.getY();
        boolean boolean80 = point6.dominates(point44);
        boolean boolean81 = point2.dominates(point44);
        int int82 = point2.getY();
        int int83 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test2602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2602");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) '4');
    }

    @Test
    public void test2603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2603");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        boolean boolean21 = point11.dominates(point19);
        int int22 = point11.getX();
        int int23 = point11.getY();
        boolean boolean24 = point5.dominates(point11);
        boolean boolean25 = point2.dominates(point11);
        int int26 = point11.getY();
        int int27 = point11.getY();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test2604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2604");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) ' ');
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
    }

    @Test
    public void test2605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2605");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean58 = point51.dominates(point57);
        boolean boolean59 = point38.dominates(point51);
        boolean boolean60 = point2.dominates(point38);
        int int61 = point2.getX();
        java.lang.Class<?> wildcardClass62 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test2606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2606");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 32);
        boolean boolean22 = point5.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (short) 1);
        int int26 = point25.getX();
        boolean boolean27 = point21.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) '4');
        int int31 = point30.getY();
        boolean boolean32 = point21.dominates(point30);
        int int33 = point30.getY();
        int int34 = point30.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
    }

    @Test
    public void test2607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2607");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        int int18 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) -1);
        boolean boolean22 = point15.dominates(point21);
        int int23 = point15.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test2608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2608");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        boolean boolean21 = point11.dominates(point19);
        int int22 = point19.getX();
        int int23 = point19.getX();
        int int24 = point19.getY();
        boolean boolean25 = point5.dominates(point19);
        boolean boolean26 = point2.dominates(point5);
        int int27 = point2.getX();
        int int28 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
    }

    @Test
    public void test2609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2609");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point24 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList30, pointArray29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm21.produceFinalSkyLine(pointList30, pointList33);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm20.produceSubSkyLines(pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm0.produceSubSkyLines(pointList30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point40 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList46, pointArray45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm48.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm37.produceFinalSkyLine(pointList46, pointList49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point54 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList60, pointArray59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm51.produceFinalSkyLine(pointList60, pointList63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point68 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList74, pointArray73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm76.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm65.produceFinalSkyLine(pointList74, pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm37.produceFinalSkyLine(pointList64, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.produceSubSkyLines(pointList64);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass84 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(pointArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(pointArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(pointArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(pointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test2610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2610");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        int int20 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) '4');
        boolean boolean24 = point2.dominates(point23);
        int int25 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, 0);
        boolean boolean29 = point23.dominates(point28);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test2611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2611");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, 1);
    }

    @Test
    public void test2612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2612");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        int int3 = point2.getX();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int14 = point13.getY();
        boolean boolean15 = point10.dominates(point13);
        boolean boolean16 = point7.dominates(point10);
        boolean boolean17 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point29.dominates(point37);
        boolean boolean40 = point23.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int44 = point43.getX();
        int int45 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getX();
        boolean boolean55 = point43.dominates(point51);
        boolean boolean56 = point37.dominates(point51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int60 = point59.getX();
        boolean boolean61 = point51.dominates(point59);
        int int62 = point51.getY();
        int int63 = point51.getX();
        boolean boolean64 = point20.dominates(point51);
        boolean boolean65 = point2.dominates(point51);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test2613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2613");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        int int9 = point2.getX();
        int int10 = point2.getY();
        java.lang.Class<?> wildcardClass11 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2614");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        int int22 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        boolean boolean38 = point28.dominates(point36);
        int int39 = point36.getX();
        int int40 = point36.getX();
        boolean boolean41 = point11.dominates(point36);
        boolean boolean42 = point7.dominates(point11);
        int int43 = point11.getY();
        boolean boolean44 = point2.dominates(point11);
        int int45 = point2.getX();
        int int46 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        int int57 = point55.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean64 = point60.dominates(point63);
        boolean boolean65 = point55.dominates(point63);
        int int66 = point63.getY();
        boolean boolean67 = point49.dominates(point63);
        int int68 = point63.getY();
        int int69 = point63.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) 10);
        int int73 = point72.getY();
        int int74 = point72.getX();
        boolean boolean75 = point63.dominates(point72);
        int int76 = point72.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean83 = point79.dominates(point82);
        int int84 = point82.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean91 = point87.dominates(point90);
        boolean boolean92 = point82.dominates(point90);
        int int93 = point90.getY();
        int int94 = point90.getX();
        int int95 = point90.getY();
        boolean boolean96 = point72.dominates(point90);
        boolean boolean97 = point2.dominates(point90);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test2615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2615");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point37 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList43, pointArray42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm34.produceFinalSkyLine(pointList43, pointList46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm34.produceFinalSkyLine(pointList61, pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm0.produceSubSkyLines(pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass79 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(pointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2616");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean19 = point8.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        int int28 = point25.getY();
        boolean boolean29 = point8.dominates(point25);
        boolean boolean30 = point2.dominates(point25);
        int int31 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) -1);
        int int35 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point44.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        boolean boolean54 = point44.dominates(point52);
        boolean boolean55 = point38.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int59 = point58.getX();
        int int60 = point58.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        int int68 = point66.getY();
        int int69 = point66.getX();
        boolean boolean70 = point58.dominates(point66);
        boolean boolean71 = point52.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int75 = point74.getX();
        boolean boolean76 = point66.dominates(point74);
        boolean boolean77 = point34.dominates(point66);
        int int78 = point66.getX();
        boolean boolean79 = point25.dominates(point66);
        int int80 = point25.getY();
        java.lang.Class<?> wildcardClass81 = point25.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2617");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point36 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList42, pointArray41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm44.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm33.produceFinalSkyLine(pointList42, pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm32.produceSubSkyLines(pointList42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm32.produceSubSkyLines(pointList61);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm0.produceSubSkyLines(pointList61);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm0.produceSubSkyLines(pointList66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(pointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
    }

    @Test
    public void test2618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2618");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        int int5 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 52);
        boolean boolean9 = point2.dominates(point8);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2619");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int9 = point8.getY();
        boolean boolean10 = point2.dominates(point8);
        int int11 = point8.getX();
        int int12 = point8.getX();
        int int13 = point8.getY();
        int int14 = point8.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
    }

    @Test
    public void test2620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2620");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean15 = point8.dominates(point14);
        boolean boolean16 = point2.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        boolean boolean35 = point25.dominates(point33);
        int int36 = point33.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int40 = point39.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point43.getX();
        boolean boolean49 = point39.dominates(point43);
        boolean boolean50 = point33.dominates(point39);
        boolean boolean51 = point19.dominates(point33);
        boolean boolean52 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) '4');
        int int56 = point55.getY();
        boolean boolean57 = point2.dominates(point55);
        int int58 = point55.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
    }

    @Test
    public void test2621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2621");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (byte) 100);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        int int8 = point7.getX();
        int int9 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean13 = point7.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        int int23 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean27 = point20.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean31 = point20.dominates(point30);
        int int32 = point20.getY();
        int int33 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int37 = point36.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int41 = point40.getX();
        int int42 = point40.getX();
        int int43 = point40.getX();
        int int44 = point40.getY();
        int int45 = point40.getY();
        boolean boolean46 = point36.dominates(point40);
        boolean boolean47 = point20.dominates(point36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        int int55 = point53.getY();
        int int56 = point53.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean60 = point53.dominates(point59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean64 = point53.dominates(point63);
        int int65 = point63.getY();
        boolean boolean66 = point36.dominates(point63);
        boolean boolean67 = point12.dominates(point63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int71 = point70.getX();
        boolean boolean72 = point12.dominates(point70);
        boolean boolean73 = point2.dominates(point70);
        int int74 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 32 + "'", int65 == 32);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
    }

    @Test
    public void test2622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2622");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point36 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList42, pointArray41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm44.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm33.produceFinalSkyLine(pointList42, pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm33.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point52 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList58, pointArray57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm60.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm49.produceFinalSkyLine(pointList58, pointList61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm63.produceSubSkyLines(pointList73);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm33.produceFinalSkyLine(pointList62, pointList73);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.produceSubSkyLines(pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(pointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(pointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
    }

    @Test
    public void test2623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2623");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        boolean boolean30 = point13.dominates(point19);
        int int31 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        int int40 = point37.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean44 = point37.dominates(point43);
        boolean boolean45 = point19.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 10);
        boolean boolean49 = point37.dominates(point48);
        int int50 = point37.getY();
        int int51 = point37.getX();
        int int52 = point37.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        int int61 = point58.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean65 = point58.dominates(point64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 10);
        boolean boolean69 = point58.dominates(point68);
        boolean boolean70 = point37.dominates(point58);
        int int71 = point37.getY();
        int int72 = point37.getX();
        int int73 = point37.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test2624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2624");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean58 = point51.dominates(point57);
        boolean boolean59 = point38.dominates(point51);
        boolean boolean60 = point2.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean64 = point38.dominates(point63);
        int int65 = point63.getX();
        int int66 = point63.getX();
        int int67 = point63.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
    }

    @Test
    public void test2625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2625");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.produceSubSkyLines(pointList52);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertNotNull(pointList69);
        org.junit.Assert.assertNotNull(pointList70);
        org.junit.Assert.assertNotNull(pointList71);
    }

    @Test
    public void test2626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2626");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getX();
        int int6 = point2.getX();
        int int7 = point2.getY();
        int int8 = point2.getY();
        int int9 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        boolean boolean25 = point15.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        boolean boolean33 = point23.dominates(point31);
        int int34 = point31.getY();
        int int35 = point31.getX();
        int int36 = point31.getX();
        boolean boolean37 = point2.dominates(point31);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test2627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2627");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int17 = point16.getX();
        int int18 = point16.getX();
        int int19 = point16.getX();
        boolean boolean20 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point26.getY();
        int int29 = point26.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean33 = point26.dominates(point32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean37 = point26.dominates(point36);
        int int38 = point36.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int42 = point41.getX();
        int int43 = point41.getX();
        int int44 = point41.getX();
        int int45 = point41.getY();
        boolean boolean46 = point36.dominates(point41);
        int int47 = point36.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        int int55 = point53.getY();
        boolean boolean56 = point36.dominates(point53);
        boolean boolean57 = point16.dominates(point36);
        int int58 = point16.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test2628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2628");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        int int28 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) -1);
        int int32 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int36 = point35.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int40 = point39.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point43.getX();
        boolean boolean49 = point39.dominates(point43);
        int int50 = point39.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        int int58 = point56.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean65 = point61.dominates(point64);
        boolean boolean66 = point56.dominates(point64);
        int int67 = point64.getX();
        int int68 = point64.getX();
        boolean boolean69 = point39.dominates(point64);
        boolean boolean70 = point35.dominates(point39);
        int int71 = point35.getY();
        int int72 = point35.getY();
        int int73 = point35.getY();
        boolean boolean74 = point31.dominates(point35);
        boolean boolean75 = point2.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) ' ');
        int int79 = point78.getY();
        boolean boolean80 = point31.dominates(point78);
        int int81 = point31.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 32 + "'", int79 == 32);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
    }

    @Test
    public void test2629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2629");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        boolean boolean33 = point16.dominates(point22);
        boolean boolean34 = point2.dominates(point16);
        int int35 = point2.getY();
        int int36 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        boolean boolean46 = point42.dominates(point45);
        boolean boolean47 = point39.dominates(point45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 0);
        int int51 = point50.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int55 = point54.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int59 = point58.getY();
        boolean boolean60 = point54.dominates(point58);
        int int61 = point54.getY();
        boolean boolean62 = point50.dominates(point54);
        boolean boolean63 = point39.dominates(point54);
        boolean boolean64 = point2.dominates(point39);
        int int65 = point39.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 32 + "'", int51 == 32);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 32 + "'", int59 == 32);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
    }

    @Test
    public void test2630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2630");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point7.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        boolean boolean40 = point30.dominates(point38);
        int int41 = point38.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int45 = point44.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point48.getX();
        boolean boolean54 = point44.dominates(point48);
        boolean boolean55 = point38.dominates(point44);
        boolean boolean56 = point24.dominates(point38);
        boolean boolean57 = point7.dominates(point24);
        boolean boolean58 = point2.dominates(point7);
        int int59 = point7.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 97 + "'", int59 == 97);
    }

    @Test
    public void test2631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2631");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 1);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean16 = point9.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean20 = point9.dominates(point19);
        int int21 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point9.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int33 = point32.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        int int41 = point36.getX();
        boolean boolean42 = point32.dominates(point36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int46 = point45.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        int int54 = point49.getX();
        boolean boolean55 = point45.dominates(point49);
        int int56 = point49.getX();
        boolean boolean57 = point32.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int61 = point60.getX();
        int int62 = point60.getY();
        boolean boolean63 = point32.dominates(point60);
        boolean boolean64 = point9.dominates(point32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (int) 'a');
        boolean boolean68 = point9.dominates(point67);
        boolean boolean69 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, 52);
        boolean boolean73 = point9.dominates(point72);
        int int74 = point72.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (-1));
        boolean boolean78 = point72.dominates(point77);
        int int79 = point72.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
    }

    @Test
    public void test2632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2632");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int21 = point20.getX();
        int int22 = point20.getX();
        int int23 = point20.getX();
        int int24 = point20.getY();
        boolean boolean25 = point15.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int29 = point28.getX();
        int int30 = point28.getX();
        boolean boolean31 = point20.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point20.dominates(point37);
        int int40 = point20.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test2633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2633");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point5.getX();
        boolean boolean11 = point2.dominates(point5);
        int int12 = point5.getY();
        int int13 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, 10);
        boolean boolean17 = point5.dominates(point16);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2634");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList2 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList3 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList4 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point8 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList14, pointArray13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm16.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm5.produceFinalSkyLine(pointList14, pointList17);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm5.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm5.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList21 = skylineAlgorithm5.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList22 = skylineAlgorithm5.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point26 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList32, pointArray31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm34.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm23.produceFinalSkyLine(pointList32, pointList35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point40 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList46, pointArray45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm48.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm37.produceFinalSkyLine(pointList46, pointList49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point54 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList60, pointArray59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm51.produceFinalSkyLine(pointList60, pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm23.produceFinalSkyLine(pointList50, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean73 = point69.dominates(point72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point69 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList75, pointArray74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm77.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm66.produceFinalSkyLine(pointList75, pointList78);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm23.produceSubSkyLines(pointList75);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm81.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm5.produceFinalSkyLine(pointList80, pointList82);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm0.produceSubSkyLines(pointList83);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(pointList2);
        org.junit.Assert.assertNotNull(pointList3);
        org.junit.Assert.assertNotNull(pointList4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(pointArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertNotNull(pointList21);
        org.junit.Assert.assertNotNull(pointList22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(pointArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(pointArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(pointArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(pointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
    }

    @Test
    public void test2635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2635");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int11 = point10.getY();
        int int12 = point10.getY();
        int int13 = point10.getY();
        boolean boolean14 = point2.dominates(point10);
        java.lang.Class<?> wildcardClass15 = point10.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2636");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        int int9 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int13 = point12.getX();
        int int14 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int18 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point21.getX();
        boolean boolean27 = point17.dominates(point21);
        int int28 = point17.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        boolean boolean44 = point34.dominates(point42);
        int int45 = point42.getX();
        int int46 = point42.getX();
        boolean boolean47 = point17.dominates(point42);
        int int48 = point17.getX();
        boolean boolean49 = point12.dominates(point17);
        boolean boolean50 = point5.dominates(point17);
        int int51 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) -1);
        boolean boolean55 = point17.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        int int64 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean68 = point61.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean72 = point61.dominates(point71);
        boolean boolean73 = point17.dominates(point71);
        int int74 = point17.getX();
        int int75 = point17.getX();
        int int76 = point17.getY();
        int int77 = point17.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 52 + "'", int76 == 52);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test2637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2637");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int3 = point2.getY();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) -1);
        boolean boolean8 = point2.dominates(point7);
        java.lang.Class<?> wildcardClass9 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2638");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList21 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList22 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point28 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList34, pointArray33);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm36.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = skylineAlgorithm25.produceFinalSkyLine(pointList34, pointList37);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList39 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm25.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point49 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList55, pointArray54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm57.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm46.produceFinalSkyLine(pointList55, pointList58);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm45.produceSubSkyLines(pointList55);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm25.produceSubSkyLines(pointList55);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm0.produceSubSkyLines(pointList61);
        java.lang.Class<?> wildcardClass63 = pointList62.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertNotNull(pointList21);
        org.junit.Assert.assertNotNull(pointList22);
        org.junit.Assert.assertNotNull(pointList23);
        org.junit.Assert.assertNotNull(pointList24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(pointArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertNotNull(pointList38);
        org.junit.Assert.assertNotNull(pointList39);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(pointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2639");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getX();
        int int8 = point2.getY();
        int int9 = point2.getX();
        int int10 = point2.getY();
        int int11 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test2640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2640");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point36 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList42, pointArray41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm44.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm33.produceFinalSkyLine(pointList42, pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm33.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point52 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList58, pointArray57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm60.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm49.produceFinalSkyLine(pointList58, pointList61);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm33.produceSubSkyLines(pointList58);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm33.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean73 = point69.dominates(point72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point69 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList75, pointArray74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm77.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm66.produceFinalSkyLine(pointList75, pointList78);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm65.produceSubSkyLines(pointList75);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean88 = point84.dominates(point87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point84 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList90, pointArray89);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm92 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm92.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm81.produceFinalSkyLine(pointList90, pointList93);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm65.produceSubSkyLines(pointList94);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm33.produceSubSkyLines(pointList94);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.produceSubSkyLines(pointList96);
        java.lang.Class<?> wildcardClass98 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(pointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(pointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(pointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(pointArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2641");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        boolean boolean8 = point2.dominates(point5);
        int int9 = point2.getX();
        int int10 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int14 = point13.getX();
        int int15 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int19 = point18.getX();
        boolean boolean20 = point13.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) 'a');
        boolean boolean24 = point18.dominates(point23);
        boolean boolean25 = point2.dominates(point18);
        int int26 = point2.getX();
        int int27 = point2.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test2642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2642");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        boolean boolean25 = point5.dominates(point20);
        int int26 = point5.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test2643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2643");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        boolean boolean8 = point2.dominates(point5);
        int int9 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int13 = point12.getX();
        int int14 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int18 = point17.getX();
        int int19 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        int int28 = point25.getX();
        boolean boolean29 = point17.dominates(point25);
        int int30 = point17.getX();
        int int31 = point17.getX();
        boolean boolean32 = point12.dominates(point17);
        int int33 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int37 = point36.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int41 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point44.getX();
        boolean boolean50 = point40.dominates(point44);
        int int51 = point40.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        int int59 = point57.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean66 = point62.dominates(point65);
        boolean boolean67 = point57.dominates(point65);
        int int68 = point65.getX();
        int int69 = point65.getX();
        boolean boolean70 = point40.dominates(point65);
        boolean boolean71 = point36.dominates(point40);
        boolean boolean72 = point17.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int76 = point75.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean80 = point75.dominates(point79);
        int int81 = point79.getX();
        boolean boolean82 = point40.dominates(point79);
        boolean boolean83 = point2.dominates(point79);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        boolean boolean87 = point2.dominates(point86);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test2644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2644");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 52);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test2645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2645");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 1);
        int int6 = point5.getX();
        boolean boolean7 = point2.dominates(point5);
        int int8 = point5.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test2646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2646");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int9 = point8.getX();
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean14 = point8.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        int int25 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean29 = point22.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int33 = point32.getY();
        boolean boolean34 = point28.dominates(point32);
        int int35 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int39 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point45.getY();
        int int48 = point45.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean52 = point45.dominates(point51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean56 = point45.dominates(point55);
        int int57 = point55.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int61 = point60.getX();
        int int62 = point60.getX();
        int int63 = point60.getX();
        int int64 = point60.getY();
        boolean boolean65 = point55.dominates(point60);
        int int66 = point60.getY();
        boolean boolean67 = point38.dominates(point60);
        int int68 = point60.getY();
        boolean boolean69 = point32.dominates(point60);
        boolean boolean70 = point5.dominates(point32);
        int int71 = point32.getY();
        boolean boolean72 = point2.dominates(point32);
        int int73 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean83 = point79.dominates(point82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) ' ');
        int int87 = point86.getX();
        boolean boolean88 = point82.dominates(point86);
        boolean boolean89 = point76.dominates(point82);
        boolean boolean90 = point32.dominates(point76);
        int int91 = point32.getY();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 97 + "'", int71 == 97);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 97 + "'", int73 == 97);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 97 + "'", int91 == 97);
    }

    @Test
    public void test2647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2647");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        int int26 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean30 = point23.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean34 = point23.dominates(point33);
        int int35 = point33.getX();
        int int36 = point33.getX();
        int int37 = point33.getX();
        boolean boolean38 = point5.dominates(point33);
        int int39 = point33.getX();
        int int40 = point33.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test2648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2648");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        int int13 = point9.getY();
        boolean boolean14 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 0);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        int int29 = point27.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        boolean boolean37 = point27.dominates(point35);
        int int38 = point27.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int42 = point41.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        int int50 = point45.getX();
        boolean boolean51 = point41.dominates(point45);
        int int52 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        boolean boolean68 = point58.dominates(point66);
        int int69 = point66.getX();
        int int70 = point66.getX();
        boolean boolean71 = point41.dominates(point66);
        int int72 = point66.getY();
        boolean boolean73 = point27.dominates(point66);
        int int74 = point66.getY();
        boolean boolean75 = point17.dominates(point66);
        int int76 = point66.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) 'a');
        boolean boolean83 = point79.dominates(point82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) '4');
        boolean boolean87 = point82.dominates(point86);
        boolean boolean88 = point66.dominates(point82);
        boolean boolean89 = point2.dominates(point82);
        int int90 = point2.getX();
        java.lang.Class<?> wildcardClass91 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2649");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) '#');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int6 = point5.getY();
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        int int18 = point16.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        boolean boolean26 = point16.dominates(point24);
        boolean boolean27 = point10.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int31 = point30.getX();
        int int32 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getX();
        boolean boolean42 = point30.dominates(point38);
        boolean boolean43 = point24.dominates(point38);
        boolean boolean44 = point5.dominates(point24);
        int int45 = point5.getX();
        boolean boolean46 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 0);
        int int50 = point49.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        int int58 = point56.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean65 = point61.dominates(point64);
        boolean boolean66 = point56.dominates(point64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int70 = point69.getY();
        boolean boolean71 = point56.dominates(point69);
        int int72 = point69.getX();
        boolean boolean73 = point49.dominates(point69);
        boolean boolean74 = point5.dominates(point49);
        int int75 = point49.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 32 + "'", int50 == 32);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test2650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2650");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean19 = point8.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        int int28 = point25.getY();
        boolean boolean29 = point8.dominates(point25);
        boolean boolean30 = point2.dominates(point25);
        int int31 = point25.getX();
        int int32 = point25.getY();
        java.lang.Class<?> wildcardClass33 = point25.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test2651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2651");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) (byte) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', (int) '#');
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getY();
        int int8 = point2.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
    }

    @Test
    public void test2652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2652");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean15 = point8.dominates(point14);
        boolean boolean16 = point2.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        boolean boolean35 = point25.dominates(point33);
        int int36 = point33.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int40 = point39.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point43.getX();
        boolean boolean49 = point39.dominates(point43);
        boolean boolean50 = point33.dominates(point39);
        boolean boolean51 = point19.dominates(point33);
        boolean boolean52 = point2.dominates(point19);
        int int53 = point19.getY();
        int int54 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int58 = point57.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean62 = point57.dominates(point61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        int int70 = point68.getY();
        int int71 = point68.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean75 = point68.dominates(point74);
        int int76 = point68.getY();
        boolean boolean77 = point57.dominates(point68);
        boolean boolean78 = point19.dominates(point57);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test2653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2653");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        boolean boolean21 = point2.dominates(point18);
        int int22 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int26 = point25.getX();
        int int27 = point25.getY();
        boolean boolean28 = point18.dominates(point25);
        int int29 = point18.getX();
        int int30 = point18.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test2654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2654");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getY();
        java.lang.Class<?> wildcardClass19 = point15.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 32 + "'", int17 == 32);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test2655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2655");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        int int30 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        int int38 = point36.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        boolean boolean46 = point36.dominates(point44);
        int int47 = point44.getX();
        int int48 = point44.getX();
        boolean boolean49 = point19.dominates(point44);
        int int50 = point44.getY();
        boolean boolean51 = point5.dominates(point44);
        int int52 = point44.getY();
        int int53 = point44.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean63 = point59.dominates(point62);
        int int64 = point62.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        boolean boolean72 = point62.dominates(point70);
        boolean boolean73 = point56.dominates(point70);
        int int74 = point56.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) '4');
        boolean boolean78 = point56.dominates(point77);
        boolean boolean79 = point44.dominates(point56);
        int int80 = point56.getY();
        int int81 = point56.getY();
        int int82 = point56.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test2656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2656");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int9 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean13 = point8.dominates(point12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        int int22 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean26 = point19.dominates(point25);
        boolean boolean27 = point8.dominates(point19);
        boolean boolean28 = point2.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        int int40 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean44 = point37.dominates(point43);
        boolean boolean45 = point31.dominates(point43);
        boolean boolean46 = point8.dominates(point31);
        int int47 = point31.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 97 + "'", int47 == 97);
    }

    @Test
    public void test2657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2657");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList21 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point25 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList31, pointArray30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm22.produceFinalSkyLine(pointList31, pointList34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point39 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList45, pointArray44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm36.produceFinalSkyLine(pointList45, pointList48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point54 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList60, pointArray59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm51.produceFinalSkyLine(pointList60, pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm50.produceSubSkyLines(pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean73 = point69.dominates(point72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point69 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList75, pointArray74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm77.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm66.produceFinalSkyLine(pointList75, pointList78);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm50.produceSubSkyLines(pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm22.produceFinalSkyLine(pointList45, pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.produceSubSkyLines(pointList81);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertNotNull(pointList21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(pointArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(pointArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(pointArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(pointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
    }

    @Test
    public void test2658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2658");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        int int23 = point20.getY();
        boolean boolean24 = point6.dominates(point20);
        int int25 = point6.getY();
        boolean boolean26 = point2.dominates(point6);
        int int27 = point2.getY();
        int int28 = point2.getY();
        int int29 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
    }

    @Test
    public void test2659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2659");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        int int22 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        boolean boolean38 = point28.dominates(point36);
        int int39 = point36.getX();
        int int40 = point36.getX();
        boolean boolean41 = point11.dominates(point36);
        boolean boolean42 = point7.dominates(point11);
        int int43 = point11.getY();
        boolean boolean44 = point2.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point50.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        boolean boolean60 = point50.dominates(point58);
        int int61 = point50.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int65 = point64.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        int int73 = point68.getX();
        boolean boolean74 = point64.dominates(point68);
        int int75 = point64.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean82 = point78.dominates(point81);
        int int83 = point81.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean90 = point86.dominates(point89);
        boolean boolean91 = point81.dominates(point89);
        int int92 = point89.getX();
        int int93 = point89.getX();
        boolean boolean94 = point64.dominates(point89);
        int int95 = point89.getY();
        boolean boolean96 = point50.dominates(point89);
        boolean boolean97 = point11.dominates(point50);
        int int98 = point11.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 52 + "'", int75 == 52);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 52 + "'", int98 == 52);
    }

    @Test
    public void test2660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2660");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, 0);
        boolean boolean20 = point16.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point26.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        boolean boolean36 = point26.dominates(point34);
        int int37 = point34.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int41 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point44.getX();
        boolean boolean50 = point40.dominates(point44);
        boolean boolean51 = point34.dominates(point40);
        int int52 = point40.getY();
        boolean boolean53 = point19.dominates(point40);
        int int54 = point40.getX();
        int int55 = point40.getY();
        boolean boolean56 = point8.dominates(point40);
        boolean boolean57 = point2.dominates(point40);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test2661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2661");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) 100);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int7 = point6.getX();
        int int8 = point6.getY();
        int int9 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int13 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean17 = point12.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        int int26 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean30 = point23.dominates(point29);
        boolean boolean31 = point12.dominates(point23);
        boolean boolean32 = point6.dominates(point12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point41.getY();
        int int44 = point41.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean48 = point41.dominates(point47);
        boolean boolean49 = point35.dominates(point47);
        boolean boolean50 = point12.dominates(point35);
        boolean boolean51 = point2.dominates(point12);
        int int52 = point12.getY();
        int int53 = point12.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test2662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2662");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        int int24 = point21.getY();
        int int25 = point21.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int29 = point28.getX();
        int int30 = point28.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        int int38 = point36.getY();
        int int39 = point36.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean43 = point36.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean47 = point36.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getX();
        int int50 = point46.getX();
        boolean boolean51 = point28.dominates(point46);
        boolean boolean52 = point21.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int56 = point55.getX();
        int int57 = point55.getY();
        int int58 = point55.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int62 = point61.getY();
        boolean boolean63 = point55.dominates(point61);
        int int64 = point61.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (byte) -1);
        int int68 = point67.getX();
        boolean boolean69 = point61.dominates(point67);
        boolean boolean70 = point21.dominates(point61);
        java.lang.Class<?> wildcardClass71 = point61.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 32 + "'", int48 == 32);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2663");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) (short) 100);
        int int3 = point2.getY();
        int int4 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test2664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2664");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point26.getY();
        int int29 = point26.getY();
        int int30 = point26.getY();
        boolean boolean31 = point19.dominates(point26);
        int int32 = point26.getX();
        boolean boolean33 = point15.dominates(point26);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test2665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2665");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int8 = point7.getX();
        boolean boolean9 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int13 = point12.getY();
        boolean boolean14 = point7.dominates(point12);
        int int15 = point12.getX();
        int int16 = point12.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
    }

    @Test
    public void test2666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2666");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        int int21 = point16.getY();
        int int22 = point16.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 52);
        boolean boolean26 = point16.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        boolean boolean45 = point35.dominates(point43);
        int int46 = point43.getY();
        boolean boolean47 = point29.dominates(point43);
        int int48 = point43.getY();
        int int49 = point43.getY();
        int int50 = point43.getY();
        boolean boolean51 = point25.dominates(point43);
        int int52 = point43.getX();
        java.lang.Class<?> wildcardClass53 = point43.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test2667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2667");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getX();
        int int6 = point2.getY();
        int int7 = point2.getX();
        int int8 = point2.getX();
        int int9 = point2.getY();
        int int10 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
    }

    @Test
    public void test2668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2668");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) -1);
        boolean boolean10 = point6.dominates(point9);
        boolean boolean11 = point2.dominates(point9);
        int int12 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test2669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2669");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) -1);
        boolean boolean10 = point6.dominates(point9);
        boolean boolean11 = point2.dominates(point9);
        int int12 = point2.getX();
        java.lang.Class<?> wildcardClass13 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2670");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int7 = point6.getX();
        boolean boolean8 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        int int22 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int26 = point25.getX();
        int int27 = point25.getX();
        int int28 = point25.getX();
        boolean boolean29 = point11.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, 1);
        int int33 = point32.getX();
        boolean boolean34 = point25.dominates(point32);
        int int35 = point32.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int39 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean43 = point38.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        int int51 = point49.getY();
        int int52 = point49.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean56 = point49.dominates(point55);
        boolean boolean57 = point38.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int61 = point60.getX();
        int int62 = point60.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        int int70 = point68.getY();
        int int71 = point68.getX();
        boolean boolean72 = point60.dominates(point68);
        int int73 = point68.getX();
        int int74 = point68.getY();
        boolean boolean75 = point49.dominates(point68);
        int int76 = point68.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 1);
        boolean boolean80 = point68.dominates(point79);
        boolean boolean81 = point32.dominates(point79);
        boolean boolean82 = point6.dominates(point79);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test2671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2671");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) (short) 10);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 97);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int11 = point10.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int15 = point14.getX();
        int int16 = point14.getX();
        int int17 = point14.getX();
        int int18 = point14.getY();
        int int19 = point14.getY();
        boolean boolean20 = point10.dominates(point14);
        int int21 = point10.getY();
        boolean boolean22 = point6.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int26 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point29.getX();
        boolean boolean35 = point25.dominates(point29);
        int int36 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        boolean boolean52 = point42.dominates(point50);
        int int53 = point50.getX();
        int int54 = point50.getX();
        boolean boolean55 = point25.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        int int64 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean68 = point61.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean75 = point71.dominates(point74);
        int int76 = point74.getY();
        int int77 = point74.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean81 = point74.dominates(point80);
        boolean boolean82 = point61.dominates(point74);
        boolean boolean83 = point25.dominates(point61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean87 = point61.dominates(point86);
        boolean boolean88 = point10.dominates(point86);
        boolean boolean89 = point2.dominates(point10);
        int int90 = point10.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point93 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) 'a');
        int int94 = point93.getY();
        int int95 = point93.getX();
        boolean boolean96 = point10.dominates(point93);
        java.lang.Class<?> wildcardClass97 = point10.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 97 + "'", int94 == 97);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2672");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean16 = point9.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean20 = point9.dominates(point19);
        int int21 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int25 = point24.getX();
        int int26 = point24.getX();
        int int27 = point24.getX();
        int int28 = point24.getY();
        boolean boolean29 = point19.dominates(point24);
        int int30 = point24.getY();
        boolean boolean31 = point2.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int35 = point34.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point38.getX();
        boolean boolean44 = point34.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int48 = point47.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        int int56 = point51.getX();
        boolean boolean57 = point47.dominates(point51);
        int int58 = point51.getX();
        boolean boolean59 = point34.dominates(point51);
        int int60 = point34.getX();
        boolean boolean61 = point24.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int65 = point64.getX();
        int int66 = point64.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int70 = point69.getX();
        boolean boolean71 = point64.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) 'a');
        boolean boolean75 = point69.dominates(point74);
        int int76 = point74.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int80 = point79.getX();
        int int81 = point79.getY();
        int int82 = point79.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int86 = point85.getY();
        boolean boolean87 = point79.dominates(point85);
        int int88 = point85.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point91 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (byte) -1);
        int int92 = point91.getX();
        boolean boolean93 = point85.dominates(point91);
        boolean boolean94 = point74.dominates(point91);
        int int95 = point91.getY();
        boolean boolean96 = point24.dominates(point91);
        java.lang.Class<?> wildcardClass97 = point24.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 100 + "'", int88 == 100);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2673");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.produceSubSkyLines(pointList41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm0.produceFinalSkyLine(pointList41, pointList50);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass56 = pointList55.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertNotNull(pointList54);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test2674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2674");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        int int17 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        boolean boolean33 = point23.dominates(point31);
        int int34 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int38 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point41.getX();
        boolean boolean47 = point37.dominates(point41);
        boolean boolean48 = point31.dominates(point37);
        int int49 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        int int57 = point55.getY();
        int int58 = point55.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean62 = point55.dominates(point61);
        boolean boolean63 = point37.dominates(point55);
        boolean boolean64 = point13.dominates(point55);
        int int65 = point13.getX();
        int int66 = point13.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test2675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2675");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) '4');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        int int17 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int21 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean25 = point20.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point31.getY();
        int int34 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean38 = point31.dominates(point37);
        boolean boolean39 = point20.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int43 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean47 = point42.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        int int55 = point53.getY();
        int int56 = point53.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean60 = point53.dominates(point59);
        boolean boolean61 = point42.dominates(point53);
        boolean boolean62 = point20.dominates(point42);
        boolean boolean63 = point9.dominates(point42);
        int int64 = point42.getX();
        boolean boolean65 = point2.dominates(point42);
        int int66 = point2.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test2676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2676");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 1);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        boolean boolean9 = point2.dominates(point8);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2677");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point33.dominates(point46);
        boolean boolean55 = point19.dominates(point46);
        int int56 = point19.getX();
        int int57 = point19.getX();
        int int58 = point19.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test2678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2678");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int7 = point6.getX();
        int int8 = point6.getY();
        int int9 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int13 = point12.getY();
        boolean boolean14 = point6.dominates(point12);
        int int15 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        int int23 = point21.getY();
        int int24 = point21.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean28 = point21.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point34.getY();
        int int37 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean41 = point34.dominates(point40);
        boolean boolean42 = point21.dominates(point34);
        boolean boolean43 = point12.dominates(point34);
        int int44 = point34.getY();
        boolean boolean45 = point2.dominates(point34);
        int int46 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
    }

    @Test
    public void test2679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2679");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) (byte) 100);
        int int6 = point5.getX();
        boolean boolean7 = point2.dominates(point5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2680");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        int int33 = point30.getX();
        int int34 = point30.getX();
        boolean boolean35 = point5.dominates(point30);
        int int36 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int40 = point39.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point43.getX();
        boolean boolean49 = point39.dominates(point43);
        int int50 = point39.getY();
        boolean boolean51 = point30.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 32);
        boolean boolean55 = point39.dominates(point54);
        boolean boolean56 = point2.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean66 = point62.dominates(point65);
        int int67 = point65.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean74 = point70.dominates(point73);
        boolean boolean75 = point65.dominates(point73);
        boolean boolean76 = point59.dominates(point73);
        int int77 = point59.getY();
        int int78 = point59.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int82 = point81.getY();
        int int83 = point81.getY();
        boolean boolean84 = point59.dominates(point81);
        int int85 = point81.getX();
        int int86 = point81.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        int int90 = point89.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point93 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        boolean boolean94 = point89.dominates(point93);
        int int95 = point89.getY();
        boolean boolean96 = point81.dominates(point89);
        boolean boolean97 = point54.dominates(point89);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 97 + "'", int85 == 97);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 97 + "'", int86 == 97);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 97 + "'", int90 == 97);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 97 + "'", int95 == 97);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test2681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2681");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList21 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point26 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList32, pointArray31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm34.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm23.produceFinalSkyLine(pointList32, pointList35);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm22.produceSubSkyLines(pointList32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList39 = skylineAlgorithm38.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point43 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList49, pointArray48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm51.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm40.produceFinalSkyLine(pointList49, pointList52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point57 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList63, pointArray62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm65.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm54.produceFinalSkyLine(pointList63, pointList66);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm38.produceFinalSkyLine(pointList53, pointList66);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm22.produceSubSkyLines(pointList68);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = skylineAlgorithm0.produceSubSkyLines(pointList69);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertNotNull(pointList21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(pointArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertNotNull(pointList39);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(pointArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(pointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertNotNull(pointList69);
        org.junit.Assert.assertNotNull(pointList70);
        org.junit.Assert.assertNotNull(pointList71);
        org.junit.Assert.assertNotNull(pointList72);
        org.junit.Assert.assertNotNull(pointList73);
        org.junit.Assert.assertNotNull(pointList74);
    }

    @Test
    public void test2682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2682");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 0);
        boolean boolean12 = point6.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int16 = point15.getY();
        boolean boolean17 = point6.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) 0);
        int int21 = point20.getX();
        boolean boolean22 = point15.dominates(point20);
        java.lang.Class<?> wildcardClass23 = point20.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test2683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2683");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 32);
        boolean boolean22 = point5.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (short) 1);
        int int26 = point25.getX();
        boolean boolean27 = point21.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) '4');
        int int31 = point30.getY();
        boolean boolean32 = point21.dominates(point30);
        int int33 = point30.getY();
        java.lang.Class<?> wildcardClass34 = point30.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test2684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2684");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean58 = point51.dominates(point57);
        boolean boolean59 = point38.dominates(point51);
        boolean boolean60 = point2.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        int int68 = point66.getY();
        int int69 = point66.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean73 = point66.dominates(point72);
        int int74 = point66.getY();
        boolean boolean75 = point2.dominates(point66);
        int int76 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 52);
        boolean boolean80 = point2.dominates(point79);
        java.lang.Class<?> wildcardClass81 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2685");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (-1));
        boolean boolean19 = point13.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int23 = point22.getX();
        int int24 = point22.getX();
        int int25 = point22.getX();
        int int26 = point22.getY();
        int int27 = point22.getY();
        boolean boolean28 = point13.dominates(point22);
        int int29 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int36 = point35.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point39.getX();
        boolean boolean45 = point35.dominates(point39);
        int int46 = point39.getX();
        boolean boolean47 = point32.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point39.dominates(point50);
        boolean boolean52 = point22.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        int int61 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean65 = point58.dominates(point64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean69 = point58.dominates(point68);
        int int70 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int74 = point73.getX();
        boolean boolean75 = point58.dominates(point73);
        int int76 = point58.getY();
        boolean boolean77 = point39.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int81 = point80.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean88 = point84.dominates(point87);
        int int89 = point84.getX();
        boolean boolean90 = point80.dominates(point84);
        int int91 = point84.getX();
        int int92 = point84.getY();
        boolean boolean93 = point58.dominates(point84);
        java.lang.Class<?> wildcardClass94 = point58.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2686");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int6 = point5.getX();
        int int7 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int11 = point10.getX();
        boolean boolean12 = point5.dominates(point10);
        boolean boolean13 = point2.dominates(point5);
        int int14 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        boolean boolean30 = point20.dominates(point28);
        int int31 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int35 = point34.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point38.getX();
        boolean boolean44 = point34.dominates(point38);
        int int45 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean60 = point56.dominates(point59);
        boolean boolean61 = point51.dominates(point59);
        int int62 = point59.getX();
        int int63 = point59.getX();
        boolean boolean64 = point34.dominates(point59);
        int int65 = point59.getY();
        boolean boolean66 = point20.dominates(point59);
        int int67 = point59.getY();
        int int68 = point59.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean78 = point74.dominates(point77);
        int int79 = point77.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        boolean boolean87 = point77.dominates(point85);
        boolean boolean88 = point71.dominates(point85);
        int int89 = point71.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point92 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) '4');
        boolean boolean93 = point71.dominates(point92);
        boolean boolean94 = point59.dominates(point71);
        int int95 = point71.getY();
        int int96 = point71.getY();
        boolean boolean97 = point5.dominates(point71);
        int int98 = point71.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 35 + "'", int89 == 35);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 35 + "'", int98 == 35);
    }

    @Test
    public void test2687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2687");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point38 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList44, pointArray43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm35.produceFinalSkyLine(pointList44, pointList47);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm34.produceSubSkyLines(pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm0.produceSubSkyLines(pointList49);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass53 = pointList52.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(pointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test2688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2688");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        boolean boolean21 = point2.dominates(point18);
        int int22 = point18.getY();
        int int23 = point18.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test2689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2689");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point2.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int25 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean29 = point24.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        int int38 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean42 = point35.dominates(point41);
        boolean boolean43 = point24.dominates(point35);
        boolean boolean44 = point2.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int48 = point47.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        int int59 = point57.getY();
        int int60 = point57.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int64 = point63.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        int int72 = point67.getX();
        boolean boolean73 = point63.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int77 = point76.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean84 = point80.dominates(point83);
        int int85 = point80.getX();
        boolean boolean86 = point76.dominates(point80);
        int int87 = point80.getX();
        boolean boolean88 = point63.dominates(point80);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point91 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int92 = point91.getX();
        int int93 = point91.getY();
        boolean boolean94 = point63.dominates(point91);
        boolean boolean95 = point57.dominates(point91);
        boolean boolean96 = point51.dominates(point91);
        boolean boolean97 = point47.dominates(point51);
        boolean boolean98 = point2.dominates(point47);
        int int99 = point47.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 52 + "'", int93 == 52);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 52 + "'", int99 == 52);
    }

    @Test
    public void test2690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2690");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int12 = point11.getX();
        int int13 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean17 = point11.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        int int28 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean32 = point25.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int36 = point35.getY();
        boolean boolean37 = point31.dominates(point35);
        int int38 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int42 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        int int50 = point48.getY();
        int int51 = point48.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean55 = point48.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean59 = point48.dominates(point58);
        int int60 = point58.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int64 = point63.getX();
        int int65 = point63.getX();
        int int66 = point63.getX();
        int int67 = point63.getY();
        boolean boolean68 = point58.dominates(point63);
        int int69 = point63.getY();
        boolean boolean70 = point41.dominates(point63);
        int int71 = point63.getY();
        boolean boolean72 = point35.dominates(point63);
        boolean boolean73 = point8.dominates(point35);
        int int74 = point35.getY();
        boolean boolean75 = point5.dominates(point35);
        boolean boolean76 = point2.dominates(point35);
        int int77 = point35.getX();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 97 + "'", int74 == 97);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test2691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2691");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point33.dominates(point46);
        boolean boolean55 = point19.dominates(point46);
        int int56 = point46.getY();
        int int57 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int61 = point60.getY();
        int int62 = point60.getY();
        int int63 = point60.getY();
        boolean boolean64 = point46.dominates(point60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 35);
        int int68 = point67.getY();
        boolean boolean69 = point46.dominates(point67);
        int int70 = point46.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
    }

    @Test
    public void test2692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2692");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int8 = point7.getX();
        boolean boolean9 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) 'a');
        boolean boolean13 = point7.dominates(point12);
        int int14 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int18 = point17.getX();
        int int19 = point17.getY();
        int int20 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int24 = point23.getY();
        boolean boolean25 = point17.dominates(point23);
        int int26 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (byte) -1);
        int int30 = point29.getX();
        boolean boolean31 = point23.dominates(point29);
        boolean boolean32 = point12.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        int int50 = point48.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        boolean boolean58 = point48.dominates(point56);
        int int59 = point56.getX();
        int int60 = point56.getX();
        int int61 = point56.getY();
        boolean boolean62 = point42.dominates(point56);
        int int63 = point56.getX();
        boolean boolean64 = point38.dominates(point56);
        boolean boolean65 = point29.dominates(point38);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test2693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2693");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) '4');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        int int17 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int21 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean25 = point20.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point31.getY();
        int int34 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean38 = point31.dominates(point37);
        boolean boolean39 = point20.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int43 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean47 = point42.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        int int55 = point53.getY();
        int int56 = point53.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean60 = point53.dominates(point59);
        boolean boolean61 = point42.dominates(point53);
        boolean boolean62 = point20.dominates(point42);
        boolean boolean63 = point9.dominates(point42);
        int int64 = point42.getX();
        boolean boolean65 = point2.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, 97);
        int int69 = point68.getY();
        int int70 = point68.getX();
        boolean boolean71 = point2.dominates(point68);
        int int72 = point68.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
    }

    @Test
    public void test2694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2694");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point10.getX();
        boolean boolean16 = point6.dominates(point10);
        int int17 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        boolean boolean33 = point23.dominates(point31);
        int int34 = point31.getX();
        int int35 = point31.getX();
        boolean boolean36 = point6.dominates(point31);
        boolean boolean37 = point2.dominates(point6);
        int int38 = point2.getX();
        int int39 = point2.getX();
        java.lang.Class<?> wildcardClass40 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2695");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point29.dominates(point37);
        int int40 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int44 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point47.getX();
        boolean boolean53 = point43.dominates(point47);
        boolean boolean54 = point37.dominates(point43);
        boolean boolean55 = point23.dominates(point37);
        boolean boolean56 = point16.dominates(point37);
        int int57 = point16.getX();
        int int58 = point16.getY();
        int int59 = point16.getY();
        java.lang.Class<?> wildcardClass60 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2696");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList21 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point26 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList32, pointArray31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm34.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm23.produceFinalSkyLine(pointList32, pointList35);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm22.produceSubSkyLines(pointList32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList39 = skylineAlgorithm38.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point43 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList49, pointArray48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm51.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm40.produceFinalSkyLine(pointList49, pointList52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point57 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList63, pointArray62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm65.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm54.produceFinalSkyLine(pointList63, pointList66);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm38.produceFinalSkyLine(pointList53, pointList66);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm22.produceSubSkyLines(pointList68);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = skylineAlgorithm0.produceSubSkyLines(pointList69);
        java.lang.Class<?> wildcardClass71 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertNotNull(pointList21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(pointArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertNotNull(pointList39);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(pointArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(pointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertNotNull(pointList69);
        org.junit.Assert.assertNotNull(pointList70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2697");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
    }

    @Test
    public void test2698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2698");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point5.getX();
        int int11 = point5.getY();
        int int12 = point5.getX();
        int int13 = point5.getX();
        int int14 = point5.getX();
        boolean boolean15 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int19 = point18.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean23 = point18.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        int int32 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean36 = point29.dominates(point35);
        boolean boolean37 = point18.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int41 = point40.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean45 = point40.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean58 = point51.dominates(point57);
        boolean boolean59 = point40.dominates(point51);
        boolean boolean60 = point18.dominates(point40);
        int int61 = point40.getX();
        boolean boolean62 = point2.dominates(point40);
        int int63 = point40.getY();
        int int64 = point40.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test2699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2699");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int9 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point12.getX();
        boolean boolean18 = point8.dominates(point12);
        int int19 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        boolean boolean35 = point25.dominates(point33);
        int int36 = point33.getX();
        int int37 = point33.getX();
        boolean boolean38 = point8.dominates(point33);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point44.getY();
        int int47 = point44.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean51 = point44.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        int int59 = point57.getY();
        int int60 = point57.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean64 = point57.dominates(point63);
        boolean boolean65 = point44.dominates(point57);
        boolean boolean66 = point8.dominates(point44);
        boolean boolean67 = point5.dominates(point8);
        int int68 = point8.getX();
        int int69 = point8.getX();
        boolean boolean70 = point2.dominates(point8);
        int int71 = point2.getX();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
    }

    @Test
    public void test2700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2700");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        boolean boolean33 = point16.dominates(point22);
        boolean boolean34 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) '#');
        int int38 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point47.getY();
        int int50 = point47.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean54 = point47.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) '4');
        boolean boolean58 = point53.dominates(point57);
        boolean boolean59 = point41.dominates(point53);
        int int60 = point41.getY();
        boolean boolean61 = point37.dominates(point41);
        boolean boolean62 = point2.dominates(point41);
        int int63 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
    }

    @Test
    public void test2701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2701");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, 32);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
    }

    @Test
    public void test2702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2702");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point33.dominates(point46);
        boolean boolean55 = point19.dominates(point46);
        int int56 = point46.getY();
        int int57 = point46.getY();
        int int58 = point46.getX();
        int int59 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean66 = point62.dominates(point65);
        int int67 = point65.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean74 = point70.dominates(point73);
        boolean boolean75 = point65.dominates(point73);
        int int76 = point73.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int80 = point79.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean87 = point83.dominates(point86);
        int int88 = point83.getX();
        boolean boolean89 = point79.dominates(point83);
        boolean boolean90 = point73.dominates(point79);
        int int91 = point79.getX();
        boolean boolean92 = point46.dominates(point79);
        int int93 = point46.getX();
        java.lang.Class<?> wildcardClass94 = point46.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2703");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, 10);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2704");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int18 = point17.getX();
        boolean boolean19 = point2.dominates(point17);
        int int20 = point2.getX();
        int int21 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test2705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2705");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 97);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int7 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int11 = point10.getX();
        int int12 = point10.getX();
        int int13 = point10.getX();
        int int14 = point10.getY();
        int int15 = point10.getY();
        boolean boolean16 = point6.dominates(point10);
        int int17 = point6.getY();
        boolean boolean18 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int22 = point21.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point25.getX();
        boolean boolean31 = point21.dominates(point25);
        int int32 = point21.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        boolean boolean48 = point38.dominates(point46);
        int int49 = point46.getX();
        int int50 = point46.getX();
        boolean boolean51 = point21.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        int int59 = point57.getY();
        int int60 = point57.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean64 = point57.dominates(point63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        int int72 = point70.getY();
        int int73 = point70.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean77 = point70.dominates(point76);
        boolean boolean78 = point57.dominates(point70);
        boolean boolean79 = point21.dominates(point57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean83 = point57.dominates(point82);
        boolean boolean84 = point6.dominates(point82);
        int int85 = point6.getX();
        java.lang.Class<?> wildcardClass86 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2706");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        int int14 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean18 = point11.dominates(point17);
        boolean boolean19 = point5.dominates(point17);
        int int20 = point17.getX();
        boolean boolean21 = point2.dominates(point17);
        int int22 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (byte) 100);
        int int26 = point25.getX();
        boolean boolean27 = point17.dominates(point25);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2707");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) '4');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        int int7 = point5.getX();
        int int8 = point5.getX();
        int int9 = point5.getY();
        boolean boolean10 = point2.dominates(point5);
        int int11 = point2.getX();
        int int12 = point2.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
    }

    @Test
    public void test2708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2708");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int16 = point15.getY();
        boolean boolean17 = point11.dominates(point15);
        int int18 = point11.getX();
        int int19 = point11.getY();
        int int20 = point11.getY();
        int int21 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        int int29 = point27.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        boolean boolean37 = point27.dominates(point35);
        int int38 = point35.getX();
        int int39 = point35.getX();
        boolean boolean40 = point11.dominates(point35);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2709");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        int int14 = point2.getY();
        java.lang.Class<?> wildcardClass15 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2710");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 0);
        boolean boolean12 = point6.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int16 = point15.getY();
        boolean boolean17 = point6.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) 0);
        int int21 = point20.getX();
        boolean boolean22 = point15.dominates(point20);
        int int23 = point15.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
    }

    @Test
    public void test2711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2711");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getY();
        int int17 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        int int26 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean30 = point23.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean34 = point23.dominates(point33);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 52);
        boolean boolean38 = point33.dominates(point37);
        boolean boolean39 = point13.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int43 = point42.getX();
        int int44 = point42.getX();
        boolean boolean45 = point13.dominates(point42);
        int int46 = point42.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test2712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2712");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.produceSubSkyLines(pointList52);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean68 = point64.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point64 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList70, pointArray69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm72.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm61.produceFinalSkyLine(pointList70, pointList73);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm60.produceSubSkyLines(pointList70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean83 = point79.dominates(point82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point79 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList85, pointArray84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm87.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm76.produceFinalSkyLine(pointList85, pointList88);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm60.produceSubSkyLines(pointList89);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm0.produceSubSkyLines(pointList90);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(pointArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(pointList73);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(pointArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
    }

    @Test
    public void test2713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2713");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', (int) (byte) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        int int33 = point30.getX();
        int int34 = point30.getX();
        boolean boolean35 = point5.dominates(point30);
        int int36 = point30.getY();
        int int37 = point30.getX();
        int int38 = point30.getY();
        int int39 = point30.getX();
        boolean boolean40 = point2.dominates(point30);
        int int41 = point2.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
    }

    @Test
    public void test2714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2714");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean16 = point9.dominates(point15);
        int int17 = point9.getY();
        int int18 = point9.getX();
        int int19 = point9.getX();
        boolean boolean20 = point2.dominates(point9);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2715");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point8.getX();
        int int20 = point8.getY();
        boolean boolean21 = point2.dominates(point8);
        int int22 = point2.getY();
        int int23 = point2.getY();
        int int24 = point2.getX();
        int int25 = point2.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test2716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2716");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) 1);
    }

    @Test
    public void test2717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2717");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 10);
        int int3 = point2.getX();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int11 = point10.getX();
        int int12 = point10.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean16 = point10.dominates(point15);
        boolean boolean17 = point7.dominates(point15);
        int int18 = point7.getY();
        int int19 = point7.getX();
        boolean boolean20 = point2.dominates(point7);
        int int21 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
    }

    @Test
    public void test2718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2718");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int21 = point20.getX();
        boolean boolean22 = point5.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int26 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean30 = point25.dominates(point29);
        boolean boolean31 = point5.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        boolean boolean47 = point37.dominates(point45);
        int int48 = point37.getX();
        int int49 = point37.getY();
        boolean boolean50 = point5.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 35);
        boolean boolean54 = point5.dominates(point53);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test2719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2719");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm46.produceSubSkyLines(pointList56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm46.produceSubSkyLines(pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm18.produceFinalSkyLine(pointList41, pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.produceSubSkyLines(pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass83 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2720");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 1);
        boolean boolean17 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int24 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point27.getX();
        boolean boolean33 = point23.dominates(point27);
        int int34 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        int int42 = point40.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        boolean boolean50 = point40.dominates(point48);
        int int51 = point48.getX();
        int int52 = point48.getX();
        boolean boolean53 = point23.dominates(point48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean60 = point56.dominates(point59);
        int int61 = point59.getY();
        int int62 = point59.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean66 = point59.dominates(point65);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean73 = point69.dominates(point72);
        int int74 = point72.getY();
        int int75 = point72.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean79 = point72.dominates(point78);
        boolean boolean80 = point59.dominates(point72);
        boolean boolean81 = point23.dominates(point59);
        boolean boolean82 = point20.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point88 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean89 = point85.dominates(point88);
        int int90 = point88.getY();
        int int91 = point88.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point94 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean95 = point88.dominates(point94);
        boolean boolean96 = point23.dominates(point94);
        boolean boolean97 = point16.dominates(point94);
        int int98 = point16.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
    }

    @Test
    public void test2721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2721");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, 32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) '4');
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int11 = point10.getX();
        int int12 = point10.getY();
        boolean boolean13 = point2.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        boolean boolean17 = point10.dominates(point16);
        int int18 = point10.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
    }

    @Test
    public void test2722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2722");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean16 = point9.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean20 = point9.dominates(point19);
        int int21 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int25 = point24.getX();
        int int26 = point24.getX();
        int int27 = point24.getX();
        int int28 = point24.getY();
        boolean boolean29 = point19.dominates(point24);
        int int30 = point24.getY();
        boolean boolean31 = point2.dominates(point24);
        java.lang.Class<?> wildcardClass32 = point24.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test2723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2723");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) ' ');
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
    }

    @Test
    public void test2724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2724");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point37 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList43, pointArray42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm34.produceFinalSkyLine(pointList43, pointList46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm34.produceFinalSkyLine(pointList61, pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm0.produceSubSkyLines(pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass80 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(pointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test2725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2725");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        int int24 = point21.getX();
        int int25 = point21.getX();
        int int26 = point21.getY();
        int int27 = point21.getX();
        boolean boolean28 = point5.dominates(point21);
        java.lang.Class<?> wildcardClass29 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test2726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2726");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        int int20 = point16.getY();
        java.lang.Class<?> wildcardClass21 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test2727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2727");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) -1);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, 10);
        boolean boolean10 = point5.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int14 = point13.getX();
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        int int17 = point13.getX();
        int int18 = point13.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test2728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2728");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point23 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList29, pointArray28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm20.produceFinalSkyLine(pointList29, pointList32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point37 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList43, pointArray42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm34.produceFinalSkyLine(pointList43, pointList46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm20.produceFinalSkyLine(pointList47, pointList57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point66 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList72, pointArray71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm74.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm63.produceFinalSkyLine(pointList72, pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm20.produceSubSkyLines(pointList72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.produceSubSkyLines(pointList72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(pointArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(pointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(pointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
    }

    @Test
    public void test2729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2729");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 0);
        int int3 = point2.getX();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2730");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int7 = point6.getX();
        int int8 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int12 = point11.getX();
        boolean boolean13 = point6.dominates(point11);
        int int14 = point11.getY();
        int int15 = point11.getY();
        boolean boolean16 = point2.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 10);
        int int20 = point19.getX();
        boolean boolean21 = point2.dominates(point19);
        int int22 = point19.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
    }

    @Test
    public void test2731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2731");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) (short) 1);
        int int3 = point2.getY();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean17 = point10.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean21 = point10.dominates(point20);
        int int22 = point10.getY();
        int int23 = point10.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        int int32 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean36 = point29.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean40 = point29.dominates(point39);
        boolean boolean41 = point10.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) (short) 10);
        int int45 = point44.getY();
        boolean boolean46 = point10.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int50 = point49.getX();
        int int51 = point49.getX();
        int int52 = point49.getX();
        int int53 = point49.getY();
        int int54 = point49.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) '4');
        int int58 = point57.getX();
        boolean boolean59 = point49.dominates(point57);
        int int60 = point57.getY();
        boolean boolean61 = point10.dominates(point57);
        boolean boolean62 = point2.dominates(point57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int66 = point65.getY();
        int int67 = point65.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 0);
        boolean boolean74 = point70.dominates(point73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 100);
        boolean boolean78 = point73.dominates(point77);
        boolean boolean79 = point65.dominates(point77);
        boolean boolean80 = point2.dominates(point77);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test2732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2732");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList21 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point25 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList31, pointArray30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm22.produceFinalSkyLine(pointList31, pointList34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point39 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList45, pointArray44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm36.produceFinalSkyLine(pointList45, pointList48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point54 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList60, pointArray59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm51.produceFinalSkyLine(pointList60, pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm50.produceSubSkyLines(pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean73 = point69.dominates(point72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point69 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList75, pointArray74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm77.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm66.produceFinalSkyLine(pointList75, pointList78);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm50.produceSubSkyLines(pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm22.produceFinalSkyLine(pointList45, pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.produceSubSkyLines(pointList81);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean91 = point87.dominates(point90);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray92 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point87 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList93, pointArray92);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm95 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm95.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm84.produceFinalSkyLine(pointList93, pointList96);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm0.produceSubSkyLines(pointList97);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList99 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertNotNull(pointList21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(pointArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(pointArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(pointArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(pointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(pointArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
        org.junit.Assert.assertNotNull(pointList99);
    }

    @Test
    public void test2733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2733");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point33.dominates(point46);
        boolean boolean55 = point19.dominates(point46);
        int int56 = point46.getY();
        int int57 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int61 = point60.getY();
        int int62 = point60.getY();
        int int63 = point60.getY();
        boolean boolean64 = point46.dominates(point60);
        int int65 = point46.getX();
        int int66 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) (short) -1);
        boolean boolean70 = point46.dominates(point69);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test2734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2734");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point2.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int25 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean29 = point24.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        int int38 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean42 = point35.dominates(point41);
        boolean boolean43 = point24.dominates(point35);
        boolean boolean44 = point2.dominates(point24);
        int int45 = point24.getY();
        java.lang.Class<?> wildcardClass46 = point24.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test2735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2735");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) -1);
        boolean boolean18 = point2.dominates(point17);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        int int27 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean31 = point24.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean35 = point24.dominates(point34);
        int int36 = point34.getX();
        int int37 = point34.getX();
        int int38 = point34.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point44.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        boolean boolean54 = point44.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int58 = point57.getY();
        boolean boolean59 = point44.dominates(point57);
        boolean boolean60 = point34.dominates(point44);
        boolean boolean61 = point17.dominates(point44);
        java.lang.Class<?> wildcardClass62 = point44.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test2736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2736");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, 1);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2737");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        int int9 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int13 = point12.getX();
        int int14 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int18 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point21.getX();
        boolean boolean27 = point17.dominates(point21);
        int int28 = point17.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        boolean boolean44 = point34.dominates(point42);
        int int45 = point42.getX();
        int int46 = point42.getX();
        boolean boolean47 = point17.dominates(point42);
        int int48 = point17.getX();
        boolean boolean49 = point12.dominates(point17);
        boolean boolean50 = point5.dominates(point17);
        int int51 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        int int55 = point54.getX();
        int int56 = point54.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean60 = point54.dominates(point59);
        int int61 = point59.getY();
        int int62 = point59.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        int int70 = point65.getX();
        int int71 = point65.getY();
        int int72 = point65.getY();
        boolean boolean73 = point59.dominates(point65);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 35);
        boolean boolean77 = point59.dominates(point76);
        boolean boolean78 = point5.dominates(point76);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test2738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2738");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.produceSubSkyLines(pointList41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm0.produceFinalSkyLine(pointList41, pointList50);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass53 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test2739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2739");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        boolean boolean42 = point32.dominates(point40);
        boolean boolean43 = point26.dominates(point40);
        boolean boolean44 = point21.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean51 = point47.dominates(point50);
        boolean boolean52 = point21.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) ' ');
        boolean boolean56 = point21.dominates(point55);
        int int57 = point21.getX();
        int int58 = point21.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test2740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2740");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getY();
        int int6 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        boolean boolean25 = point15.dominates(point23);
        boolean boolean26 = point9.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int30 = point29.getX();
        int int31 = point29.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        int int40 = point37.getX();
        boolean boolean41 = point29.dominates(point37);
        boolean boolean42 = point23.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int46 = point45.getX();
        boolean boolean47 = point37.dominates(point45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        boolean boolean51 = point45.dominates(point50);
        boolean boolean52 = point2.dominates(point45);
        int int53 = point45.getY();
        int int54 = point45.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test2741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2741");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        int int13 = point5.getY();
        int int14 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        int int23 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean27 = point20.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean31 = point20.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        int int40 = point37.getY();
        boolean boolean41 = point20.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean45 = point37.dominates(point44);
        boolean boolean46 = point5.dominates(point44);
        int int47 = point44.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (byte) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        int int58 = point56.getY();
        int int59 = point56.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean63 = point56.dominates(point62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean67 = point56.dominates(point66);
        boolean boolean68 = point50.dominates(point56);
        boolean boolean69 = point44.dominates(point56);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test2742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2742");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm46.produceSubSkyLines(pointList56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm46.produceSubSkyLines(pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm18.produceFinalSkyLine(pointList41, pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.produceSubSkyLines(pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass85 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2743");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (-1));
        boolean boolean19 = point13.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int23 = point22.getX();
        int int24 = point22.getX();
        int int25 = point22.getX();
        int int26 = point22.getY();
        int int27 = point22.getY();
        boolean boolean28 = point13.dominates(point22);
        int int29 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int36 = point35.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point39.getX();
        boolean boolean45 = point35.dominates(point39);
        int int46 = point39.getX();
        boolean boolean47 = point32.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point39.dominates(point50);
        boolean boolean52 = point22.dominates(point39);
        int int53 = point22.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
    }

    @Test
    public void test2744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2744");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        boolean boolean21 = point11.dominates(point19);
        boolean boolean22 = point5.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean26 = point19.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        boolean boolean30 = point19.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 52);
        boolean boolean34 = point29.dominates(point33);
        int int35 = point29.getY();
        int int36 = point29.getY();
        boolean boolean37 = point2.dominates(point29);
        java.lang.Class<?> wildcardClass38 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test2745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2745");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point2.dominates(point13);
        int int22 = point13.getY();
        int int23 = point13.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test2746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2746");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 97);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        int int15 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean19 = point12.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int23 = point22.getY();
        boolean boolean24 = point18.dominates(point22);
        int int25 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 35);
        boolean boolean29 = point22.dominates(point28);
        boolean boolean30 = point6.dominates(point22);
        int int31 = point6.getX();
        boolean boolean32 = point2.dominates(point6);
        int int33 = point6.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test2747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2747");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean8 = point2.dominates(point7);
        int int9 = point7.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean22 = point15.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean26 = point15.dominates(point25);
        int int27 = point15.getY();
        int int28 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int32 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int36 = point35.getX();
        int int37 = point35.getX();
        int int38 = point35.getX();
        int int39 = point35.getY();
        int int40 = point35.getY();
        boolean boolean41 = point31.dominates(point35);
        boolean boolean42 = point15.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        int int50 = point48.getY();
        int int51 = point48.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean55 = point48.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean59 = point48.dominates(point58);
        int int60 = point58.getY();
        boolean boolean61 = point31.dominates(point58);
        boolean boolean62 = point7.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 97);
        boolean boolean66 = point7.dominates(point65);
        java.lang.Class<?> wildcardClass67 = point65.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 32 + "'", int60 == 32);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test2748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2748");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) (short) 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int7 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 0);
        int int11 = point10.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int15 = point14.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        int int23 = point18.getX();
        boolean boolean24 = point14.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int28 = point27.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point31.getX();
        boolean boolean37 = point27.dominates(point31);
        int int38 = point31.getX();
        boolean boolean39 = point14.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point45.getY();
        int int48 = point45.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean52 = point45.dominates(point51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        int int61 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean65 = point58.dominates(point64);
        boolean boolean66 = point45.dominates(point58);
        boolean boolean67 = point31.dominates(point58);
        int int68 = point58.getY();
        int int69 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int73 = point72.getX();
        int int74 = point72.getY();
        int int75 = point72.getY();
        boolean boolean76 = point58.dominates(point72);
        int int77 = point58.getX();
        boolean boolean78 = point10.dominates(point58);
        boolean boolean79 = point6.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (byte) 1);
        boolean boolean83 = point6.dominates(point82);
        boolean boolean84 = point2.dominates(point6);
        java.lang.Class<?> wildcardClass85 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 52 + "'", int75 == 52);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2749");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) '4');
        boolean boolean19 = point14.dominates(point18);
        boolean boolean20 = point2.dominates(point14);
        int int21 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        int int29 = point27.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        boolean boolean37 = point27.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        boolean boolean45 = point35.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        int int56 = point54.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean63 = point59.dominates(point62);
        boolean boolean64 = point54.dominates(point62);
        boolean boolean65 = point48.dominates(point62);
        boolean boolean66 = point43.dominates(point62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int70 = point69.getY();
        boolean boolean71 = point62.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean78 = point74.dominates(point77);
        int int79 = point77.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        boolean boolean87 = point77.dominates(point85);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (-1));
        boolean boolean91 = point85.dominates(point90);
        boolean boolean92 = point69.dominates(point90);
        int int93 = point90.getX();
        boolean boolean94 = point2.dominates(point90);
        int int95 = point90.getY();
        int int96 = point90.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10 + "'", int93 == 10);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test2750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2750");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        int int18 = point15.getX();
        int int19 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        boolean boolean35 = point25.dominates(point33);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int39 = point38.getY();
        boolean boolean40 = point25.dominates(point38);
        boolean boolean41 = point15.dominates(point25);
        int int42 = point25.getY();
        java.lang.Class<?> wildcardClass43 = point25.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test2751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2751");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 52);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test2752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2752");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int25 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point28.getX();
        boolean boolean34 = point24.dominates(point28);
        int int35 = point28.getX();
        boolean boolean36 = point11.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int40 = point39.getX();
        int int41 = point39.getY();
        boolean boolean42 = point11.dominates(point39);
        boolean boolean43 = point5.dominates(point39);
        int int44 = point39.getY();
        int int45 = point39.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test2753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2753");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean19 = point8.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        int int28 = point25.getY();
        boolean boolean29 = point8.dominates(point25);
        boolean boolean30 = point2.dominates(point25);
        int int31 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) -1);
        int int35 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point44.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        boolean boolean54 = point44.dominates(point52);
        boolean boolean55 = point38.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int59 = point58.getX();
        int int60 = point58.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        int int68 = point66.getY();
        int int69 = point66.getX();
        boolean boolean70 = point58.dominates(point66);
        boolean boolean71 = point52.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int75 = point74.getX();
        boolean boolean76 = point66.dominates(point74);
        boolean boolean77 = point34.dominates(point66);
        int int78 = point66.getX();
        boolean boolean79 = point25.dominates(point66);
        java.lang.Class<?> wildcardClass80 = point25.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test2754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2754");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) (short) -1);
        boolean boolean17 = point6.dominates(point16);
        int int18 = point6.getX();
        int int19 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        int int31 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean35 = point28.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean39 = point28.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point45.getY();
        int int48 = point45.getY();
        boolean boolean49 = point28.dominates(point45);
        boolean boolean50 = point22.dominates(point45);
        boolean boolean51 = point6.dominates(point45);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test2755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2755");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        int int8 = point5.getY();
        boolean boolean9 = point2.dominates(point5);
        int int10 = point5.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test2756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2756");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) -1);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        boolean boolean23 = point6.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int27 = point26.getX();
        int int28 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point34.getY();
        int int37 = point34.getX();
        boolean boolean38 = point26.dominates(point34);
        boolean boolean39 = point20.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int43 = point42.getX();
        boolean boolean44 = point34.dominates(point42);
        boolean boolean45 = point2.dominates(point34);
        int int46 = point2.getY();
        int int47 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test2757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2757");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point42 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList48, pointArray47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm50.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm39.produceFinalSkyLine(pointList48, pointList51);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm39.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point63 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList69, pointArray68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = skylineAlgorithm71.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm60.produceFinalSkyLine(pointList69, pointList72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm39.produceSubSkyLines(pointList69);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm0.produceSubSkyLines(pointList74);
        java.lang.Class<?> wildcardClass76 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertNotNull(pointList38);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(pointArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertNotNull(pointList54);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(pointArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(pointList72);
        org.junit.Assert.assertNotNull(pointList73);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test2758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2758");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) (short) 10);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 97);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int11 = point10.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int15 = point14.getX();
        int int16 = point14.getX();
        int int17 = point14.getX();
        int int18 = point14.getY();
        int int19 = point14.getY();
        boolean boolean20 = point10.dominates(point14);
        int int21 = point10.getY();
        boolean boolean22 = point6.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int26 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point29.getX();
        boolean boolean35 = point25.dominates(point29);
        int int36 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        boolean boolean52 = point42.dominates(point50);
        int int53 = point50.getX();
        int int54 = point50.getX();
        boolean boolean55 = point25.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        int int64 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean68 = point61.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean75 = point71.dominates(point74);
        int int76 = point74.getY();
        int int77 = point74.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean81 = point74.dominates(point80);
        boolean boolean82 = point61.dominates(point74);
        boolean boolean83 = point25.dominates(point61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean87 = point61.dominates(point86);
        boolean boolean88 = point10.dominates(point86);
        boolean boolean89 = point2.dominates(point10);
        int int90 = point10.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point93 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) 'a');
        int int94 = point93.getY();
        int int95 = point93.getX();
        boolean boolean96 = point10.dominates(point93);
        java.lang.Class<?> wildcardClass97 = point93.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 97 + "'", int94 == 97);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2759");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int7 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int11 = point10.getY();
        boolean boolean12 = point6.dominates(point10);
        int int13 = point6.getY();
        boolean boolean14 = point2.dominates(point6);
        java.lang.Class<?> wildcardClass15 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2760");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) 100);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int7 = point6.getX();
        int int8 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int12 = point11.getX();
        boolean boolean13 = point6.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) 'a');
        boolean boolean17 = point11.dominates(point16);
        boolean boolean18 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        int int27 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean31 = point24.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean35 = point24.dominates(point34);
        int int36 = point34.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int40 = point39.getX();
        int int41 = point39.getX();
        int int42 = point39.getX();
        int int43 = point39.getY();
        boolean boolean44 = point34.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int48 = point47.getX();
        int int49 = point47.getX();
        boolean boolean50 = point39.dominates(point47);
        boolean boolean51 = point16.dominates(point39);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test2761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2761");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        int int14 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean18 = point11.dominates(point17);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) '4');
        boolean boolean22 = point17.dominates(point21);
        boolean boolean23 = point5.dominates(point17);
        boolean boolean24 = point2.dominates(point17);
        int int25 = point17.getX();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test2762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2762");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        boolean boolean25 = point5.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int29 = point28.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point32.getX();
        boolean boolean38 = point28.dominates(point32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int42 = point41.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        int int50 = point45.getX();
        boolean boolean51 = point41.dominates(point45);
        int int52 = point45.getX();
        boolean boolean53 = point28.dominates(point45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int57 = point56.getX();
        int int58 = point56.getY();
        boolean boolean59 = point28.dominates(point56);
        boolean boolean60 = point5.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (int) 'a');
        boolean boolean64 = point5.dominates(point63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (short) 1);
        int int68 = point67.getX();
        boolean boolean69 = point63.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 0);
        boolean boolean73 = point67.dominates(point72);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 97 + "'", int68 == 97);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test2763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2763");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        boolean boolean30 = point13.dominates(point19);
        int int31 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        int int40 = point37.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean44 = point37.dominates(point43);
        boolean boolean45 = point19.dominates(point37);
        int int46 = point19.getY();
        int int47 = point19.getY();
        int int48 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int52 = point51.getY();
        int int53 = point51.getY();
        int int54 = point51.getX();
        int int55 = point51.getY();
        boolean boolean56 = point19.dominates(point51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean66 = point62.dominates(point65);
        int int67 = point65.getY();
        int int68 = point65.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean72 = point65.dominates(point71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean76 = point65.dominates(point75);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean83 = point79.dominates(point82);
        int int84 = point82.getY();
        int int85 = point82.getY();
        boolean boolean86 = point65.dominates(point82);
        boolean boolean87 = point59.dominates(point82);
        int int88 = point82.getX();
        boolean boolean89 = point51.dominates(point82);
        int int90 = point82.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
    }

    @Test
    public void test2764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2764");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getX();
        int int8 = point2.getY();
        int int9 = point2.getX();
        int int10 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int14 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        boolean boolean33 = point23.dominates(point31);
        boolean boolean34 = point17.dominates(point31);
        int int35 = point17.getY();
        int int36 = point17.getY();
        boolean boolean37 = point13.dominates(point17);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        int int45 = point43.getY();
        int int46 = point43.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean50 = point43.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean54 = point43.dominates(point53);
        int int55 = point53.getX();
        int int56 = point53.getY();
        int int57 = point53.getY();
        boolean boolean58 = point13.dominates(point53);
        boolean boolean59 = point2.dominates(point53);
        int int60 = point2.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 32 + "'", int56 == 32);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 32 + "'", int57 == 32);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test2765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2765");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (short) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point5.getX();
        int int11 = point5.getY();
        int int12 = point5.getX();
        int int13 = point5.getX();
        boolean boolean14 = point2.dominates(point5);
        int int15 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) '#');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int22 = point21.getY();
        int int23 = point21.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        boolean boolean42 = point32.dominates(point40);
        boolean boolean43 = point26.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int47 = point46.getX();
        int int48 = point46.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        int int56 = point54.getY();
        int int57 = point54.getX();
        boolean boolean58 = point46.dominates(point54);
        boolean boolean59 = point40.dominates(point54);
        boolean boolean60 = point21.dominates(point40);
        int int61 = point21.getX();
        boolean boolean62 = point18.dominates(point21);
        int int63 = point18.getY();
        boolean boolean64 = point2.dominates(point18);
        int int65 = point18.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
    }

    @Test
    public void test2766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2766");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point12.getX();
        int int18 = point12.getY();
        int int19 = point12.getX();
        int int20 = point12.getX();
        int int21 = point12.getX();
        boolean boolean22 = point9.dominates(point12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int26 = point25.getX();
        int int27 = point25.getY();
        int int28 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int32 = point31.getY();
        boolean boolean33 = point25.dominates(point31);
        int int34 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        int int42 = point40.getY();
        int int43 = point40.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean47 = point40.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        int int55 = point53.getY();
        int int56 = point53.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean60 = point53.dominates(point59);
        boolean boolean61 = point40.dominates(point53);
        boolean boolean62 = point31.dominates(point53);
        int int63 = point31.getY();
        boolean boolean64 = point12.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean74 = point70.dominates(point73);
        int int75 = point70.getX();
        boolean boolean76 = point67.dominates(point70);
        int int77 = point70.getY();
        boolean boolean78 = point12.dominates(point70);
        boolean boolean79 = point5.dominates(point70);
        java.lang.Class<?> wildcardClass80 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test2767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2767");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean19 = point8.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        int int28 = point25.getY();
        boolean boolean29 = point8.dominates(point25);
        boolean boolean30 = point2.dominates(point25);
        int int31 = point2.getY();
        java.lang.Class<?> wildcardClass32 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test2768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2768");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) (byte) 100);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test2769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2769");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 10);
        boolean boolean16 = point5.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int20 = point19.getX();
        int int21 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int25 = point24.getX();
        boolean boolean26 = point19.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) '#');
        int int30 = point29.getX();
        boolean boolean31 = point24.dominates(point29);
        boolean boolean32 = point15.dominates(point24);
        java.lang.Class<?> wildcardClass33 = point15.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test2770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2770");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) '4');
        boolean boolean6 = point2.dominates(point5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2771");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int21 = point20.getX();
        int int22 = point20.getY();
        int int23 = point20.getY();
        int int24 = point20.getX();
        int int25 = point20.getY();
        boolean boolean26 = point5.dominates(point20);
        int int27 = point5.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test2772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2772");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point8.getX();
        int int20 = point8.getY();
        boolean boolean21 = point2.dominates(point8);
        int int22 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) 'a');
        int int26 = point25.getX();
        boolean boolean27 = point2.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) ' ');
        int int31 = point30.getY();
        boolean boolean32 = point2.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) '#');
        boolean boolean36 = point30.dominates(point35);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 32 + "'", int31 == 32);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test2773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2773");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        boolean boolean23 = point6.dominates(point20);
        int int24 = point6.getY();
        int int25 = point6.getY();
        boolean boolean26 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        int int35 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean39 = point32.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean43 = point32.dominates(point42);
        int int44 = point42.getX();
        int int45 = point42.getY();
        int int46 = point42.getY();
        boolean boolean47 = point2.dominates(point42);
        int int48 = point2.getX();
        int int49 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 32 + "'", int45 == 32);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 32 + "'", int46 == 32);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test2774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2774");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean8 = point2.dominates(point7);
        int int9 = point7.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean22 = point15.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean26 = point15.dominates(point25);
        int int27 = point15.getY();
        int int28 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int32 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int36 = point35.getX();
        int int37 = point35.getX();
        int int38 = point35.getX();
        int int39 = point35.getY();
        int int40 = point35.getY();
        boolean boolean41 = point31.dominates(point35);
        boolean boolean42 = point15.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        int int50 = point48.getY();
        int int51 = point48.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean55 = point48.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean59 = point48.dominates(point58);
        int int60 = point58.getY();
        boolean boolean61 = point31.dominates(point58);
        boolean boolean62 = point7.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 97);
        boolean boolean66 = point7.dominates(point65);
        int int67 = point7.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 32 + "'", int60 == 32);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test2775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2775");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int13 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point16.getX();
        boolean boolean22 = point12.dominates(point16);
        int int23 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point29.dominates(point37);
        int int40 = point37.getX();
        int int41 = point37.getX();
        boolean boolean42 = point12.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        int int50 = point48.getY();
        int int51 = point48.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean55 = point48.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        int int64 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean68 = point61.dominates(point67);
        boolean boolean69 = point48.dominates(point61);
        boolean boolean70 = point12.dominates(point48);
        boolean boolean71 = point9.dominates(point12);
        int int72 = point12.getX();
        int int73 = point12.getX();
        boolean boolean74 = point6.dominates(point12);
        boolean boolean75 = point2.dominates(point6);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test2776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2776");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (-1));
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int13 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point16.getX();
        boolean boolean22 = point12.dominates(point16);
        int int23 = point16.getX();
        boolean boolean24 = point9.dominates(point16);
        int int25 = point9.getX();
        boolean boolean26 = point5.dominates(point9);
        int int27 = point9.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
    }

    @Test
    public void test2777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2777");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList2 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point7 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList13, pointArray12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm15.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm4.produceFinalSkyLine(pointList13, pointList16);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm3.produceSubSkyLines(pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.produceSubSkyLines(pointList18);
        java.lang.Class<?> wildcardClass20 = pointList19.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(pointList2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(pointArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2778");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int31 = point30.getX();
        int int32 = point30.getY();
        boolean boolean33 = point2.dominates(point30);
        int int34 = point30.getX();
        int int35 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int42 = point41.getY();
        int int43 = point41.getY();
        int int44 = point41.getY();
        boolean boolean45 = point38.dominates(point41);
        boolean boolean46 = point30.dominates(point41);
        java.lang.Class<?> wildcardClass47 = point41.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test2779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2779");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, 10);
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test2780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2780");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (-1));
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test2781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2781");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 0);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2782");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) (short) 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 32);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        boolean boolean31 = point21.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        int int42 = point40.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        boolean boolean50 = point40.dominates(point48);
        boolean boolean51 = point34.dominates(point48);
        boolean boolean52 = point29.dominates(point48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean59 = point55.dominates(point58);
        boolean boolean60 = point29.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) (byte) 0);
        boolean boolean64 = point29.dominates(point63);
        boolean boolean65 = point6.dominates(point63);
        java.lang.Class<?> wildcardClass66 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test2783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2783");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm31.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point55 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList61, pointArray60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm63.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm52.produceFinalSkyLine(pointList61, pointList64);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm31.produceSubSkyLines(pointList61);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm0.produceSubSkyLines(pointList66);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = skylineAlgorithm0.produceSubSkyLines(pointList70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(pointArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertNotNull(pointList69);
    }

    @Test
    public void test2784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2784");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        boolean boolean33 = point16.dominates(point22);
        boolean boolean34 = point2.dominates(point16);
        int int35 = point16.getX();
        int int36 = point16.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int40 = point39.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point43.getX();
        boolean boolean49 = point39.dominates(point43);
        int int50 = point43.getX();
        boolean boolean51 = point16.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) (short) 100);
        boolean boolean55 = point43.dominates(point54);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test2785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2785");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getX();
        int int19 = point5.getX();
        java.lang.Class<?> wildcardClass20 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2786");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        java.lang.Class<?> wildcardClass5 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2787");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        int int20 = point16.getY();
        int int21 = point16.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int25 = point24.getX();
        int int26 = point24.getX();
        int int27 = point24.getY();
        int int28 = point24.getY();
        int int29 = point24.getX();
        int int30 = point24.getX();
        int int31 = point24.getX();
        int int32 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int36 = point35.getX();
        int int37 = point35.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean41 = point35.dominates(point40);
        boolean boolean42 = point24.dominates(point35);
        int int43 = point35.getY();
        boolean boolean44 = point16.dominates(point35);
        int int45 = point35.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test2788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2788");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        int int27 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean31 = point24.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean35 = point24.dominates(point34);
        boolean boolean36 = point5.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) (short) 10);
        int int40 = point39.getY();
        boolean boolean41 = point5.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int45 = point44.getX();
        int int46 = point44.getX();
        int int47 = point44.getX();
        int int48 = point44.getY();
        int int49 = point44.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) '4');
        int int53 = point52.getX();
        boolean boolean54 = point44.dominates(point52);
        int int55 = point52.getY();
        boolean boolean56 = point5.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean63 = point59.dominates(point62);
        int int64 = point62.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        boolean boolean72 = point62.dominates(point70);
        int int73 = point62.getX();
        int int74 = point62.getY();
        int int75 = point62.getY();
        boolean boolean76 = point5.dominates(point62);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test2789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2789");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point8.getY();
        int int21 = point8.getX();
        boolean boolean22 = point2.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 100);
        boolean boolean26 = point2.dominates(point25);
        int int27 = point25.getX();
        java.lang.Class<?> wildcardClass28 = point25.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test2790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2790");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, (int) (byte) 0);
        boolean boolean16 = point6.dominates(point15);
        int int17 = point15.getY();
        java.lang.Class<?> wildcardClass18 = point15.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test2791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2791");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (-1));
        int int3 = point2.getY();
        int int4 = point2.getY();
        java.lang.Class<?> wildcardClass5 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2792");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) 10);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point10.getX();
        boolean boolean16 = point6.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        int int30 = point23.getX();
        boolean boolean31 = point6.dominates(point23);
        int int32 = point6.getX();
        boolean boolean33 = point2.dominates(point6);
        int int34 = point6.getX();
        int int35 = point6.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
    }

    @Test
    public void test2793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2793");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int10 = point9.getX();
        int int11 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int15 = point14.getX();
        boolean boolean16 = point9.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int20 = point19.getY();
        boolean boolean21 = point14.dominates(point19);
        int int22 = point14.getX();
        boolean boolean23 = point5.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int30 = point29.getX();
        boolean boolean31 = point26.dominates(point29);
        int int32 = point26.getX();
        boolean boolean33 = point5.dominates(point26);
        int int34 = point5.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test2794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2794");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int18 = point17.getX();
        boolean boolean19 = point2.dominates(point17);
        int int20 = point2.getX();
        int int21 = point2.getX();
        java.lang.Class<?> wildcardClass22 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test2795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2795");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point10.getX();
        boolean boolean16 = point6.dominates(point10);
        int int17 = point10.getX();
        int int18 = point10.getY();
        int int19 = point10.getY();
        int int20 = point10.getY();
        int int21 = point10.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) '4');
        boolean boolean25 = point10.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 10);
        int int29 = point28.getX();
        int int30 = point28.getY();
        boolean boolean31 = point24.dominates(point28);
        boolean boolean32 = point2.dominates(point28);
        int int33 = point28.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
    }

    @Test
    public void test2796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2796");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2797");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 100);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test2798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2798");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 1);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        boolean boolean25 = point15.dominates(point23);
        int int26 = point23.getX();
        int int27 = point23.getX();
        int int28 = point23.getY();
        boolean boolean29 = point9.dominates(point23);
        int int30 = point23.getX();
        boolean boolean31 = point5.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        int int45 = point40.getX();
        boolean boolean46 = point37.dominates(point40);
        int int47 = point37.getX();
        boolean boolean48 = point34.dominates(point37);
        boolean boolean49 = point5.dominates(point37);
        int int50 = point37.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
    }

    @Test
    public void test2799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2799");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point38 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList44, pointArray43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm35.produceFinalSkyLine(pointList44, pointList47);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm34.produceSubSkyLines(pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm0.produceSubSkyLines(pointList49);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point55 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList61, pointArray60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm63.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm52.produceFinalSkyLine(pointList61, pointList64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean73 = point69.dominates(point72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point69 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList75, pointArray74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm77.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm66.produceFinalSkyLine(pointList75, pointList78);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean87 = point83.dominates(point86);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray88 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point83 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList89, pointArray88);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm91 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm91.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm80.produceFinalSkyLine(pointList89, pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm52.produceFinalSkyLine(pointList79, pointList89);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.produceSubSkyLines(pointList94);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass97 = pointList96.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(pointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(pointArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(pointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(pointArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2800");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.produceSubSkyLines(pointList52);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass62 = pointList61.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test2801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2801");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int7 = point6.getX();
        int int8 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int12 = point11.getX();
        boolean boolean13 = point6.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int17 = point16.getY();
        boolean boolean18 = point11.dominates(point16);
        int int19 = point16.getY();
        int int20 = point16.getY();
        int int21 = point16.getY();
        boolean boolean22 = point2.dominates(point16);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test2802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2802");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        boolean boolean19 = point9.dominates(point17);
        int int20 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int24 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point27.getX();
        boolean boolean33 = point23.dominates(point27);
        int int34 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        int int42 = point40.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        boolean boolean50 = point40.dominates(point48);
        int int51 = point48.getX();
        int int52 = point48.getX();
        boolean boolean53 = point23.dominates(point48);
        int int54 = point48.getY();
        boolean boolean55 = point9.dominates(point48);
        boolean boolean56 = point2.dominates(point48);
        int int57 = point48.getX();
        int int58 = point48.getX();
        java.lang.Class<?> wildcardClass59 = point48.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2803");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        int int8 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        int int19 = point17.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        boolean boolean27 = point17.dominates(point25);
        int int28 = point25.getY();
        boolean boolean29 = point11.dominates(point25);
        int int30 = point25.getY();
        int int31 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 52);
        boolean boolean35 = point25.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point44.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        boolean boolean54 = point44.dominates(point52);
        int int55 = point52.getY();
        boolean boolean56 = point38.dominates(point52);
        int int57 = point52.getY();
        int int58 = point52.getY();
        int int59 = point52.getY();
        boolean boolean60 = point34.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean67 = point63.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int71 = point70.getX();
        int int72 = point70.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int76 = point75.getX();
        boolean boolean77 = point70.dominates(point75);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int81 = point80.getY();
        boolean boolean82 = point75.dominates(point80);
        int int83 = point75.getX();
        boolean boolean84 = point66.dominates(point75);
        int int85 = point66.getY();
        boolean boolean86 = point34.dominates(point66);
        boolean boolean87 = point2.dominates(point66);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 52 + "'", int76 == 52);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test2804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2804");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int21 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        int int29 = point24.getX();
        boolean boolean30 = point20.dominates(point24);
        int int31 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        boolean boolean47 = point37.dominates(point45);
        int int48 = point45.getX();
        int int49 = point45.getX();
        boolean boolean50 = point20.dominates(point45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        int int58 = point56.getY();
        int int59 = point56.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean63 = point56.dominates(point62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        int int71 = point69.getY();
        int int72 = point69.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean76 = point69.dominates(point75);
        boolean boolean77 = point56.dominates(point69);
        boolean boolean78 = point20.dominates(point56);
        int int79 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        boolean boolean86 = point82.dominates(point85);
        boolean boolean87 = point20.dominates(point85);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 52);
        int int91 = point90.getX();
        boolean boolean92 = point20.dominates(point90);
        boolean boolean93 = point15.dominates(point90);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 97 + "'", int91 == 97);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test2805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2805");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', (int) (byte) 100);
        int int3 = point2.getY();
        int int4 = point2.getX();
        int int5 = point2.getX();
        int int6 = point2.getY();
        int int7 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
    }

    @Test
    public void test2806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2806");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        int int22 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        boolean boolean38 = point28.dominates(point36);
        int int39 = point36.getX();
        int int40 = point36.getX();
        boolean boolean41 = point11.dominates(point36);
        boolean boolean42 = point7.dominates(point11);
        int int43 = point11.getY();
        boolean boolean44 = point2.dominates(point11);
        int int45 = point11.getY();
        int int46 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 100);
        boolean boolean50 = point11.dominates(point49);
        int int51 = point49.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
    }

    @Test
    public void test2807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2807");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        boolean boolean24 = point7.dominates(point21);
        int int25 = point7.getY();
        int int26 = point7.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int30 = point29.getY();
        int int31 = point29.getY();
        boolean boolean32 = point7.dominates(point29);
        boolean boolean33 = point2.dominates(point7);
        java.lang.Class<?> wildcardClass34 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test2808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2808");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 1);
        int int3 = point2.getX();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, 97);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int11 = point10.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int15 = point14.getX();
        int int16 = point14.getX();
        int int17 = point14.getX();
        int int18 = point14.getY();
        int int19 = point14.getY();
        boolean boolean20 = point10.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) -1);
        int int24 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        boolean boolean43 = point33.dominates(point41);
        boolean boolean44 = point27.dominates(point41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int48 = point47.getX();
        int int49 = point47.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        int int57 = point55.getY();
        int int58 = point55.getX();
        boolean boolean59 = point47.dominates(point55);
        boolean boolean60 = point41.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int64 = point63.getX();
        boolean boolean65 = point55.dominates(point63);
        boolean boolean66 = point23.dominates(point55);
        int int67 = point23.getX();
        int int68 = point23.getX();
        boolean boolean69 = point14.dominates(point23);
        boolean boolean70 = point7.dominates(point14);
        boolean boolean71 = point2.dominates(point14);
        int int72 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
    }

    @Test
    public void test2809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2809");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm32.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean60 = point56.dominates(point59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point56 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList62, pointArray61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm64.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm53.produceFinalSkyLine(pointList62, pointList65);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm32.produceSubSkyLines(pointList62);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm0.produceSubSkyLines(pointList62);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = skylineAlgorithm0.produceSubSkyLines(pointList69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(pointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
    }

    @Test
    public void test2810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2810");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        int int7 = point6.getX();
        int int8 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean12 = point6.dominates(point11);
        int int13 = point11.getX();
        int int14 = point11.getX();
        boolean boolean15 = point2.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, 32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) '4');
        boolean boolean22 = point18.dominates(point21);
        int int23 = point18.getX();
        boolean boolean24 = point11.dominates(point18);
        java.lang.Class<?> wildcardClass25 = point11.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2811");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int23 = point22.getX();
        int int24 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        int int33 = point30.getX();
        boolean boolean34 = point22.dominates(point30);
        boolean boolean35 = point16.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int39 = point38.getX();
        boolean boolean40 = point30.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int47 = point46.getX();
        int int48 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean52 = point46.dominates(point51);
        boolean boolean53 = point43.dominates(point46);
        boolean boolean54 = point38.dominates(point43);
        java.lang.Class<?> wildcardClass55 = point38.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2812");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        boolean boolean19 = point9.dominates(point17);
        int int20 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int24 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point27.getX();
        boolean boolean33 = point23.dominates(point27);
        int int34 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        int int42 = point40.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        boolean boolean50 = point40.dominates(point48);
        int int51 = point48.getX();
        int int52 = point48.getX();
        boolean boolean53 = point23.dominates(point48);
        int int54 = point48.getY();
        boolean boolean55 = point9.dominates(point48);
        boolean boolean56 = point2.dominates(point48);
        int int57 = point48.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int61 = point60.getY();
        int int62 = point60.getY();
        int int63 = point60.getX();
        boolean boolean64 = point48.dominates(point60);
        int int65 = point60.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test2813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2813");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) (short) 0);
    }

    @Test
    public void test2814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2814");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) '#');
        boolean boolean10 = point2.dominates(point9);
        int int11 = point2.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test2815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2815");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        int int5 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
    }

    @Test
    public void test2816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2816");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int21 = point20.getX();
        boolean boolean22 = point5.dominates(point20);
        int int23 = point20.getX();
        int int24 = point20.getY();
        int int25 = point20.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test2817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2817");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        int int21 = point16.getY();
        int int22 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) 10);
        int int26 = point25.getY();
        int int27 = point25.getX();
        boolean boolean28 = point16.dominates(point25);
        int int29 = point25.getX();
        int int30 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) 10);
        int int34 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int38 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point41.getX();
        boolean boolean47 = point37.dominates(point41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int51 = point50.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        int int59 = point54.getX();
        boolean boolean60 = point50.dominates(point54);
        int int61 = point54.getX();
        boolean boolean62 = point37.dominates(point54);
        int int63 = point37.getX();
        boolean boolean64 = point33.dominates(point37);
        int int65 = point37.getX();
        int int66 = point37.getX();
        int int67 = point37.getX();
        boolean boolean68 = point25.dominates(point37);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test2818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2818");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point29.dominates(point37);
        int int40 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int44 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point47.getX();
        boolean boolean53 = point43.dominates(point47);
        boolean boolean54 = point37.dominates(point43);
        boolean boolean55 = point23.dominates(point37);
        boolean boolean56 = point16.dominates(point37);
        int int57 = point16.getX();
        java.lang.Class<?> wildcardClass58 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test2819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2819");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, (int) '#');
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean16 = point9.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean20 = point9.dominates(point19);
        int int21 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int25 = point24.getX();
        boolean boolean26 = point9.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int30 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean34 = point29.dominates(point33);
        boolean boolean35 = point9.dominates(point29);
        boolean boolean36 = point2.dominates(point29);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2820");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int7 = point6.getX();
        int int8 = point6.getX();
        int int9 = point6.getX();
        int int10 = point6.getY();
        int int11 = point6.getY();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getY();
        int int14 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int18 = point17.getY();
        int int19 = point17.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int27 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point30.getX();
        boolean boolean36 = point26.dominates(point30);
        int int37 = point26.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        int int45 = point43.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        boolean boolean53 = point43.dominates(point51);
        int int54 = point51.getX();
        int int55 = point51.getX();
        boolean boolean56 = point26.dominates(point51);
        boolean boolean57 = point22.dominates(point26);
        int int58 = point26.getY();
        boolean boolean59 = point17.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int63 = point62.getX();
        int int64 = point62.getY();
        int int65 = point62.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int69 = point68.getY();
        boolean boolean70 = point62.dominates(point68);
        boolean boolean71 = point26.dominates(point68);
        int int72 = point68.getY();
        boolean boolean73 = point6.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 100);
        boolean boolean77 = point68.dominates(point76);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test2821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2821");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.produceSubSkyLines(pointList41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm31.produceSubSkyLines(pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm0.produceSubSkyLines(pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm0.produceSubSkyLines(pointList63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
    }

    @Test
    public void test2822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2822");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.produceSubSkyLines(pointList41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm0.produceFinalSkyLine(pointList41, pointList50);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass61 = pointList60.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertNotNull(pointList54);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2823");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        boolean boolean33 = point16.dominates(point22);
        boolean boolean34 = point2.dominates(point16);
        int int35 = point16.getY();
        int int36 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, 32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        int int50 = point48.getY();
        int int51 = point48.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean55 = point48.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean59 = point48.dominates(point58);
        int int60 = point58.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int64 = point63.getX();
        int int65 = point63.getX();
        int int66 = point63.getX();
        int int67 = point63.getY();
        boolean boolean68 = point58.dominates(point63);
        boolean boolean69 = point42.dominates(point63);
        boolean boolean70 = point39.dominates(point63);
        boolean boolean71 = point16.dominates(point63);
        int int72 = point63.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
    }

    @Test
    public void test2824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2824");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point6 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList12, pointArray11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm14.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm3.produceFinalSkyLine(pointList12, pointList15);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm2.produceSubSkyLines(pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm2.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm2.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point23 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList29, pointArray28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm20.produceFinalSkyLine(pointList29, pointList32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point37 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList43, pointArray42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm34.produceFinalSkyLine(pointList43, pointList46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point52 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList58, pointArray57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm60.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm49.produceFinalSkyLine(pointList58, pointList61);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm48.produceSubSkyLines(pointList58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm48.produceSubSkyLines(pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm20.produceFinalSkyLine(pointList43, pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm2.produceSubSkyLines(pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.produceSubSkyLines(pointList80);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass83 = pointList82.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(pointArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(pointArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(pointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(pointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2825");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, 0);
        int int3 = point2.getY();
        int int4 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test2826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2826");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        boolean boolean21 = point2.dominates(point18);
        int int22 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int26 = point25.getX();
        int int27 = point25.getY();
        boolean boolean28 = point18.dominates(point25);
        int int29 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (short) 0);
        int int33 = point32.getX();
        boolean boolean34 = point25.dominates(point32);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test2827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2827");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int9 = point8.getY();
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int18 = point17.getX();
        int int19 = point17.getX();
        int int20 = point17.getY();
        int int21 = point17.getY();
        int int22 = point17.getX();
        int int23 = point17.getX();
        boolean boolean24 = point14.dominates(point17);
        boolean boolean25 = point8.dominates(point17);
        boolean boolean26 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        boolean boolean45 = point35.dominates(point43);
        int int46 = point43.getY();
        int int47 = point43.getY();
        boolean boolean48 = point29.dominates(point43);
        boolean boolean49 = point8.dominates(point29);
        boolean boolean50 = point2.dominates(point29);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test2828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2828");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getY();
        int int6 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
    }

    @Test
    public void test2829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2829");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int9 = point8.getY();
        boolean boolean10 = point5.dominates(point8);
        boolean boolean11 = point2.dominates(point5);
        int int12 = point2.getX();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test2830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2830");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        int int22 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        boolean boolean38 = point28.dominates(point36);
        int int39 = point36.getX();
        int int40 = point36.getX();
        boolean boolean41 = point11.dominates(point36);
        boolean boolean42 = point7.dominates(point11);
        int int43 = point11.getY();
        boolean boolean44 = point2.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int48 = point47.getX();
        int int49 = point47.getY();
        int int50 = point47.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int54 = point53.getY();
        boolean boolean55 = point47.dominates(point53);
        boolean boolean56 = point11.dominates(point53);
        java.lang.Class<?> wildcardClass57 = point11.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2831");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int7 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int11 = point10.getY();
        boolean boolean12 = point6.dominates(point10);
        int int13 = point6.getY();
        boolean boolean14 = point2.dominates(point6);
        int int15 = point2.getX();
        int int16 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
    }

    @Test
    public void test2832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2832");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        int int9 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean22 = point15.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean26 = point15.dominates(point25);
        int int27 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int31 = point30.getX();
        int int32 = point30.getX();
        int int33 = point30.getX();
        int int34 = point30.getY();
        boolean boolean35 = point25.dominates(point30);
        boolean boolean36 = point5.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) '#');
        boolean boolean40 = point5.dominates(point39);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test2833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2833");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (short) 10);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2834");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) 1);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test2835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2835");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) '#');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        int int15 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean19 = point12.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) '4');
        boolean boolean23 = point18.dominates(point22);
        boolean boolean24 = point6.dominates(point18);
        int int25 = point6.getY();
        boolean boolean26 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        boolean boolean33 = point29.dominates(point32);
        boolean boolean34 = point6.dominates(point32);
        java.lang.Class<?> wildcardClass35 = point32.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2836");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int25 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point28.getX();
        boolean boolean34 = point24.dominates(point28);
        int int35 = point28.getX();
        boolean boolean36 = point11.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int40 = point39.getX();
        int int41 = point39.getY();
        boolean boolean42 = point11.dominates(point39);
        boolean boolean43 = point5.dominates(point39);
        int int44 = point5.getY();
        int int45 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int49 = point48.getX();
        boolean boolean50 = point5.dominates(point48);
        int int51 = point48.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        int int62 = point60.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        boolean boolean70 = point60.dominates(point68);
        boolean boolean71 = point54.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean75 = point68.dominates(point74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean79 = point68.dominates(point78);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) '4');
        boolean boolean83 = point68.dominates(point82);
        boolean boolean84 = point48.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 52);
        int int88 = point87.getX();
        int int89 = point87.getY();
        boolean boolean90 = point68.dominates(point87);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 97 + "'", int88 == 97);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test2837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2837");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int6 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean10 = point5.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        boolean boolean14 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int18 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int22 = point21.getY();
        boolean boolean23 = point17.dominates(point21);
        int int24 = point17.getX();
        boolean boolean25 = point5.dominates(point17);
        boolean boolean26 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass27 = point5.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test2838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2838");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) '4');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int10 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        int int18 = point13.getX();
        boolean boolean19 = point9.dominates(point13);
        int int20 = point13.getX();
        int int21 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int25 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean29 = point24.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        int int38 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean42 = point35.dominates(point41);
        boolean boolean43 = point24.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int47 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean51 = point46.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        int int59 = point57.getY();
        int int60 = point57.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean64 = point57.dominates(point63);
        boolean boolean65 = point46.dominates(point57);
        boolean boolean66 = point24.dominates(point46);
        boolean boolean67 = point13.dominates(point46);
        int int68 = point46.getX();
        boolean boolean69 = point6.dominates(point46);
        int int70 = point46.getX();
        boolean boolean71 = point2.dominates(point46);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test2839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2839");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int8 = point7.getX();
        int int9 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getX();
        boolean boolean19 = point7.dominates(point15);
        int int20 = point7.getX();
        int int21 = point7.getX();
        boolean boolean22 = point2.dominates(point7);
        int int23 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int27 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int31 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point34.getX();
        boolean boolean40 = point30.dominates(point34);
        int int41 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point47.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        boolean boolean57 = point47.dominates(point55);
        int int58 = point55.getX();
        int int59 = point55.getX();
        boolean boolean60 = point30.dominates(point55);
        boolean boolean61 = point26.dominates(point30);
        boolean boolean62 = point7.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', (int) (byte) 100);
        int int66 = point65.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean73 = point69.dominates(point72);
        int int74 = point72.getY();
        int int75 = point72.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean79 = point72.dominates(point78);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean83 = point72.dominates(point82);
        int int84 = point82.getX();
        boolean boolean85 = point65.dominates(point82);
        boolean boolean86 = point7.dominates(point65);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, 97);
        int int90 = point89.getY();
        int int91 = point89.getX();
        int int92 = point89.getY();
        boolean boolean93 = point7.dominates(point89);
        java.lang.Class<?> wildcardClass94 = point7.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 97 + "'", int90 == 97);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 97 + "'", int92 == 97);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2840");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 100);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 0);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        java.lang.Class<?> wildcardClass9 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2841");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point2.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int25 = point24.getX();
        int int26 = point24.getX();
        int int27 = point24.getY();
        boolean boolean28 = point2.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 0);
        boolean boolean32 = point2.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) (byte) 0);
        int int36 = point35.getY();
        boolean boolean37 = point2.dominates(point35);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test2842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2842");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        int int15 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int19 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point22.getX();
        boolean boolean28 = point18.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int32 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point35.getX();
        boolean boolean41 = point31.dominates(point35);
        int int42 = point35.getX();
        boolean boolean43 = point18.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int47 = point46.getX();
        int int48 = point46.getY();
        boolean boolean49 = point18.dominates(point46);
        boolean boolean50 = point12.dominates(point46);
        boolean boolean51 = point6.dominates(point46);
        boolean boolean52 = point2.dominates(point6);
        int int53 = point2.getY();
        java.lang.Class<?> wildcardClass54 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test2843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2843");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.produceSubSkyLines(pointList52);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point66 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList72, pointArray71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm74.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm63.produceFinalSkyLine(pointList72, pointList75);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean85 = point81.dominates(point84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point81 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList87, pointArray86);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm89.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm78.produceFinalSkyLine(pointList87, pointList90);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm77.produceSubSkyLines(pointList87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm93 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm93.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm63.produceFinalSkyLine(pointList92, pointList94);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass99 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(pointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(pointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2844");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) 'a');
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        boolean boolean25 = point15.dominates(point23);
        int int26 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int30 = point29.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        int int38 = point33.getX();
        boolean boolean39 = point29.dominates(point33);
        boolean boolean40 = point23.dominates(point29);
        boolean boolean41 = point9.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int45 = point44.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point48.getX();
        boolean boolean54 = point44.dominates(point48);
        int int55 = point48.getX();
        int int56 = point48.getY();
        boolean boolean57 = point9.dominates(point48);
        boolean boolean58 = point6.dominates(point48);
        boolean boolean59 = point2.dominates(point48);
        int int60 = point48.getY();
        int int61 = point48.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test2845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2845");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean20 = point13.dominates(point19);
        int int21 = point13.getY();
        boolean boolean22 = point2.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) -1);
        int int26 = point25.getX();
        boolean boolean27 = point2.dominates(point25);
        int int28 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
    }

    @Test
    public void test2846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2846");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) '#');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int6 = point5.getY();
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        int int18 = point16.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        boolean boolean26 = point16.dominates(point24);
        boolean boolean27 = point10.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int31 = point30.getX();
        int int32 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getX();
        boolean boolean42 = point30.dominates(point38);
        boolean boolean43 = point24.dominates(point38);
        boolean boolean44 = point5.dominates(point24);
        int int45 = point5.getX();
        boolean boolean46 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 0);
        int int50 = point49.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        int int58 = point56.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean65 = point61.dominates(point64);
        boolean boolean66 = point56.dominates(point64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int70 = point69.getY();
        boolean boolean71 = point56.dominates(point69);
        int int72 = point69.getX();
        boolean boolean73 = point49.dominates(point69);
        boolean boolean74 = point5.dominates(point49);
        java.lang.Class<?> wildcardClass75 = point5.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 32 + "'", int50 == 32);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2847");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 1);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean22 = point15.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        boolean boolean26 = point21.dominates(point25);
        boolean boolean27 = point9.dominates(point21);
        boolean boolean28 = point2.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 100);
        boolean boolean32 = point21.dominates(point31);
        int int33 = point31.getX();
        java.lang.Class<?> wildcardClass34 = point31.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test2848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2848");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) (short) -1);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test2849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2849");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm33.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point38 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList44, pointArray43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm35.produceFinalSkyLine(pointList44, pointList47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point52 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList58, pointArray57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm60.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm49.produceFinalSkyLine(pointList58, pointList61);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm33.produceFinalSkyLine(pointList48, pointList61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point68 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList74, pointArray73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm76.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm65.produceFinalSkyLine(pointList74, pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm64.produceSubSkyLines(pointList74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm80.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm80.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm80.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm33.produceFinalSkyLine(pointList74, pointList83);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm0.produceSubSkyLines(pointList84);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(pointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(pointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(pointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
        org.junit.Assert.assertNotNull(pointList87);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
    }

    @Test
    public void test2850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2850");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        int int6 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int10 = point9.getX();
        int int11 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int15 = point14.getX();
        int int16 = point14.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        int int25 = point22.getX();
        boolean boolean26 = point14.dominates(point22);
        int int27 = point14.getX();
        int int28 = point14.getX();
        boolean boolean29 = point9.dominates(point14);
        int int30 = point14.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int34 = point33.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int38 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point41.getX();
        boolean boolean47 = point37.dominates(point41);
        int int48 = point37.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        int int56 = point54.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean63 = point59.dominates(point62);
        boolean boolean64 = point54.dominates(point62);
        int int65 = point62.getX();
        int int66 = point62.getX();
        boolean boolean67 = point37.dominates(point62);
        boolean boolean68 = point33.dominates(point37);
        boolean boolean69 = point14.dominates(point37);
        int int70 = point37.getX();
        int int71 = point37.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int75 = point74.getX();
        int int76 = point74.getY();
        int int77 = point74.getY();
        boolean boolean78 = point37.dominates(point74);
        boolean boolean79 = point2.dominates(point74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, 0);
        boolean boolean83 = point2.dominates(point82);
        int int84 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 97 + "'", int76 == 97);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 97 + "'", int77 == 97);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 52 + "'", int84 == 52);
    }

    @Test
    public void test2851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2851");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) -1);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, 10);
        boolean boolean10 = point5.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int14 = point13.getX();
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int19 = point18.getY();
        int int20 = point18.getY();
        int int21 = point18.getY();
        boolean boolean22 = point5.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 52);
        int int26 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 52);
        boolean boolean30 = point25.dominates(point29);
        int int31 = point25.getY();
        boolean boolean32 = point18.dominates(point25);
        java.lang.Class<?> wildcardClass33 = point25.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test2852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2852");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point24 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList30, pointArray29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm21.produceFinalSkyLine(pointList30, pointList33);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm20.produceSubSkyLines(pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm0.produceSubSkyLines(pointList30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = skylineAlgorithm37.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point42 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList48, pointArray47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm50.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm39.produceFinalSkyLine(pointList48, pointList51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean60 = point56.dominates(point59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point56 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList62, pointArray61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm64.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm53.produceFinalSkyLine(pointList62, pointList65);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm37.produceFinalSkyLine(pointList52, pointList65);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm0.produceSubSkyLines(pointList67);
        java.lang.Class<?> wildcardClass69 = pointList68.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(pointArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList38);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(pointArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(pointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test2853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2853");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        int int20 = point16.getY();
        boolean boolean21 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 1);
        int int25 = point24.getX();
        int int26 = point24.getX();
        boolean boolean27 = point2.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int34 = point33.getY();
        int int35 = point33.getY();
        boolean boolean36 = point30.dominates(point33);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int40 = point39.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean57 = point46.dominates(point56);
        int int58 = point56.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int62 = point61.getX();
        int int63 = point61.getX();
        int int64 = point61.getX();
        int int65 = point61.getY();
        boolean boolean66 = point56.dominates(point61);
        int int67 = point61.getY();
        boolean boolean68 = point39.dominates(point61);
        int int69 = point61.getY();
        boolean boolean70 = point33.dominates(point61);
        boolean boolean71 = point2.dominates(point61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean78 = point74.dominates(point77);
        int int79 = point77.getY();
        int int80 = point77.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean84 = point77.dominates(point83);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean88 = point77.dominates(point87);
        int int89 = point77.getY();
        int int90 = point77.getX();
        boolean boolean91 = point2.dominates(point77);
        int int92 = point2.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 97 + "'", int92 == 97);
    }

    @Test
    public void test2854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2854");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, 0);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        int int15 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean19 = point12.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean23 = point12.dominates(point22);
        int int24 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point12.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int36 = point35.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point39.getX();
        boolean boolean45 = point35.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int49 = point48.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        int int57 = point52.getX();
        boolean boolean58 = point48.dominates(point52);
        int int59 = point52.getX();
        boolean boolean60 = point35.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int64 = point63.getX();
        int int65 = point63.getY();
        boolean boolean66 = point35.dominates(point63);
        boolean boolean67 = point12.dominates(point35);
        int int68 = point12.getY();
        boolean boolean69 = point5.dominates(point12);
        int int70 = point12.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
    }

    @Test
    public void test2855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2855");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point36 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList42, pointArray41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm44.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm33.produceFinalSkyLine(pointList42, pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm33.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point57 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList63, pointArray62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm65.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm54.produceFinalSkyLine(pointList63, pointList66);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm53.produceSubSkyLines(pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm33.produceSubSkyLines(pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = skylineAlgorithm0.produceSubSkyLines(pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm0.produceSubSkyLines(pointList72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(pointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(pointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertNotNull(pointList69);
        org.junit.Assert.assertNotNull(pointList70);
        org.junit.Assert.assertNotNull(pointList71);
    }

    @Test
    public void test2856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2856");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) 10);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test2857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2857");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        boolean boolean33 = point16.dominates(point22);
        boolean boolean34 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        int int42 = point40.getY();
        int int43 = point40.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean47 = point40.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        boolean boolean51 = point46.dominates(point50);
        boolean boolean52 = point16.dominates(point46);
        java.lang.Class<?> wildcardClass53 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test2858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2858");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point11.getX();
        boolean boolean17 = point8.dominates(point11);
        int int18 = point11.getY();
        int int19 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int26 = point25.getY();
        boolean boolean27 = point22.dominates(point25);
        int int28 = point22.getY();
        boolean boolean29 = point11.dominates(point22);
        boolean boolean30 = point5.dominates(point22);
        boolean boolean31 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass32 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test2859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2859");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        int int14 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean18 = point11.dominates(point17);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean22 = point11.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        int int31 = point28.getY();
        boolean boolean32 = point11.dominates(point28);
        boolean boolean33 = point5.dominates(point28);
        int int34 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) -1);
        int int38 = point37.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point47.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        boolean boolean57 = point47.dominates(point55);
        boolean boolean58 = point41.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int62 = point61.getX();
        int int63 = point61.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        int int71 = point69.getY();
        int int72 = point69.getX();
        boolean boolean73 = point61.dominates(point69);
        boolean boolean74 = point55.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int78 = point77.getX();
        boolean boolean79 = point69.dominates(point77);
        boolean boolean80 = point37.dominates(point69);
        int int81 = point69.getX();
        boolean boolean82 = point28.dominates(point69);
        int int83 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int87 = point86.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean91 = point86.dominates(point90);
        int int92 = point90.getY();
        boolean boolean93 = point28.dominates(point90);
        int int94 = point28.getY();
        boolean boolean95 = point2.dominates(point28);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test2860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2860");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int3 = point2.getY();
        int int4 = point2.getX();
        int int5 = point2.getX();
        int int6 = point2.getY();
        java.lang.Class<?> wildcardClass7 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2861");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point49 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList55, pointArray54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm57.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm46.produceFinalSkyLine(pointList55, pointList58);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm45.produceSubSkyLines(pointList55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm61.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm31.produceFinalSkyLine(pointList60, pointList62);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm31.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean73 = point69.dominates(point72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point69 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList75, pointArray74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm77.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm66.produceFinalSkyLine(pointList75, pointList78);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm65.produceSubSkyLines(pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm31.produceSubSkyLines(pointList80);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.produceSubSkyLines(pointList81);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm0.produceSubSkyLines(pointList83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(pointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(pointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
    }

    @Test
    public void test2862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2862");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 52);
        int int3 = point2.getY();
        int int4 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
    }

    @Test
    public void test2863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2863");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        boolean boolean30 = point13.dominates(point19);
        int int31 = point13.getX();
        int int32 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int36 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean40 = point35.dominates(point39);
        boolean boolean41 = point13.dominates(point35);
        int int42 = point13.getY();
        int int43 = point13.getY();
        int int44 = point13.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test2864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2864");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) (short) -1);
    }

    @Test
    public void test2865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2865");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList21 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass22 = pointList21.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertNotNull(pointList21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test2866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2866");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        int int20 = point2.getY();
        int int21 = point2.getY();
        int int22 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int26 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point29.getX();
        boolean boolean35 = point25.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int39 = point38.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point42.getX();
        boolean boolean48 = point38.dominates(point42);
        int int49 = point42.getX();
        boolean boolean50 = point25.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        int int58 = point56.getY();
        int int59 = point56.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean63 = point56.dominates(point62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        int int71 = point69.getY();
        int int72 = point69.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean76 = point69.dominates(point75);
        boolean boolean77 = point56.dominates(point69);
        boolean boolean78 = point42.dominates(point69);
        int int79 = point69.getY();
        int int80 = point69.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int84 = point83.getX();
        int int85 = point83.getY();
        int int86 = point83.getY();
        boolean boolean87 = point69.dominates(point83);
        int int88 = point83.getX();
        boolean boolean89 = point2.dominates(point83);
        int int90 = point2.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 52 + "'", int85 == 52);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 52 + "'", int86 == 52);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 35 + "'", int90 == 35);
    }

    @Test
    public void test2867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2867");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        int int8 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = point6.dominates(point9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    }

    @Test
    public void test2868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2868");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getX();
        int int14 = point6.getY();
        int int15 = point6.getY();
        int int16 = point6.getY();
        int int17 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) '4');
        boolean boolean21 = point6.dominates(point20);
        int int22 = point20.getX();
        java.lang.Class<?> wildcardClass23 = point20.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test2869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2869");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 1);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 100);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        int int9 = point6.getX();
        int int10 = point6.getY();
        int int11 = point6.getY();
        int int12 = point6.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test2870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2870");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int6 = point5.getX();
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean11 = point5.dominates(point10);
        boolean boolean12 = point2.dominates(point10);
        int int13 = point2.getY();
        int int14 = point2.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
    }

    @Test
    public void test2871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2871");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        int int18 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        int int29 = point24.getX();
        boolean boolean30 = point21.dominates(point24);
        boolean boolean31 = point15.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        int int42 = point40.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        boolean boolean50 = point40.dominates(point48);
        boolean boolean51 = point34.dominates(point48);
        int int52 = point48.getY();
        boolean boolean53 = point24.dominates(point48);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test2872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2872");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int11 = point10.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        int int19 = point14.getX();
        boolean boolean20 = point10.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int24 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point27.getX();
        boolean boolean33 = point23.dominates(point27);
        int int34 = point27.getX();
        boolean boolean35 = point10.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int39 = point38.getX();
        int int40 = point38.getY();
        boolean boolean41 = point10.dominates(point38);
        boolean boolean42 = point5.dominates(point38);
        int int43 = point38.getX();
        int int44 = point38.getY();
        boolean boolean45 = point2.dominates(point38);
        int int46 = point2.getY();
        java.lang.Class<?> wildcardClass47 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test2873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2873");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 0);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int10 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        int int18 = point13.getX();
        boolean boolean19 = point9.dominates(point13);
        int int20 = point13.getY();
        boolean boolean21 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        boolean boolean40 = point30.dominates(point38);
        int int41 = point30.getX();
        int int42 = point30.getY();
        boolean boolean43 = point24.dominates(point30);
        int int44 = point24.getX();
        boolean boolean45 = point13.dominates(point24);
        int int46 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int50 = point49.getX();
        int int51 = point49.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int55 = point54.getX();
        boolean boolean56 = point49.dominates(point54);
        int int57 = point49.getX();
        int int58 = point49.getY();
        boolean boolean59 = point24.dominates(point49);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test2874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2874");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) '4');
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
    }

    @Test
    public void test2875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2875");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList2 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList3 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList4 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point8 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList14, pointArray13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm16.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm5.produceFinalSkyLine(pointList14, pointList17);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm5.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm5.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point24 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList30, pointArray29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm21.produceFinalSkyLine(pointList30, pointList33);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm5.produceSubSkyLines(pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm5.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm5.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = skylineAlgorithm5.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point43 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList49, pointArray48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm51.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm40.produceFinalSkyLine(pointList49, pointList52);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = skylineAlgorithm39.produceSubSkyLines(pointList49);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm5.produceSubSkyLines(pointList54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean64 = point60.dominates(point63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point60 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList66, pointArray65);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm68.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = skylineAlgorithm57.produceFinalSkyLine(pointList66, pointList69);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = skylineAlgorithm56.produceSubSkyLines(pointList66);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = skylineAlgorithm56.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm56.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm56.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm56.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm56.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm0.produceFinalSkyLine(pointList55, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(pointList2);
        org.junit.Assert.assertNotNull(pointList3);
        org.junit.Assert.assertNotNull(pointList4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(pointArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(pointArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertNotNull(pointList38);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(pointArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertNotNull(pointList54);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(pointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(pointList69);
        org.junit.Assert.assertNotNull(pointList70);
        org.junit.Assert.assertNotNull(pointList71);
        org.junit.Assert.assertNotNull(pointList72);
        org.junit.Assert.assertNotNull(pointList73);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
    }

    @Test
    public void test2876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2876");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 0);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int11 = point10.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        int int19 = point14.getX();
        boolean boolean20 = point10.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int24 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point27.getX();
        boolean boolean33 = point23.dominates(point27);
        int int34 = point27.getX();
        boolean boolean35 = point10.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point41.getY();
        int int44 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean48 = point41.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        int int56 = point54.getY();
        int int57 = point54.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean61 = point54.dominates(point60);
        boolean boolean62 = point41.dominates(point54);
        boolean boolean63 = point27.dominates(point54);
        int int64 = point54.getY();
        int int65 = point54.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int69 = point68.getX();
        int int70 = point68.getY();
        int int71 = point68.getY();
        boolean boolean72 = point54.dominates(point68);
        int int73 = point54.getX();
        boolean boolean74 = point6.dominates(point54);
        boolean boolean75 = point2.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (byte) 1);
        boolean boolean79 = point2.dominates(point78);
        int int80 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int84 = point83.getY();
        int int85 = point83.getY();
        int int86 = point83.getY();
        boolean boolean87 = point2.dominates(point83);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 97 + "'", int84 == 97);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 97 + "'", int85 == 97);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 97 + "'", int86 == 97);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test2877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2877");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point39 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList45, pointArray44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm36.produceFinalSkyLine(pointList45, pointList48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point53 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList59, pointArray58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm61.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm50.produceFinalSkyLine(pointList59, pointList62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point68 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList74, pointArray73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm76.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm65.produceFinalSkyLine(pointList74, pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm64.produceSubSkyLines(pointList74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean87 = point83.dominates(point86);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray88 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point83 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList89, pointArray88);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm91 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm91.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm80.produceFinalSkyLine(pointList89, pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm64.produceSubSkyLines(pointList93);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm36.produceFinalSkyLine(pointList59, pointList93);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.produceSubSkyLines(pointList59);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(pointArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(pointArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(pointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(pointArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
    }

    @Test
    public void test2878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2878");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, 0);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        int int15 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean19 = point12.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean23 = point12.dominates(point22);
        int int24 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point12.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int36 = point35.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point39.getX();
        boolean boolean45 = point35.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int49 = point48.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        int int57 = point52.getX();
        boolean boolean58 = point48.dominates(point52);
        int int59 = point52.getX();
        boolean boolean60 = point35.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int64 = point63.getX();
        int int65 = point63.getY();
        boolean boolean66 = point35.dominates(point63);
        boolean boolean67 = point12.dominates(point35);
        int int68 = point12.getY();
        boolean boolean69 = point5.dominates(point12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) '4');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int76 = point75.getX();
        int int77 = point75.getX();
        int int78 = point75.getX();
        int int79 = point75.getY();
        boolean boolean80 = point72.dominates(point75);
        boolean boolean81 = point5.dominates(point72);
        int int82 = point72.getY();
        int int83 = point72.getX();
        java.lang.Class<?> wildcardClass84 = point72.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 52 + "'", int82 == 52);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test2879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2879");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int21 = point20.getX();
        boolean boolean22 = point5.dominates(point20);
        int int23 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int27 = point26.getX();
        int int28 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int32 = point31.getX();
        boolean boolean33 = point26.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) '#');
        int int37 = point36.getX();
        boolean boolean38 = point31.dominates(point36);
        int int39 = point36.getY();
        int int40 = point36.getX();
        boolean boolean41 = point20.dominates(point36);
        int int42 = point20.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test2880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2880");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) (short) 10);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 97);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int11 = point10.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int15 = point14.getX();
        int int16 = point14.getX();
        int int17 = point14.getX();
        int int18 = point14.getY();
        int int19 = point14.getY();
        boolean boolean20 = point10.dominates(point14);
        int int21 = point10.getY();
        boolean boolean22 = point6.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int26 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point29.getX();
        boolean boolean35 = point25.dominates(point29);
        int int36 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        boolean boolean52 = point42.dominates(point50);
        int int53 = point50.getX();
        int int54 = point50.getX();
        boolean boolean55 = point25.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        int int64 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean68 = point61.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean75 = point71.dominates(point74);
        int int76 = point74.getY();
        int int77 = point74.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean81 = point74.dominates(point80);
        boolean boolean82 = point61.dominates(point74);
        boolean boolean83 = point25.dominates(point61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean87 = point61.dominates(point86);
        boolean boolean88 = point10.dominates(point86);
        boolean boolean89 = point2.dominates(point10);
        int int90 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
    }

    @Test
    public void test2881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2881");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, 97);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int9 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int13 = point12.getX();
        int int14 = point12.getX();
        int int15 = point12.getX();
        int int16 = point12.getY();
        int int17 = point12.getY();
        boolean boolean18 = point8.dominates(point12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) -1);
        int int22 = point21.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        boolean boolean41 = point31.dominates(point39);
        boolean boolean42 = point25.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int46 = point45.getX();
        int int47 = point45.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        int int55 = point53.getY();
        int int56 = point53.getX();
        boolean boolean57 = point45.dominates(point53);
        boolean boolean58 = point39.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int62 = point61.getX();
        boolean boolean63 = point53.dominates(point61);
        boolean boolean64 = point21.dominates(point53);
        int int65 = point21.getX();
        int int66 = point21.getX();
        boolean boolean67 = point12.dominates(point21);
        boolean boolean68 = point5.dominates(point12);
        boolean boolean69 = point2.dominates(point5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test2882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2882");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.produceSubSkyLines(pointList52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean65 = point61.dominates(point64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point61 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList67, pointArray66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = skylineAlgorithm69.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = skylineAlgorithm58.produceFinalSkyLine(pointList67, pointList70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean80 = point76.dominates(point79);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point76 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList82, pointArray81);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm84.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm73.produceFinalSkyLine(pointList82, pointList85);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm72.produceSubSkyLines(pointList82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm88 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm88.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm58.produceFinalSkyLine(pointList87, pointList89);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm0.produceSubSkyLines(pointList90);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(pointArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(pointList70);
        org.junit.Assert.assertNotNull(pointList71);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(pointArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
        org.junit.Assert.assertNotNull(pointList87);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
    }

    @Test
    public void test2883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2883");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) 100);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test2884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2884");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList21 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList22 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm28.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point49 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList55, pointArray54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm57.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm46.produceFinalSkyLine(pointList55, pointList58);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm30.produceFinalSkyLine(pointList45, pointList58);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm28.produceSubSkyLines(pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm28.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm28.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm28.produceSubSkyLines(pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm0.produceSubSkyLines(pointList78);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertNotNull(pointList21);
        org.junit.Assert.assertNotNull(pointList22);
        org.junit.Assert.assertNotNull(pointList23);
        org.junit.Assert.assertNotNull(pointList24);
        org.junit.Assert.assertNotNull(pointList25);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(pointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
    }

    @Test
    public void test2885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2885");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (int) (short) 100);
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test2886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2886");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        int int21 = point16.getY();
        int int22 = point16.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 52);
        boolean boolean26 = point16.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int30 = point29.getX();
        int int31 = point29.getY();
        int int32 = point29.getY();
        boolean boolean33 = point25.dominates(point29);
        int int34 = point25.getX();
        java.lang.Class<?> wildcardClass35 = point25.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2887");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int8 = point7.getX();
        int int9 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getX();
        boolean boolean19 = point7.dominates(point15);
        int int20 = point7.getX();
        int int21 = point7.getX();
        boolean boolean22 = point2.dominates(point7);
        int int23 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point32.getX();
        boolean boolean38 = point29.dominates(point32);
        boolean boolean39 = point26.dominates(point29);
        int int40 = point29.getY();
        boolean boolean41 = point2.dominates(point29);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test2888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2888");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 10);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test2889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2889");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        int int33 = point30.getX();
        int int34 = point30.getX();
        boolean boolean35 = point5.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point41.getY();
        int int44 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean48 = point41.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        int int56 = point54.getY();
        int int57 = point54.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean61 = point54.dominates(point60);
        boolean boolean62 = point41.dominates(point54);
        boolean boolean63 = point5.dominates(point41);
        int int64 = point41.getX();
        int int65 = point41.getY();
        int int66 = point41.getX();
        boolean boolean67 = point2.dominates(point41);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test2890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2890");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean10 = point6.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int14 = point13.getX();
        int int15 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int19 = point18.getX();
        boolean boolean20 = point13.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int24 = point23.getY();
        boolean boolean25 = point18.dominates(point23);
        int int26 = point18.getX();
        boolean boolean27 = point9.dominates(point18);
        int int28 = point9.getY();
        boolean boolean29 = point2.dominates(point9);
        java.lang.Class<?> wildcardClass30 = point9.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test2891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2891");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (int) '#');
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2892");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 10);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        boolean boolean30 = point20.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        int int41 = point39.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        boolean boolean49 = point39.dominates(point47);
        boolean boolean50 = point33.dominates(point47);
        boolean boolean51 = point28.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int55 = point54.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point58.getX();
        boolean boolean64 = point54.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int68 = point67.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean75 = point71.dominates(point74);
        int int76 = point71.getX();
        boolean boolean77 = point67.dominates(point71);
        int int78 = point71.getX();
        boolean boolean79 = point54.dominates(point71);
        int int80 = point54.getY();
        int int81 = point54.getY();
        int int82 = point54.getX();
        boolean boolean83 = point28.dominates(point54);
        boolean boolean84 = point2.dominates(point28);
        int int85 = point2.getY();
        int int86 = point2.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 52 + "'", int80 == 52);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test2893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2893");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) (short) 10);
        int int3 = point2.getX();
        int int4 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test2894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2894");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getX();
        int int8 = point2.getY();
        int int9 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 100);
        int int13 = point12.getY();
        boolean boolean14 = point2.dominates(point12);
        int int15 = point12.getY();
        int int16 = point12.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
    }

    @Test
    public void test2895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2895");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int22 = point21.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int26 = point25.getX();
        int int27 = point25.getX();
        int int28 = point25.getX();
        int int29 = point25.getY();
        int int30 = point25.getY();
        boolean boolean31 = point21.dominates(point25);
        boolean boolean32 = point5.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (int) (short) -1);
        boolean boolean36 = point5.dominates(point35);
        int int37 = point35.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test2896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2896");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int10 = point9.getX();
        int int11 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int15 = point14.getX();
        boolean boolean16 = point9.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int20 = point19.getY();
        boolean boolean21 = point14.dominates(point19);
        int int22 = point14.getX();
        boolean boolean23 = point5.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        boolean boolean42 = point32.dominates(point40);
        int int43 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int47 = point46.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        int int55 = point50.getX();
        boolean boolean56 = point46.dominates(point50);
        boolean boolean57 = point40.dominates(point46);
        boolean boolean58 = point26.dominates(point40);
        int int59 = point26.getY();
        int int60 = point26.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        boolean boolean70 = point66.dominates(point69);
        boolean boolean71 = point63.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 0);
        int int75 = point74.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int79 = point78.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int83 = point82.getY();
        boolean boolean84 = point78.dominates(point82);
        int int85 = point78.getY();
        boolean boolean86 = point74.dominates(point78);
        boolean boolean87 = point63.dominates(point78);
        boolean boolean88 = point26.dominates(point63);
        boolean boolean89 = point5.dominates(point63);
        int int90 = point5.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 32 + "'", int75 == 32);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 32 + "'", int83 == 32);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 100 + "'", int90 == 100);
    }

    @Test
    public void test2897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2897");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) (byte) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        int int6 = point5.getX();
        int int7 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean11 = point5.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getY();
        int int14 = point10.getY();
        boolean boolean15 = point2.dominates(point10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2898");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getY();
        java.lang.Class<?> wildcardClass6 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2899");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (-1));
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) ' ');
        int int8 = point7.getY();
        int int9 = point7.getX();
        boolean boolean10 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        int int18 = point16.getY();
        int int19 = point16.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean23 = point16.dominates(point22);
        int int24 = point16.getY();
        int int25 = point16.getX();
        int int26 = point16.getX();
        boolean boolean27 = point7.dominates(point16);
        int int28 = point16.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test2900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2900");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int18 = point17.getX();
        boolean boolean19 = point2.dominates(point17);
        int int20 = point17.getX();
        int int21 = point17.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test2901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2901");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point33.dominates(point46);
        boolean boolean55 = point19.dominates(point46);
        int int56 = point46.getY();
        int int57 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int61 = point60.getY();
        int int62 = point60.getY();
        int int63 = point60.getY();
        boolean boolean64 = point46.dominates(point60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', (int) (byte) 0);
        boolean boolean68 = point46.dominates(point67);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test2902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2902");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int6 = point5.getX();
        int int7 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int11 = point10.getX();
        boolean boolean12 = point5.dominates(point10);
        boolean boolean13 = point2.dominates(point5);
        int int14 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int18 = point17.getY();
        int int19 = point17.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        boolean boolean38 = point28.dominates(point36);
        int int39 = point36.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int43 = point42.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        int int51 = point46.getX();
        boolean boolean52 = point42.dominates(point46);
        boolean boolean53 = point36.dominates(point42);
        boolean boolean54 = point22.dominates(point36);
        boolean boolean55 = point17.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int59 = point58.getX();
        int int60 = point58.getX();
        int int61 = point58.getY();
        int int62 = point58.getY();
        int int63 = point58.getX();
        int int64 = point58.getX();
        int int65 = point58.getX();
        int int66 = point58.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int70 = point69.getX();
        int int71 = point69.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean75 = point69.dominates(point74);
        boolean boolean76 = point58.dominates(point69);
        boolean boolean77 = point17.dominates(point58);
        boolean boolean78 = point2.dominates(point58);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test2903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2903");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (byte) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean19 = point8.dominates(point18);
        boolean boolean20 = point2.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point29.dominates(point37);
        boolean boolean40 = point23.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int44 = point43.getX();
        int int45 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getX();
        boolean boolean55 = point43.dominates(point51);
        boolean boolean56 = point37.dominates(point51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int60 = point59.getX();
        boolean boolean61 = point51.dominates(point59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        boolean boolean65 = point59.dominates(point64);
        boolean boolean66 = point8.dominates(point64);
        int int67 = point64.getY();
        int int68 = point64.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
    }

    @Test
    public void test2904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2904");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getX();
        int int8 = point2.getY();
        int int9 = point2.getX();
        int int10 = point2.getX();
        java.lang.Class<?> wildcardClass11 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2905");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int9 = point8.getY();
        boolean boolean10 = point5.dominates(point8);
        boolean boolean11 = point2.dominates(point5);
        int int12 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int16 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int20 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int24 = point23.getY();
        boolean boolean25 = point19.dominates(point23);
        int int26 = point19.getY();
        boolean boolean27 = point15.dominates(point19);
        boolean boolean28 = point2.dominates(point19);
        java.lang.Class<?> wildcardClass29 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test2906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2906");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point8.getX();
        boolean boolean14 = point5.dominates(point8);
        int int15 = point8.getX();
        int int16 = point8.getX();
        boolean boolean17 = point2.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', (int) (byte) 100);
        int int21 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        int int29 = point27.getY();
        int int30 = point27.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean34 = point27.dominates(point33);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean38 = point27.dominates(point37);
        int int39 = point37.getX();
        boolean boolean40 = point20.dominates(point37);
        boolean boolean41 = point8.dominates(point20);
        java.lang.Class<?> wildcardClass42 = point20.getClass();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test2907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2907");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point23 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList29, pointArray28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm20.produceFinalSkyLine(pointList29, pointList32);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm19.produceSubSkyLines(pointList29);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm19.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm19.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point41 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList47, pointArray46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm49.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm38.produceFinalSkyLine(pointList47, pointList50);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm37.produceSubSkyLines(pointList47);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm19.produceSubSkyLines(pointList47);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = skylineAlgorithm19.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm19.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm19.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm19.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm19.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm59.getPoints();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm0.produceFinalSkyLine(pointList58, pointList67);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(pointArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(pointArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertNotNull(pointList54);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
    }

    @Test
    public void test2908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2908");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int21 = point20.getX();
        int int22 = point20.getX();
        int int23 = point20.getX();
        int int24 = point20.getY();
        boolean boolean25 = point15.dominates(point20);
        int int26 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        boolean boolean35 = point15.dominates(point32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, 32);
        int int39 = point38.getY();
        boolean boolean40 = point15.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int44 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point47.getX();
        boolean boolean53 = point43.dominates(point47);
        int int54 = point43.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        int int62 = point60.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        boolean boolean70 = point60.dominates(point68);
        int int71 = point68.getX();
        int int72 = point68.getX();
        boolean boolean73 = point43.dominates(point68);
        int int74 = point68.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int78 = point77.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean85 = point81.dominates(point84);
        int int86 = point81.getX();
        boolean boolean87 = point77.dominates(point81);
        int int88 = point77.getY();
        boolean boolean89 = point68.dominates(point77);
        int int90 = point77.getX();
        boolean boolean91 = point38.dominates(point77);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 32 + "'", int39 == 32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test2909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2909");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int21 = point20.getX();
        int int22 = point20.getX();
        int int23 = point20.getX();
        int int24 = point20.getY();
        boolean boolean25 = point15.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int29 = point28.getX();
        int int30 = point28.getX();
        boolean boolean31 = point20.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point20.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) 'a');
        int int43 = point42.getX();
        boolean boolean44 = point20.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point50.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        boolean boolean60 = point50.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        boolean boolean68 = point58.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean78 = point74.dominates(point77);
        int int79 = point77.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        boolean boolean87 = point77.dominates(point85);
        boolean boolean88 = point71.dominates(point85);
        boolean boolean89 = point66.dominates(point85);
        int int90 = point66.getY();
        boolean boolean91 = point20.dominates(point66);
        int int92 = point20.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 52 + "'", int92 == 52);
    }

    @Test
    public void test2910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2910");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) -1);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, 10);
        boolean boolean10 = point5.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int14 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        boolean boolean33 = point23.dominates(point31);
        boolean boolean34 = point17.dominates(point31);
        int int35 = point17.getY();
        int int36 = point17.getY();
        boolean boolean37 = point13.dominates(point17);
        boolean boolean38 = point9.dominates(point17);
        int int39 = point9.getX();
        java.lang.Class<?> wildcardClass40 = point9.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2911");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 0);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getY();
        int int6 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2912");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (short) -1);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test2913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2913");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int3 = point2.getY();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        int int24 = point21.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int28 = point27.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point31.getX();
        boolean boolean37 = point27.dominates(point31);
        boolean boolean38 = point21.dominates(point27);
        boolean boolean39 = point7.dominates(point21);
        int int40 = point21.getY();
        int int41 = point21.getX();
        boolean boolean42 = point2.dominates(point21);
        java.lang.Class<?> wildcardClass43 = point21.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test2914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2914");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean16 = point9.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean20 = point9.dominates(point19);
        int int21 = point19.getX();
        int int22 = point19.getX();
        int int23 = point19.getX();
        boolean boolean24 = point2.dominates(point19);
        java.lang.Class<?> wildcardClass25 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2915");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int9 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point12.getX();
        boolean boolean18 = point8.dominates(point12);
        int int19 = point12.getX();
        boolean boolean20 = point5.dominates(point12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int27 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point30.getX();
        boolean boolean36 = point26.dominates(point30);
        int int37 = point30.getX();
        int int38 = point30.getY();
        int int39 = point30.getY();
        boolean boolean40 = point23.dominates(point30);
        boolean boolean41 = point5.dominates(point23);
        int int42 = point23.getX();
        boolean boolean43 = point2.dominates(point23);
        java.lang.Class<?> wildcardClass44 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test2916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2916");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (byte) 10);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getY();
        int int8 = point2.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test2917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2917");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) '4');
        int int6 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int10 = point9.getY();
        boolean boolean11 = point5.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        boolean boolean33 = point23.dominates(point31);
        int int34 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int38 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point41.getX();
        boolean boolean47 = point37.dominates(point41);
        boolean boolean48 = point31.dominates(point37);
        boolean boolean49 = point17.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int53 = point52.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean60 = point56.dominates(point59);
        int int61 = point56.getX();
        boolean boolean62 = point52.dominates(point56);
        int int63 = point56.getX();
        int int64 = point56.getY();
        boolean boolean65 = point17.dominates(point56);
        boolean boolean66 = point14.dominates(point56);
        int int67 = point14.getY();
        boolean boolean68 = point5.dominates(point14);
        boolean boolean69 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass70 = point5.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2918");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 52);
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test2919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2919");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int9 = point8.getY();
        boolean boolean10 = point2.dominates(point8);
        int int11 = point8.getX();
        int int12 = point8.getX();
        int int13 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        int int30 = point23.getX();
        boolean boolean31 = point16.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int38 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point41.getX();
        boolean boolean47 = point37.dominates(point41);
        int int48 = point41.getX();
        int int49 = point41.getY();
        int int50 = point41.getY();
        boolean boolean51 = point34.dominates(point41);
        boolean boolean52 = point16.dominates(point34);
        int int53 = point34.getX();
        boolean boolean54 = point8.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        int int62 = point60.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        boolean boolean70 = point60.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean77 = point73.dominates(point76);
        boolean boolean78 = point68.dominates(point76);
        int int79 = point76.getY();
        int int80 = point76.getX();
        int int81 = point76.getY();
        boolean boolean82 = point8.dominates(point76);
        int int83 = point76.getX();
        int int84 = point76.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test2920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2920");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int6 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 0);
        int int10 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int14 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point17.getX();
        boolean boolean23 = point13.dominates(point17);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int27 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point30.getX();
        boolean boolean36 = point26.dominates(point30);
        int int37 = point30.getX();
        boolean boolean38 = point13.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point44.getY();
        int int47 = point44.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean51 = point44.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        int int59 = point57.getY();
        int int60 = point57.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean64 = point57.dominates(point63);
        boolean boolean65 = point44.dominates(point57);
        boolean boolean66 = point30.dominates(point57);
        int int67 = point57.getY();
        int int68 = point57.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int72 = point71.getX();
        int int73 = point71.getY();
        int int74 = point71.getY();
        boolean boolean75 = point57.dominates(point71);
        int int76 = point57.getX();
        boolean boolean77 = point9.dominates(point57);
        boolean boolean78 = point5.dominates(point57);
        boolean boolean79 = point2.dominates(point57);
        int int80 = point57.getY();
        int int81 = point57.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
    }

    @Test
    public void test2921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2921");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getX();
        int int18 = point5.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test2922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2922");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, (int) (byte) -1);
    }

    @Test
    public void test2923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2923");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        boolean boolean21 = point11.dominates(point19);
        boolean boolean22 = point5.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean26 = point19.dominates(point25);
        boolean boolean27 = point2.dominates(point19);
        int int28 = point2.getX();
        int int29 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
    }

    @Test
    public void test2924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2924");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        int int15 = point2.getX();
        int int16 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int20 = point19.getX();
        int int21 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        int int29 = point27.getY();
        int int30 = point27.getX();
        boolean boolean31 = point19.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        boolean boolean40 = point27.dominates(point37);
        boolean boolean41 = point2.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) '#');
        boolean boolean45 = point37.dominates(point44);
        int int46 = point37.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 32 + "'", int46 == 32);
    }

    @Test
    public void test2925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2925");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (-1));
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int7 = point6.getX();
        int int8 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int12 = point11.getX();
        boolean boolean13 = point6.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) 'a');
        boolean boolean17 = point11.dominates(point16);
        int int18 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int22 = point21.getX();
        int int23 = point21.getY();
        int int24 = point21.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int28 = point27.getY();
        boolean boolean29 = point21.dominates(point27);
        int int30 = point27.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (byte) -1);
        int int34 = point33.getX();
        boolean boolean35 = point27.dominates(point33);
        boolean boolean36 = point16.dominates(point33);
        boolean boolean37 = point2.dominates(point16);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test2926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2926");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getX();
        java.lang.Class<?> wildcardClass8 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2927");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        int int24 = point21.getY();
        int int25 = point21.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, 32);
        boolean boolean29 = point21.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 100);
        int int33 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, 100);
        boolean boolean37 = point32.dominates(point36);
        boolean boolean38 = point21.dominates(point36);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test2928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2928");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.produceSubSkyLines(pointList41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm0.produceFinalSkyLine(pointList41, pointList50);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass58 = pointList57.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertNotNull(pointList54);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test2929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2929");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 1);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
    }

    @Test
    public void test2930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2930");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) '4');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        int int8 = point5.getY();
        boolean boolean9 = point2.dominates(point5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2931");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList2 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList3 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList4 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point9 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList15, pointArray14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm17.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm6.produceFinalSkyLine(pointList15, pointList18);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm5.produceSubSkyLines(pointList15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point24 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList30, pointArray29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm21.produceFinalSkyLine(pointList30, pointList33);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm5.produceSubSkyLines(pointList34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point39 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList45, pointArray44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm36.produceFinalSkyLine(pointList45, pointList48);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm36.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm36.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm36.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = skylineAlgorithm53.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point58 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList64, pointArray63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm66.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm55.produceFinalSkyLine(pointList64, pointList67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean76 = point72.dominates(point75);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point72 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList78, pointArray77);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm80.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm69.produceFinalSkyLine(pointList78, pointList81);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm53.produceFinalSkyLine(pointList68, pointList81);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm36.produceSubSkyLines(pointList83);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm5.produceSubSkyLines(pointList84);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm0.produceSubSkyLines(pointList85);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(pointList2);
        org.junit.Assert.assertNotNull(pointList3);
        org.junit.Assert.assertNotNull(pointList4);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(pointArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(pointArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(pointArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList54);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(pointArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(pointArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
        org.junit.Assert.assertNotNull(pointList87);
    }

    @Test
    public void test2932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2932");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, 52);
    }

    @Test
    public void test2933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2933");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        int int24 = point21.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int28 = point27.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point31.getX();
        boolean boolean37 = point27.dominates(point31);
        boolean boolean38 = point21.dominates(point27);
        boolean boolean39 = point7.dominates(point21);
        boolean boolean40 = point2.dominates(point7);
        int int41 = point7.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test2934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2934");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm31.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point55 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList61, pointArray60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm63.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm52.produceFinalSkyLine(pointList61, pointList64);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm31.produceSubSkyLines(pointList61);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm0.produceSubSkyLines(pointList66);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass70 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(pointArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertNotNull(pointList69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2935");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point8.getX();
        int int20 = point8.getY();
        boolean boolean21 = point2.dominates(point8);
        int int22 = point2.getY();
        int int23 = point2.getY();
        int int24 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
    }

    @Test
    public void test2936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2936");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getX();
        int int14 = point6.getY();
        int int15 = point6.getY();
        int int16 = point6.getY();
        int int17 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) '4');
        boolean boolean21 = point6.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 100);
        int int25 = point24.getX();
        boolean boolean26 = point6.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int33 = point32.getX();
        int int34 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean38 = point32.dominates(point37);
        boolean boolean39 = point29.dominates(point37);
        boolean boolean40 = point6.dominates(point29);
        int int41 = point6.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test2937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2937");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int21 = point20.getX();
        int int22 = point20.getX();
        int int23 = point20.getX();
        int int24 = point20.getY();
        boolean boolean25 = point15.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int29 = point28.getX();
        int int30 = point28.getX();
        boolean boolean31 = point20.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point20.dominates(point37);
        int int40 = point37.getX();
        int int41 = point37.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test2938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2938");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        int int8 = point5.getY();
        boolean boolean9 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int16 = point15.getX();
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int21 = point20.getX();
        boolean boolean22 = point15.dominates(point20);
        boolean boolean23 = point12.dominates(point15);
        boolean boolean24 = point5.dominates(point15);
        java.lang.Class<?> wildcardClass25 = point15.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2939");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        int int9 = point5.getX();
        int int10 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int17 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point20.getX();
        boolean boolean26 = point16.dominates(point20);
        int int27 = point20.getX();
        int int28 = point20.getY();
        int int29 = point20.getY();
        boolean boolean30 = point13.dominates(point20);
        boolean boolean31 = point5.dominates(point20);
        int int32 = point20.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test2940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2940");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean19 = point8.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        int int28 = point25.getY();
        boolean boolean29 = point8.dominates(point25);
        boolean boolean30 = point2.dominates(point25);
        int int31 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) -1);
        int int35 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point44.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        boolean boolean54 = point44.dominates(point52);
        boolean boolean55 = point38.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int59 = point58.getX();
        int int60 = point58.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        int int68 = point66.getY();
        int int69 = point66.getX();
        boolean boolean70 = point58.dominates(point66);
        boolean boolean71 = point52.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int75 = point74.getX();
        boolean boolean76 = point66.dominates(point74);
        boolean boolean77 = point34.dominates(point66);
        int int78 = point66.getX();
        boolean boolean79 = point25.dominates(point66);
        int int80 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (byte) 10);
        int int84 = point83.getX();
        int int85 = point83.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point88 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        int int89 = point88.getX();
        boolean boolean90 = point83.dominates(point88);
        boolean boolean91 = point25.dominates(point83);
        java.lang.Class<?> wildcardClass92 = point25.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2941");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point7.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        boolean boolean40 = point30.dominates(point38);
        int int41 = point38.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int45 = point44.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point48.getX();
        boolean boolean54 = point44.dominates(point48);
        boolean boolean55 = point38.dominates(point44);
        boolean boolean56 = point24.dominates(point38);
        boolean boolean57 = point7.dominates(point24);
        boolean boolean58 = point2.dominates(point7);
        int int59 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 52);
        boolean boolean63 = point2.dominates(point62);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test2942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2942");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        int int33 = point27.getX();
        int int34 = point27.getX();
        int int35 = point27.getX();
        int int36 = point27.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 97);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int43 = point42.getY();
        boolean boolean44 = point39.dominates(point42);
        int int45 = point39.getX();
        boolean boolean46 = point27.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        int int54 = point52.getY();
        int int55 = point52.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean59 = point52.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean63 = point52.dominates(point62);
        int int64 = point52.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int68 = point67.getX();
        boolean boolean69 = point52.dominates(point67);
        int int70 = point67.getX();
        int int71 = point67.getY();
        int int72 = point67.getX();
        boolean boolean73 = point27.dominates(point67);
        int int74 = point27.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
    }

    @Test
    public void test2943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2943");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getY();
        int int6 = point2.getY();
        int int7 = point2.getX();
        int int8 = point2.getX();
        int int9 = point2.getX();
        int int10 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int14 = point13.getX();
        int int15 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean19 = point13.dominates(point18);
        boolean boolean20 = point2.dominates(point13);
        int int21 = point13.getY();
        int int22 = point13.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test2944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2944");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList21 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList22 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm28.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point49 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList55, pointArray54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm57.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm46.produceFinalSkyLine(pointList55, pointList58);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm30.produceFinalSkyLine(pointList45, pointList58);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm28.produceSubSkyLines(pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm62.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean85 = point81.dominates(point84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point81 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList87, pointArray86);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm89.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm78.produceFinalSkyLine(pointList87, pointList90);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm62.produceFinalSkyLine(pointList77, pointList90);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.produceFinalSkyLine(pointList60, pointList96);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertNotNull(pointList21);
        org.junit.Assert.assertNotNull(pointList22);
        org.junit.Assert.assertNotNull(pointList23);
        org.junit.Assert.assertNotNull(pointList24);
        org.junit.Assert.assertNotNull(pointList25);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(pointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(pointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
    }

    @Test
    public void test2945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2945");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 1);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean22 = point15.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        boolean boolean26 = point21.dominates(point25);
        boolean boolean27 = point9.dominates(point21);
        boolean boolean28 = point2.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (-1));
        int int32 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean49 = point38.dominates(point48);
        int int50 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int54 = point53.getX();
        boolean boolean55 = point38.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (byte) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean65 = point61.dominates(point64);
        int int66 = point64.getY();
        int int67 = point64.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean71 = point64.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean75 = point64.dominates(point74);
        boolean boolean76 = point58.dominates(point64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 97);
        int int80 = point79.getX();
        boolean boolean81 = point64.dominates(point79);
        boolean boolean82 = point38.dominates(point79);
        boolean boolean83 = point31.dominates(point38);
        int int84 = point38.getY();
        boolean boolean85 = point2.dominates(point38);
        int int86 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 97 + "'", int80 == 97);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test2946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2946");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int17 = point16.getX();
        int int18 = point16.getX();
        int int19 = point16.getX();
        boolean boolean20 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, 1);
        int int24 = point23.getX();
        boolean boolean25 = point16.dominates(point23);
        int int26 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int30 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean34 = point29.dominates(point33);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        int int42 = point40.getY();
        int int43 = point40.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean47 = point40.dominates(point46);
        boolean boolean48 = point29.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int52 = point51.getX();
        int int53 = point51.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean60 = point56.dominates(point59);
        int int61 = point59.getY();
        int int62 = point59.getX();
        boolean boolean63 = point51.dominates(point59);
        int int64 = point59.getX();
        int int65 = point59.getY();
        boolean boolean66 = point40.dominates(point59);
        int int67 = point59.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 1);
        boolean boolean71 = point59.dominates(point70);
        boolean boolean72 = point23.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) '4');
        int int76 = point75.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        boolean boolean80 = point75.dominates(point79);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) (byte) -1);
        boolean boolean84 = point75.dominates(point83);
        boolean boolean85 = point23.dominates(point75);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test2947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2947");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList39 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertNotNull(pointList38);
        org.junit.Assert.assertNotNull(pointList39);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
    }

    @Test
    public void test2948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2948");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int21 = point20.getX();
        int int22 = point20.getX();
        int int23 = point20.getX();
        int int24 = point20.getY();
        boolean boolean25 = point15.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int29 = point28.getX();
        int int30 = point28.getX();
        boolean boolean31 = point20.dominates(point28);
        int int32 = point20.getX();
        java.lang.Class<?> wildcardClass33 = point20.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test2949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2949");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        int int22 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        boolean boolean38 = point28.dominates(point36);
        int int39 = point36.getX();
        int int40 = point36.getX();
        boolean boolean41 = point11.dominates(point36);
        boolean boolean42 = point7.dominates(point11);
        int int43 = point11.getY();
        boolean boolean44 = point2.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int48 = point47.getX();
        int int49 = point47.getY();
        int int50 = point47.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int54 = point53.getY();
        boolean boolean55 = point47.dominates(point53);
        boolean boolean56 = point11.dominates(point53);
        int int57 = point53.getY();
        int int58 = point53.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test2950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2950");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (short) 1);
        int int3 = point2.getY();
        int int4 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test2951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2951");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) 10);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        boolean boolean25 = point15.dominates(point23);
        int int26 = point15.getX();
        int int27 = point15.getY();
        boolean boolean28 = point9.dominates(point15);
        boolean boolean29 = point6.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int33 = point32.getX();
        int int34 = point32.getX();
        boolean boolean35 = point6.dominates(point32);
        boolean boolean36 = point2.dominates(point6);
        int int37 = point6.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 97 + "'", int37 == 97);
    }

    @Test
    public void test2952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2952");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        int int22 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        boolean boolean38 = point28.dominates(point36);
        int int39 = point36.getX();
        int int40 = point36.getX();
        boolean boolean41 = point11.dominates(point36);
        boolean boolean42 = point7.dominates(point11);
        int int43 = point11.getY();
        boolean boolean44 = point2.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int48 = point47.getX();
        int int49 = point47.getY();
        int int50 = point47.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int54 = point53.getY();
        boolean boolean55 = point47.dominates(point53);
        boolean boolean56 = point11.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (byte) -1);
        int int60 = point59.getX();
        boolean boolean61 = point11.dominates(point59);
        int int62 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        boolean boolean66 = point11.dominates(point65);
        int int67 = point65.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test2953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2953");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 32);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        boolean boolean19 = point9.dominates(point17);
        int int20 = point9.getX();
        int int21 = point9.getY();
        boolean boolean22 = point2.dominates(point9);
        int int23 = point2.getY();
        int int24 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
    }

    @Test
    public void test2954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2954");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        int int3 = point2.getX();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int14 = point13.getY();
        boolean boolean15 = point10.dominates(point13);
        boolean boolean16 = point7.dominates(point10);
        boolean boolean17 = point2.dominates(point7);
        int int18 = point2.getX();
        int int19 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int26 = point25.getX();
        int int27 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int31 = point30.getX();
        boolean boolean32 = point25.dominates(point30);
        boolean boolean33 = point22.dominates(point25);
        int int34 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int38 = point37.getX();
        int int39 = point37.getX();
        int int40 = point37.getY();
        int int41 = point37.getY();
        int int42 = point37.getX();
        int int43 = point37.getY();
        int int44 = point37.getX();
        boolean boolean45 = point25.dominates(point37);
        int int46 = point37.getX();
        boolean boolean47 = point2.dominates(point37);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 97 + "'", int44 == 97);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test2955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2955");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (short) 10);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 0);
        boolean boolean7 = point2.dominates(point6);
        int int8 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
    }

    @Test
    public void test2956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2956");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        int int28 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) -1);
        int int32 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int36 = point35.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int40 = point39.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point43.getX();
        boolean boolean49 = point39.dominates(point43);
        int int50 = point39.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        int int58 = point56.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean65 = point61.dominates(point64);
        boolean boolean66 = point56.dominates(point64);
        int int67 = point64.getX();
        int int68 = point64.getX();
        boolean boolean69 = point39.dominates(point64);
        boolean boolean70 = point35.dominates(point39);
        int int71 = point35.getY();
        int int72 = point35.getY();
        int int73 = point35.getY();
        boolean boolean74 = point31.dominates(point35);
        boolean boolean75 = point2.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 52);
        int int79 = point78.getX();
        int int80 = point78.getY();
        boolean boolean81 = point31.dominates(point78);
        java.lang.Class<?> wildcardClass82 = point31.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 97 + "'", int79 == 97);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 52 + "'", int80 == 52);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2957");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getX();
        int int14 = point6.getY();
        int int15 = point6.getY();
        int int16 = point6.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test2958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2958");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) '4');
        boolean boolean19 = point14.dominates(point18);
        boolean boolean20 = point2.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 10);
        boolean boolean24 = point2.dominates(point23);
        int int25 = point2.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
    }

    @Test
    public void test2959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2959");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        int int27 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean31 = point24.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean35 = point24.dominates(point34);
        boolean boolean36 = point5.dominates(point24);
        int int37 = point24.getX();
        int int38 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, (int) (byte) 0);
        boolean boolean42 = point24.dominates(point41);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test2960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2960");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        boolean boolean30 = point13.dominates(point19);
        int int31 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        int int40 = point37.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean44 = point37.dominates(point43);
        boolean boolean45 = point19.dominates(point37);
        int int46 = point19.getX();
        int int47 = point19.getX();
        int int48 = point19.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test2961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2961");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) '4');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        int int7 = point5.getX();
        int int8 = point5.getX();
        int int9 = point5.getY();
        boolean boolean10 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        boolean boolean30 = point13.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean34 = point27.dominates(point33);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        boolean boolean38 = point27.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 52);
        boolean boolean42 = point37.dominates(point41);
        int int43 = point37.getX();
        int int44 = point37.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int48 = point47.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int52 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int56 = point55.getY();
        boolean boolean57 = point51.dominates(point55);
        int int58 = point51.getY();
        boolean boolean59 = point47.dominates(point51);
        int int60 = point51.getY();
        int int61 = point51.getX();
        boolean boolean62 = point37.dominates(point51);
        boolean boolean63 = point5.dominates(point51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 32 + "'", int56 == 32);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 97 + "'", int61 == 97);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test2962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2962");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int8 = point7.getX();
        int int9 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getX();
        boolean boolean19 = point7.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        boolean boolean28 = point15.dominates(point25);
        boolean boolean29 = point2.dominates(point25);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test2963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2963");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int6 = point5.getX();
        int int7 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int11 = point10.getX();
        boolean boolean12 = point5.dominates(point10);
        boolean boolean13 = point2.dominates(point5);
        int int14 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int18 = point17.getX();
        int int19 = point17.getX();
        int int20 = point17.getY();
        int int21 = point17.getY();
        int int22 = point17.getX();
        int int23 = point17.getY();
        int int24 = point17.getX();
        boolean boolean25 = point5.dominates(point17);
        int int26 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 0);
        boolean boolean30 = point17.dominates(point29);
        int int31 = point17.getY();
        int int32 = point17.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
    }

    @Test
    public void test2964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2964");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 0);
        boolean boolean11 = point7.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 100);
        boolean boolean15 = point10.dominates(point14);
        boolean boolean16 = point2.dominates(point14);
        int int17 = point14.getX();
        int int18 = point14.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
    }

    @Test
    public void test2965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2965");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int7 = point6.getX();
        int int8 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int12 = point11.getX();
        boolean boolean13 = point6.dominates(point11);
        int int14 = point11.getY();
        int int15 = point11.getY();
        boolean boolean16 = point2.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 10);
        int int20 = point19.getX();
        boolean boolean21 = point2.dominates(point19);
        int int22 = point2.getY();
        java.lang.Class<?> wildcardClass23 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test2966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2966");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int9 = point8.getY();
        boolean boolean10 = point2.dominates(point8);
        int int11 = point8.getX();
        int int12 = point8.getX();
        int int13 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        int int30 = point23.getX();
        boolean boolean31 = point16.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int38 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point41.getX();
        boolean boolean47 = point37.dominates(point41);
        int int48 = point41.getX();
        int int49 = point41.getY();
        int int50 = point41.getY();
        boolean boolean51 = point34.dominates(point41);
        boolean boolean52 = point16.dominates(point34);
        int int53 = point34.getX();
        boolean boolean54 = point8.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = point8.dominates(point55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2967");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point2.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int25 = point24.getX();
        int int26 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        int int35 = point32.getX();
        boolean boolean36 = point24.dominates(point32);
        int int37 = point32.getX();
        int int38 = point32.getY();
        boolean boolean39 = point13.dominates(point32);
        int int40 = point32.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
    }

    @Test
    public void test2968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2968");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 97);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int7 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int11 = point10.getX();
        int int12 = point10.getX();
        int int13 = point10.getX();
        int int14 = point10.getY();
        int int15 = point10.getY();
        boolean boolean16 = point6.dominates(point10);
        int int17 = point6.getY();
        boolean boolean18 = point2.dominates(point6);
        int int19 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        boolean boolean35 = point25.dominates(point33);
        int int36 = point33.getY();
        int int37 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        int int45 = point43.getY();
        int int46 = point43.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean50 = point43.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean54 = point43.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 52);
        boolean boolean58 = point53.dominates(point57);
        boolean boolean59 = point33.dominates(point57);
        boolean boolean60 = point2.dominates(point33);
        int int61 = point33.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test2969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2969");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getY();
        int int17 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int21 = point20.getX();
        int int22 = point20.getX();
        int int23 = point20.getX();
        int int24 = point20.getX();
        int int25 = point20.getY();
        boolean boolean26 = point13.dominates(point20);
        int int27 = point13.getY();
        int int28 = point13.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test2970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2970");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int16 = point15.getY();
        boolean boolean17 = point11.dominates(point15);
        int int18 = point15.getX();
        int int19 = point15.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
    }

    @Test
    public void test2971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2971");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point24 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList30, pointArray29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm21.produceFinalSkyLine(pointList30, pointList33);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point39 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList45, pointArray44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm36.produceFinalSkyLine(pointList45, pointList48);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm35.produceSubSkyLines(pointList45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm51.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm21.produceFinalSkyLine(pointList50, pointList52);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = skylineAlgorithm21.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean63 = point59.dominates(point62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point59 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList65, pointArray64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm67.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm56.produceFinalSkyLine(pointList65, pointList68);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = skylineAlgorithm55.produceSubSkyLines(pointList65);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = skylineAlgorithm21.produceSubSkyLines(pointList70);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = skylineAlgorithm0.produceSubSkyLines(pointList70);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(pointArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(pointArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertNotNull(pointList54);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(pointArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertNotNull(pointList69);
        org.junit.Assert.assertNotNull(pointList70);
        org.junit.Assert.assertNotNull(pointList71);
        org.junit.Assert.assertNotNull(pointList72);
        org.junit.Assert.assertNotNull(pointList73);
    }

    @Test
    public void test2972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2972");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 0);
        boolean boolean11 = point7.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 100);
        boolean boolean15 = point10.dominates(point14);
        boolean boolean16 = point2.dominates(point14);
        int int17 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test2973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2973");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 0);
        boolean boolean12 = point6.dominates(point11);
        int int13 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) -1);
        boolean boolean17 = point6.dominates(point16);
        int int18 = point6.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test2974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2974");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 97);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int6 = point5.getY();
        boolean boolean7 = point2.dominates(point5);
        int int8 = point5.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test2975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2975");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getX();
        int int8 = point2.getY();
        int int9 = point2.getX();
        java.lang.Class<?> wildcardClass10 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2976");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) 100);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int7 = point6.getX();
        int int8 = point6.getY();
        int int9 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int13 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean17 = point12.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        int int26 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean30 = point23.dominates(point29);
        boolean boolean31 = point12.dominates(point23);
        boolean boolean32 = point6.dominates(point12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point41.getY();
        int int44 = point41.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean48 = point41.dominates(point47);
        boolean boolean49 = point35.dominates(point47);
        boolean boolean50 = point12.dominates(point35);
        boolean boolean51 = point2.dominates(point12);
        int int52 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) -1);
        int int56 = point55.getY();
        int int57 = point55.getY();
        boolean boolean58 = point12.dominates(point55);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2977");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point14.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        boolean boolean24 = point14.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        boolean boolean51 = point41.dominates(point49);
        boolean boolean52 = point35.dominates(point49);
        boolean boolean53 = point30.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) (short) 1);
        int int57 = point56.getX();
        int int58 = point56.getX();
        boolean boolean59 = point49.dominates(point56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 10);
        boolean boolean63 = point49.dominates(point62);
        int int64 = point49.getY();
        boolean boolean65 = point5.dominates(point49);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 97 + "'", int57 == 97);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test2978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2978");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        boolean boolean17 = point2.dominates(point9);
        int int18 = point9.getY();
        int int19 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        boolean boolean38 = point28.dominates(point36);
        int int39 = point36.getX();
        int int40 = point36.getX();
        int int41 = point36.getY();
        boolean boolean42 = point22.dominates(point36);
        boolean boolean43 = point9.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        int int51 = point49.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        boolean boolean59 = point49.dominates(point57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean66 = point62.dominates(point65);
        boolean boolean67 = point57.dominates(point65);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean77 = point73.dominates(point76);
        int int78 = point76.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean85 = point81.dominates(point84);
        boolean boolean86 = point76.dominates(point84);
        boolean boolean87 = point70.dominates(point84);
        boolean boolean88 = point65.dominates(point84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point91 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) (short) 1);
        int int92 = point91.getX();
        int int93 = point91.getX();
        boolean boolean94 = point84.dominates(point91);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point97 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 10);
        boolean boolean98 = point84.dominates(point97);
        boolean boolean99 = point22.dominates(point97);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 97 + "'", int92 == 97);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 97 + "'", int93 == 97);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test2979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2979");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test2980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2980");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList2 = skylineAlgorithm1.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point6 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList12, pointArray11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm14.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm3.produceFinalSkyLine(pointList12, pointList15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point20 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList26, pointArray25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm28.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm17.produceFinalSkyLine(pointList26, pointList29);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm1.produceFinalSkyLine(pointList16, pointList29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point36 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList42, pointArray41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm44.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm33.produceFinalSkyLine(pointList42, pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm32.produceSubSkyLines(pointList42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm48.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm48.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm48.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm1.produceFinalSkyLine(pointList42, pointList51);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm1.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point57 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList63, pointArray62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm65.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm54.produceFinalSkyLine(pointList63, pointList66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean75 = point71.dominates(point74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point71 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList77, pointArray76);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm79.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm68.produceFinalSkyLine(pointList77, pointList80);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm68.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm68.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm68.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm68.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm68.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm1.produceFinalSkyLine(pointList67, pointList86);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm0.produceSubSkyLines(pointList67);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass90 = pointList89.getClass();
        org.junit.Assert.assertNotNull(pointList2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(pointArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(pointArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(pointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(pointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(pointArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
        org.junit.Assert.assertNotNull(pointList87);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2981");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) '4');
        int int3 = point2.getY();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int8 = point7.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        int int19 = point17.getY();
        int int20 = point17.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int24 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point27.getX();
        boolean boolean33 = point23.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int37 = point36.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        int int45 = point40.getX();
        boolean boolean46 = point36.dominates(point40);
        int int47 = point40.getX();
        boolean boolean48 = point23.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int52 = point51.getX();
        int int53 = point51.getY();
        boolean boolean54 = point23.dominates(point51);
        boolean boolean55 = point17.dominates(point51);
        boolean boolean56 = point11.dominates(point51);
        boolean boolean57 = point7.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean64 = point60.dominates(point63);
        int int65 = point63.getY();
        int int66 = point63.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean70 = point63.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int74 = point73.getY();
        boolean boolean75 = point69.dominates(point73);
        boolean boolean76 = point7.dominates(point69);
        boolean boolean77 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, 35);
        boolean boolean81 = point7.dominates(point80);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 97 + "'", int74 == 97);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test2982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2982");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (short) 1);
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test2983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2983");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) ' ');
        int int3 = point2.getY();
        int int4 = point2.getX();
        int int5 = point2.getY();
        int int6 = point2.getX();
        int int7 = point2.getX();
        int int8 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test2984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2984");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point33.dominates(point46);
        boolean boolean55 = point19.dominates(point46);
        int int56 = point46.getY();
        int int57 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int61 = point60.getX();
        int int62 = point60.getY();
        int int63 = point60.getY();
        boolean boolean64 = point46.dominates(point60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int68 = point67.getX();
        int int69 = point67.getX();
        int int70 = point67.getX();
        int int71 = point67.getX();
        int int72 = point67.getY();
        boolean boolean73 = point46.dominates(point67);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test2985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2985");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getX();
        int int8 = point2.getY();
        int int9 = point2.getY();
        int int10 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point2.dominates(point16);
        int int19 = point16.getX();
        java.lang.Class<?> wildcardClass20 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2986");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean12 = point5.dominates(point11);
        int int13 = point11.getX();
        java.lang.Class<?> wildcardClass14 = point11.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test2987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2987");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test2988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2988");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) (byte) 0);
        boolean boolean11 = point5.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int15 = point14.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int19 = point18.getY();
        boolean boolean20 = point14.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 0);
        boolean boolean24 = point18.dominates(point23);
        int int25 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int32 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point35.getX();
        boolean boolean41 = point31.dominates(point35);
        int int42 = point35.getX();
        boolean boolean43 = point28.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int47 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean51 = point46.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        int int59 = point57.getY();
        int int60 = point57.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean64 = point57.dominates(point63);
        boolean boolean65 = point46.dominates(point57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int69 = point68.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean73 = point68.dominates(point72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean80 = point76.dominates(point79);
        int int81 = point79.getY();
        int int82 = point79.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean86 = point79.dominates(point85);
        boolean boolean87 = point68.dominates(point79);
        boolean boolean88 = point46.dominates(point68);
        int int89 = point68.getX();
        int int90 = point68.getY();
        boolean boolean91 = point35.dominates(point68);
        boolean boolean92 = point23.dominates(point68);
        boolean boolean93 = point10.dominates(point23);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test2989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2989");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point29.dominates(point37);
        int int40 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int44 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point47.getX();
        boolean boolean53 = point43.dominates(point47);
        boolean boolean54 = point37.dominates(point43);
        boolean boolean55 = point23.dominates(point37);
        boolean boolean56 = point16.dominates(point37);
        int int57 = point16.getY();
        int int58 = point16.getX();
        int int59 = point16.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test2990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2990");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 10);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) (short) 0);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2991");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) (short) 10);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 97);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int11 = point10.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int15 = point14.getX();
        int int16 = point14.getX();
        int int17 = point14.getX();
        int int18 = point14.getY();
        int int19 = point14.getY();
        boolean boolean20 = point10.dominates(point14);
        int int21 = point10.getY();
        boolean boolean22 = point6.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int26 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point29.getX();
        boolean boolean35 = point25.dominates(point29);
        int int36 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        boolean boolean52 = point42.dominates(point50);
        int int53 = point50.getX();
        int int54 = point50.getX();
        boolean boolean55 = point25.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        int int64 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean68 = point61.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean75 = point71.dominates(point74);
        int int76 = point74.getY();
        int int77 = point74.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean81 = point74.dominates(point80);
        boolean boolean82 = point61.dominates(point74);
        boolean boolean83 = point25.dominates(point61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean87 = point61.dominates(point86);
        boolean boolean88 = point10.dominates(point86);
        boolean boolean89 = point2.dominates(point10);
        int int90 = point10.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point93 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) 'a');
        int int94 = point93.getY();
        int int95 = point93.getX();
        boolean boolean96 = point10.dominates(point93);
        int int97 = point93.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 97 + "'", int94 == 97);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
    }

    @Test
    public void test2992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2992");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int8 = point7.getX();
        boolean boolean9 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        int int13 = point12.getX();
        int int14 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean18 = point12.dominates(point17);
        int int19 = point17.getY();
        int int20 = point17.getY();
        int int21 = point17.getX();
        boolean boolean22 = point2.dominates(point17);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int32 = point31.getY();
        int int33 = point31.getY();
        boolean boolean34 = point28.dominates(point31);
        int int35 = point28.getY();
        int int36 = point28.getY();
        boolean boolean37 = point25.dominates(point28);
        boolean boolean38 = point17.dominates(point25);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2993");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm46.produceSubSkyLines(pointList56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm46.produceSubSkyLines(pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm18.produceFinalSkyLine(pointList41, pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.produceSubSkyLines(pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
    }

    @Test
    public void test2994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2994");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.produceSubSkyLines(pointList41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm0.produceFinalSkyLine(pointList41, pointList50);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass60 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertNotNull(pointList54);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2995");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int6 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean10 = point5.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        boolean boolean14 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int18 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int22 = point21.getY();
        boolean boolean23 = point17.dominates(point21);
        int int24 = point17.getX();
        boolean boolean25 = point5.dominates(point17);
        boolean boolean26 = point2.dominates(point5);
        int int27 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int31 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point34.getX();
        boolean boolean40 = point30.dominates(point34);
        int int41 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point47.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        boolean boolean57 = point47.dominates(point55);
        int int58 = point55.getX();
        int int59 = point55.getX();
        boolean boolean60 = point30.dominates(point55);
        int int61 = point55.getX();
        int int62 = point55.getY();
        boolean boolean63 = point5.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (-1));
        int int67 = point66.getX();
        boolean boolean68 = point5.dominates(point66);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test2996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2996");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        int int7 = point5.getY();
        int int8 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int12 = point11.getY();
        boolean boolean13 = point5.dominates(point11);
        int int14 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        int int23 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean27 = point20.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean40 = point33.dominates(point39);
        boolean boolean41 = point20.dominates(point33);
        boolean boolean42 = point11.dominates(point33);
        int int43 = point11.getY();
        int int44 = point11.getX();
        boolean boolean45 = point2.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int49 = point48.getX();
        int int50 = point48.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        int int58 = point56.getY();
        int int59 = point56.getX();
        boolean boolean60 = point48.dominates(point56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean67 = point63.dominates(point66);
        int int68 = point66.getY();
        boolean boolean69 = point56.dominates(point66);
        boolean boolean70 = point2.dominates(point56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int74 = point73.getY();
        int int75 = point73.getY();
        int int76 = point73.getY();
        boolean boolean77 = point2.dominates(point73);
        int int78 = point2.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 97 + "'", int68 == 97);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 97 + "'", int74 == 97);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 97 + "'", int75 == 97);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 97 + "'", int76 == 97);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test2997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2997");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        int int14 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (byte) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        int int26 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean30 = point23.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean34 = point23.dominates(point33);
        boolean boolean35 = point17.dominates(point23);
        boolean boolean36 = point2.dominates(point23);
        int int37 = point2.getX();
        int int38 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test2998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2998");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        boolean boolean21 = point2.dominates(point18);
        int int22 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int26 = point25.getX();
        int int27 = point25.getY();
        boolean boolean28 = point18.dominates(point25);
        int int29 = point25.getX();
        int int30 = point25.getY();
        int int31 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        int int42 = point40.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        boolean boolean50 = point40.dominates(point48);
        int int51 = point48.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int55 = point54.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point58.getX();
        boolean boolean64 = point54.dominates(point58);
        boolean boolean65 = point48.dominates(point54);
        boolean boolean66 = point34.dominates(point48);
        int int67 = point34.getY();
        int int68 = point34.getX();
        boolean boolean69 = point25.dominates(point34);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test2999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2999");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) -1);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test3000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test3000");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) (short) 1);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) -1);
        boolean boolean7 = point2.dominates(point6);
        int int8 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }
}


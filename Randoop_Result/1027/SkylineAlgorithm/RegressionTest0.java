package SkylineAlgorithm;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        java.lang.Class<?> wildcardClass8 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.lang.Class<?> wildcardClass1 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point47.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point33, point40, point47 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList51, pointArray50);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm0.produceFinalSkyLine(pointList26, pointList51);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(pointArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.lang.Class<?> wildcardClass14 = pointList12.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.produceFinalSkyLine(pointList11, pointList16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.size()\" because \"right\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass7 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        java.lang.Class<?> wildcardClass9 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point45.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        boolean boolean55 = point45.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        boolean boolean71 = point61.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point6, point13, point22, point38, point45, point61 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm0.produceSubSkyLines(pointList73);
        java.lang.Class<?> wildcardClass76 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.produceSubSkyLines(pointList52);
        java.lang.Class<?> wildcardClass58 = pointList57.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass2 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.lang.Class<?> wildcardClass33 = pointList32.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.lang.Class<?> wildcardClass16 = pointList10.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.produceSubSkyLines(pointList52);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean66 = point62.dominates(point65);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point62 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList68, pointArray67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = skylineAlgorithm70.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = skylineAlgorithm59.produceFinalSkyLine(pointList68, pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm59.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean81 = point77.dominates(point80);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point77 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList83, pointArray82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm85.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm74.produceFinalSkyLine(pointList83, pointList86);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm0.produceFinalSkyLine(pointList73, pointList86);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(pointArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(pointList71);
        org.junit.Assert.assertNotNull(pointList72);
        org.junit.Assert.assertNotNull(pointList73);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(pointArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(pointList86);
        org.junit.Assert.assertNotNull(pointList87);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean12 = point5.dominates(point11);
        java.lang.Class<?> wildcardClass13 = point11.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point45.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        boolean boolean55 = point45.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        boolean boolean71 = point61.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point6, point13, point22, point38, point45, point61 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm0.produceSubSkyLines(pointList73);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass77 = pointList76.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        java.lang.Class<?> wildcardClass17 = point13.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = point2.dominates(point5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        int int17 = point13.getX();
        int int18 = point13.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point33 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList39 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList39, pointArray38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm41.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm30.produceFinalSkyLine(pointList39, pointList42);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm2.produceFinalSkyLine(pointList29, pointList39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point48 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList54, pointArray53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm56.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm45.produceFinalSkyLine(pointList54, pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm2.produceSubSkyLines(pointList54);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm2.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm61.produceSubSkyLines(pointList71);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm0.produceFinalSkyLine(pointList60, pointList71);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(pointArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(pointArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 1);
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        int int17 = point13.getX();
        java.lang.Class<?> wildcardClass18 = point13.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm31.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point37 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList43, pointArray42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm34.produceFinalSkyLine(pointList43, pointList46);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm33.produceSubSkyLines(pointList43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point52 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList58, pointArray57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm60.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm49.produceFinalSkyLine(pointList58, pointList61);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm33.produceSubSkyLines(pointList62);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm0.produceFinalSkyLine(pointList32, pointList62);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(pointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(pointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        boolean boolean33 = point16.dominates(point22);
        boolean boolean34 = point2.dominates(point16);
        java.lang.Class<?> wildcardClass35 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point32 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList38, pointArray37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm40.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm29.produceFinalSkyLine(pointList38, pointList41);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm28.produceSubSkyLines(pointList38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point47 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList53, pointArray52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm55.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm44.produceFinalSkyLine(pointList53, pointList56);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm28.produceSubSkyLines(pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.produceFinalSkyLine(pointList23, pointList57);
        java.lang.Class<?> wildcardClass60 = pointList23.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(pointArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(pointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList29);
        java.lang.Class<?> wildcardClass31 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.lang.Class<?> wildcardClass33 = pointList31.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        java.lang.Class<?> wildcardClass43 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.lang.Class<?> wildcardClass33 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point32 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList38, pointArray37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm40.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm29.produceFinalSkyLine(pointList38, pointList41);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm28.produceSubSkyLines(pointList38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point47 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList53, pointArray52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm55.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm44.produceFinalSkyLine(pointList53, pointList56);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm28.produceSubSkyLines(pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.produceFinalSkyLine(pointList23, pointList57);
        java.lang.Class<?> wildcardClass60 = pointList57.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(pointArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(pointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        java.lang.Class<?> wildcardClass31 = pointList30.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point48 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList54, pointArray53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm56.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm45.produceFinalSkyLine(pointList54, pointList57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point63 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList69, pointArray68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = skylineAlgorithm71.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm60.produceFinalSkyLine(pointList69, pointList72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm59.produceSubSkyLines(pointList69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm45.produceFinalSkyLine(pointList74, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm45.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean88 = point84.dominates(point87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point84 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList90, pointArray89);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm92 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm92.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm81.produceFinalSkyLine(pointList90, pointList93);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm80.produceSubSkyLines(pointList90);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.produceFinalSkyLine(pointList79, pointList95);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(pointArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(pointArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(pointList72);
        org.junit.Assert.assertNotNull(pointList73);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(pointArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getX();
        int int6 = point2.getY();
        int int7 = point2.getY();
        java.lang.Class<?> wildcardClass8 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm0.produceFinalSkyLine(pointList59, pointList60);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int3 = point2.getX();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point45.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        boolean boolean55 = point45.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        boolean boolean71 = point61.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point6, point13, point22, point38, point45, point61 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm0.produceSubSkyLines(pointList73);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = null;
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean85 = point81.dominates(point84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point81 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList87, pointArray86);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm89.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm78.produceFinalSkyLine(pointList87, pointList90);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm0.produceFinalSkyLine(pointList77, pointList87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.size()\" because \"left\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(pointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        int int20 = point2.getX();
        java.lang.Class<?> wildcardClass21 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        int int17 = point13.getX();
        int int18 = point13.getY();
        java.lang.Class<?> wildcardClass19 = point13.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean68 = point64.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point64 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList70, pointArray69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm72.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm61.produceFinalSkyLine(pointList70, pointList73);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm61.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm61.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm61.getPoints();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.produceFinalSkyLine(pointList59, pointList77);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(pointArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(pointList73);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        boolean boolean30 = point13.dominates(point19);
        java.lang.Class<?> wildcardClass31 = point19.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) (byte) -1);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        int int33 = point30.getX();
        int int34 = point30.getX();
        boolean boolean35 = point5.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point41.getY();
        int int44 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean48 = point41.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        int int56 = point54.getY();
        int int57 = point54.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean61 = point54.dominates(point60);
        boolean boolean62 = point41.dominates(point54);
        boolean boolean63 = point5.dominates(point41);
        boolean boolean64 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass65 = point5.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        boolean boolean21 = point11.dominates(point19);
        int int22 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int26 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point29.getX();
        boolean boolean35 = point25.dominates(point29);
        boolean boolean36 = point19.dominates(point25);
        boolean boolean37 = point5.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int41 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point44.getX();
        boolean boolean50 = point40.dominates(point44);
        int int51 = point44.getX();
        int int52 = point44.getY();
        boolean boolean53 = point5.dominates(point44);
        boolean boolean54 = point2.dominates(point44);
        java.lang.Class<?> wildcardClass55 = point44.getClass();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getY();
        int int17 = point13.getY();
        java.lang.Class<?> wildcardClass18 = point13.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass45 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass34 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        java.lang.Class<?> wildcardClass21 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point45.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        boolean boolean55 = point45.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        boolean boolean71 = point61.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point6, point13, point22, point38, point45, point61 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm0.produceSubSkyLines(pointList73);
        java.lang.Class<?> wildcardClass76 = pointList75.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.lang.Class<?> wildcardClass33 = pointList29.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) '4');
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm16.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm16.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm32.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm32.produceSubSkyLines(pointList57);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm0.produceFinalSkyLine(pointList31, pointList57);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        boolean boolean17 = point2.dominates(point9);
        java.lang.Class<?> wildcardClass18 = point9.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point18.getY();
        int int21 = point18.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean25 = point18.dominates(point24);
        boolean boolean26 = point5.dominates(point18);
        java.lang.Class<?> wildcardClass27 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) 'a');
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        java.lang.Class<?> wildcardClass24 = point13.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean16 = point5.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = point15.dominates(point17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm0.produceSubSkyLines(pointList35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.size()\" because \"list\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceSubSkyLines(pointList45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.size()\" because \"list\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = null;
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point37 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList43, pointArray42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm34.produceFinalSkyLine(pointList43, pointList46);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm34.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm34.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point53 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList59, pointArray58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm61.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm50.produceFinalSkyLine(pointList59, pointList62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point68 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList74, pointArray73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm76.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm65.produceFinalSkyLine(pointList74, pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm64.produceSubSkyLines(pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm34.produceFinalSkyLine(pointList63, pointList74);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.produceFinalSkyLine(pointList33, pointList74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.size()\" because \"left\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(pointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(pointArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(pointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        java.lang.Class<?> wildcardClass16 = point13.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.lang.Class<?> wildcardClass47 = pointList29.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point10.getX();
        boolean boolean16 = point6.dominates(point10);
        int int17 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        boolean boolean33 = point23.dominates(point31);
        int int34 = point31.getX();
        int int35 = point31.getX();
        boolean boolean36 = point6.dominates(point31);
        boolean boolean37 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean39 = point2.dominates(point38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int8 = point7.getX();
        boolean boolean9 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int13 = point12.getY();
        boolean boolean14 = point7.dominates(point12);
        java.lang.Class<?> wildcardClass15 = point7.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList2 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass3 = pointList2.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(pointList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 97);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) '4');
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point5.getX();
        boolean boolean11 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass12 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int3 = point2.getY();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point38 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList44, pointArray43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm35.produceFinalSkyLine(pointList44, pointList47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point52 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList58, pointArray57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm60.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm49.produceFinalSkyLine(pointList58, pointList61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm63.produceSubSkyLines(pointList73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point82 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList88, pointArray87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm90.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm79.produceFinalSkyLine(pointList88, pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm63.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm35.produceFinalSkyLine(pointList58, pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.produceSubSkyLines(pointList94);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass99 = pointList98.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(pointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(pointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(pointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.produceSubSkyLines(pointList41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm31.produceSubSkyLines(pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm0.produceSubSkyLines(pointList60);
        java.lang.Class<?> wildcardClass63 = pointList60.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point29.dominates(point37);
        int int40 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int44 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point47.getX();
        boolean boolean53 = point43.dominates(point47);
        boolean boolean54 = point37.dominates(point43);
        boolean boolean55 = point23.dominates(point37);
        boolean boolean56 = point16.dominates(point37);
        java.lang.Class<?> wildcardClass57 = point37.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        boolean boolean33 = point16.dominates(point22);
        boolean boolean34 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int38 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point41.getX();
        boolean boolean47 = point37.dominates(point41);
        int int48 = point41.getX();
        int int49 = point41.getY();
        boolean boolean50 = point2.dominates(point41);
        java.lang.Class<?> wildcardClass51 = point41.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        boolean boolean34 = point24.dominates(point32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point47.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        boolean boolean57 = point47.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean64 = point60.dominates(point63);
        int int65 = point63.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        boolean boolean73 = point63.dominates(point71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point8, point15, point24, point40, point47, point63 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList75, pointArray74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm2.produceSubSkyLines(pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm2.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm2.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean87 = point83.dominates(point86);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray88 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point83 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList89, pointArray88);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm91 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm91.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm80.produceFinalSkyLine(pointList89, pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm80.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm80.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm80.getPoints();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.produceFinalSkyLine(pointList79, pointList96);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(pointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(pointArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        boolean boolean25 = point5.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int29 = point28.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point32.getX();
        boolean boolean38 = point28.dominates(point32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int42 = point41.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        int int50 = point45.getX();
        boolean boolean51 = point41.dominates(point45);
        int int52 = point45.getX();
        boolean boolean53 = point28.dominates(point45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int57 = point56.getX();
        int int58 = point56.getY();
        boolean boolean59 = point28.dominates(point56);
        boolean boolean60 = point5.dominates(point28);
        java.lang.Class<?> wildcardClass61 = point28.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        java.lang.Class<?> wildcardClass31 = pointList28.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean83 = point79.dominates(point82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point79 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList85, pointArray84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm87.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm76.produceFinalSkyLine(pointList85, pointList88);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm48.produceFinalSkyLine(pointList75, pointList85);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm0.produceSubSkyLines(pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass93 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(pointArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        int int15 = point2.getX();
        int int16 = point2.getX();
        java.lang.Class<?> wildcardClass17 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        java.lang.Class<?> wildcardClass14 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getX();
        int int6 = point2.getX();
        java.lang.Class<?> wildcardClass7 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        int int22 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        boolean boolean38 = point28.dominates(point36);
        int int39 = point36.getX();
        int int40 = point36.getX();
        boolean boolean41 = point11.dominates(point36);
        boolean boolean42 = point7.dominates(point11);
        int int43 = point11.getY();
        boolean boolean44 = point2.dominates(point11);
        java.lang.Class<?> wildcardClass45 = point11.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        int int9 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int13 = point12.getX();
        int int14 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int18 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point21.getX();
        boolean boolean27 = point17.dominates(point21);
        int int28 = point17.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        boolean boolean44 = point34.dominates(point42);
        int int45 = point42.getX();
        int int46 = point42.getX();
        boolean boolean47 = point17.dominates(point42);
        int int48 = point17.getX();
        boolean boolean49 = point12.dominates(point17);
        boolean boolean50 = point5.dominates(point17);
        int int51 = point5.getY();
        java.lang.Class<?> wildcardClass52 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = point5.dominates(point8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        int int18 = point15.getX();
        int int19 = point15.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 1);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        int int27 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean31 = point24.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean35 = point24.dominates(point34);
        boolean boolean36 = point5.dominates(point24);
        int int37 = point5.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point5.getX();
        boolean boolean11 = point2.dominates(point5);
        int int12 = point5.getX();
        java.lang.Class<?> wildcardClass13 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.lang.Class<?> wildcardClass14 = pointList9.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        int int17 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        boolean boolean33 = point23.dominates(point31);
        int int34 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int38 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point41.getX();
        boolean boolean47 = point37.dominates(point41);
        boolean boolean48 = point31.dominates(point37);
        int int49 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        int int57 = point55.getY();
        int int58 = point55.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean62 = point55.dominates(point61);
        boolean boolean63 = point37.dominates(point55);
        boolean boolean64 = point13.dominates(point55);
        java.lang.Class<?> wildcardClass65 = point55.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        java.lang.Class<?> wildcardClass18 = point15.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (byte) 100);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.lang.Class<?> wildcardClass47 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getX();
        java.lang.Class<?> wildcardClass14 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm16.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm16.produceFinalSkyLine(pointList31, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.produceSubSkyLines(pointList46);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass49 = pointList48.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm14.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point33 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList39 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList39, pointArray38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm41.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm30.produceFinalSkyLine(pointList39, pointList42);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm14.produceFinalSkyLine(pointList29, pointList42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point48 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList54, pointArray53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm56.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm45.produceFinalSkyLine(pointList54, pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm45.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean68 = point64.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point64 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList70, pointArray69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm72.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm61.produceFinalSkyLine(pointList70, pointList73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean83 = point79.dominates(point82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point79 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList85, pointArray84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm87.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm76.produceFinalSkyLine(pointList85, pointList88);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm75.produceSubSkyLines(pointList85);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm45.produceFinalSkyLine(pointList74, pointList85);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm14.produceSubSkyLines(pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm0.produceSubSkyLines(pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass95 = pointList94.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(pointArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(pointArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(pointArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(pointList73);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(pointArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (short) -1);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm16.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm16.produceFinalSkyLine(pointList31, pointList44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm47.produceSubSkyLines(pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm47.getPoints();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm0.produceFinalSkyLine(pointList44, pointList67);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        java.lang.Class<?> wildcardClass20 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.produceSubSkyLines(pointList52);
        java.lang.Class<?> wildcardClass58 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        int int20 = point2.getY();
        java.lang.Class<?> wildcardClass21 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int8 = point7.getX();
        boolean boolean9 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int13 = point12.getY();
        boolean boolean14 = point7.dominates(point12);
        int int15 = point12.getY();
        java.lang.Class<?> wildcardClass16 = point12.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList2 = skylineAlgorithm0.produceSubSkyLines(pointList1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.size()\" because \"list\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) ' ');
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int8 = point7.getX();
        boolean boolean9 = point2.dominates(point7);
        int int10 = point7.getY();
        java.lang.Class<?> wildcardClass11 = point7.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        java.lang.Class<?> wildcardClass31 = pointList30.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        int int3 = point2.getX();
        int int4 = point2.getX();
        java.lang.Class<?> wildcardClass5 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = point2.dominates(point13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point38 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList44, pointArray43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm35.produceFinalSkyLine(pointList44, pointList47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point52 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList58, pointArray57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm60.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm49.produceFinalSkyLine(pointList58, pointList61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm63.produceSubSkyLines(pointList73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point82 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList88, pointArray87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm90.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm79.produceFinalSkyLine(pointList88, pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm63.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm35.produceFinalSkyLine(pointList58, pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.produceSubSkyLines(pointList94);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass97 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(pointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(pointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(pointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        java.lang.Class<?> wildcardClass17 = point15.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) -1);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = point2.dominates(point3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point33.dominates(point46);
        boolean boolean55 = point19.dominates(point46);
        int int56 = point46.getY();
        int int57 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int61 = point60.getX();
        int int62 = point60.getY();
        int int63 = point60.getY();
        boolean boolean64 = point46.dominates(point60);
        java.lang.Class<?> wildcardClass65 = point46.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point11.getX();
        boolean boolean17 = point7.dominates(point11);
        int int18 = point7.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        boolean boolean34 = point24.dominates(point32);
        int int35 = point32.getX();
        int int36 = point32.getX();
        boolean boolean37 = point7.dominates(point32);
        int int38 = point7.getX();
        boolean boolean39 = point2.dominates(point7);
        int int40 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point39 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList45, pointArray44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm36.produceFinalSkyLine(pointList45, pointList48);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm35.produceSubSkyLines(pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm35.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm0.produceFinalSkyLine(pointList51, pointList52);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(pointArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int8 = point7.getX();
        boolean boolean9 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int13 = point12.getY();
        boolean boolean14 = point7.dominates(point12);
        int int15 = point12.getY();
        int int16 = point12.getY();
        java.lang.Class<?> wildcardClass17 = point12.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean6 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass7 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        java.lang.Class<?> wildcardClass21 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int22 = point21.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int26 = point25.getX();
        int int27 = point25.getX();
        int int28 = point25.getX();
        int int29 = point25.getY();
        int int30 = point25.getY();
        boolean boolean31 = point21.dominates(point25);
        boolean boolean32 = point5.dominates(point21);
        java.lang.Class<?> wildcardClass33 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) '4');
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean58 = point51.dominates(point57);
        boolean boolean59 = point38.dominates(point51);
        boolean boolean60 = point2.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean64 = point38.dominates(point63);
        java.lang.Class<?> wildcardClass65 = point38.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        int int33 = point27.getY();
        int int34 = point27.getX();
        java.lang.Class<?> wildcardClass35 = point27.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm46.produceSubSkyLines(pointList56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm46.produceSubSkyLines(pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm18.produceFinalSkyLine(pointList41, pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.produceSubSkyLines(pointList77);
        java.lang.Class<?> wildcardClass79 = pointList77.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int19 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point22.getX();
        boolean boolean28 = point18.dominates(point22);
        int int29 = point22.getX();
        boolean boolean30 = point5.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        int int38 = point36.getY();
        int int39 = point36.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean43 = point36.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        int int51 = point49.getY();
        int int52 = point49.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean56 = point49.dominates(point55);
        boolean boolean57 = point36.dominates(point49);
        boolean boolean58 = point22.dominates(point49);
        int int59 = point49.getY();
        int int60 = point49.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int64 = point63.getX();
        int int65 = point63.getY();
        int int66 = point63.getY();
        boolean boolean67 = point49.dominates(point63);
        boolean boolean68 = point2.dominates(point63);
        java.lang.Class<?> wildcardClass69 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        java.lang.Class<?> wildcardClass24 = point21.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean83 = point79.dominates(point82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point79 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList85, pointArray84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm87.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm76.produceFinalSkyLine(pointList85, pointList88);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm48.produceFinalSkyLine(pointList75, pointList85);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm0.produceSubSkyLines(pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass96 = pointList95.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(pointArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm14.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm14.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.produceSubSkyLines(pointList41);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm31.getPoints();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm0.produceFinalSkyLine(pointList30, pointList49);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        boolean boolean23 = point6.dominates(point20);
        int int24 = point6.getY();
        int int25 = point6.getY();
        boolean boolean26 = point2.dominates(point6);
        java.lang.Class<?> wildcardClass27 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getX();
        int int6 = point2.getX();
        java.lang.Class<?> wildcardClass7 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        int int15 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int19 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point22.getX();
        boolean boolean28 = point18.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int32 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point35.getX();
        boolean boolean41 = point31.dominates(point35);
        int int42 = point35.getX();
        boolean boolean43 = point18.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int47 = point46.getX();
        int int48 = point46.getY();
        boolean boolean49 = point18.dominates(point46);
        boolean boolean50 = point12.dominates(point46);
        boolean boolean51 = point6.dominates(point46);
        boolean boolean52 = point2.dominates(point6);
        int int53 = point6.getY();
        java.lang.Class<?> wildcardClass54 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point10.getX();
        boolean boolean16 = point6.dominates(point10);
        int int17 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        boolean boolean33 = point23.dominates(point31);
        int int34 = point31.getX();
        int int35 = point31.getX();
        boolean boolean36 = point6.dominates(point31);
        boolean boolean37 = point2.dominates(point6);
        int int38 = point2.getY();
        java.lang.Class<?> wildcardClass39 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point20 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList26, pointArray25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm28.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm17.produceFinalSkyLine(pointList26, pointList29);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm17.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm17.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point36 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList42, pointArray41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm44.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm33.produceFinalSkyLine(pointList42, pointList45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm47.produceSubSkyLines(pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm17.produceFinalSkyLine(pointList46, pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm17.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean73 = point69.dominates(point72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point69 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList75, pointArray74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm77.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm66.produceFinalSkyLine(pointList75, pointList78);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm65.produceSubSkyLines(pointList75);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean88 = point84.dominates(point87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point84 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList90, pointArray89);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm92 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm92.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm81.produceFinalSkyLine(pointList90, pointList93);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm65.produceSubSkyLines(pointList94);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm65.getPoints();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.produceFinalSkyLine(pointList64, pointList96);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(pointArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(pointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(pointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(pointArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass33 = pointList32.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        int int5 = point2.getY();
        java.lang.Class<?> wildcardClass6 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean58 = point51.dominates(point57);
        boolean boolean59 = point38.dominates(point51);
        boolean boolean60 = point2.dominates(point38);
        java.lang.Class<?> wildcardClass61 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        int int20 = point2.getY();
        int int21 = point2.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (-1));
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        int int33 = point30.getX();
        int int34 = point30.getX();
        boolean boolean35 = point5.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point41.getY();
        int int44 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean48 = point41.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        int int56 = point54.getY();
        int int57 = point54.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean61 = point54.dominates(point60);
        boolean boolean62 = point41.dominates(point54);
        boolean boolean63 = point5.dominates(point41);
        boolean boolean64 = point2.dominates(point5);
        int int65 = point5.getX();
        java.lang.Class<?> wildcardClass66 = point5.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, 10);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) (short) 1);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        boolean boolean33 = point16.dominates(point22);
        boolean boolean34 = point2.dominates(point16);
        int int35 = point16.getX();
        int int36 = point16.getY();
        int int37 = point16.getX();
        java.lang.Class<?> wildcardClass38 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int6 = point5.getX();
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean11 = point5.dominates(point10);
        boolean boolean12 = point2.dominates(point10);
        int int13 = point2.getX();
        java.lang.Class<?> wildcardClass14 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        int int28 = point2.getY();
        int int29 = point2.getY();
        java.lang.Class<?> wildcardClass30 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int6 = point5.getX();
        int int7 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int11 = point10.getX();
        boolean boolean12 = point5.dominates(point10);
        boolean boolean13 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass14 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList29);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.produceSubSkyLines(pointList32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.produceSubSkyLines(pointList52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean65 = point61.dominates(point64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point61 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList67, pointArray66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = skylineAlgorithm69.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = skylineAlgorithm58.produceFinalSkyLine(pointList67, pointList70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean80 = point76.dominates(point79);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point76 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList82, pointArray81);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm84.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm73.produceFinalSkyLine(pointList82, pointList85);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm72.produceSubSkyLines(pointList82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm88 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm88.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm58.produceFinalSkyLine(pointList87, pointList89);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm0.produceSubSkyLines(pointList90);
        java.lang.Class<?> wildcardClass92 = pointList91.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(pointArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(pointList70);
        org.junit.Assert.assertNotNull(pointList71);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(pointArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
        org.junit.Assert.assertNotNull(pointList87);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        boolean boolean30 = point13.dominates(point19);
        int int31 = point13.getX();
        int int32 = point13.getX();
        java.lang.Class<?> wildcardClass33 = point13.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        java.lang.Class<?> wildcardClass15 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getX();
        int int14 = point6.getY();
        java.lang.Class<?> wildcardClass15 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm17.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point22 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList28, pointArray27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm19.produceFinalSkyLine(pointList28, pointList31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point36 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList42, pointArray41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm44.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm33.produceFinalSkyLine(pointList42, pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm17.produceFinalSkyLine(pointList32, pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm0.produceSubSkyLines(pointList47);
        java.lang.Class<?> wildcardClass49 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(pointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(pointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        boolean boolean21 = point11.dominates(point19);
        int int22 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int26 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point29.getX();
        boolean boolean35 = point25.dominates(point29);
        boolean boolean36 = point19.dominates(point25);
        boolean boolean37 = point5.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int41 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point44.getX();
        boolean boolean50 = point40.dominates(point44);
        int int51 = point44.getX();
        int int52 = point44.getY();
        boolean boolean53 = point5.dominates(point44);
        boolean boolean54 = point2.dominates(point44);
        java.lang.Class<?> wildcardClass55 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int3 = point2.getX();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = null;
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm16.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm16.produceFinalSkyLine(pointList31, pointList44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm47.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point66 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList72, pointArray71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm74.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm63.produceFinalSkyLine(pointList72, pointList75);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean85 = point81.dominates(point84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point81 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList87, pointArray86);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm89.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm78.produceFinalSkyLine(pointList87, pointList90);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm77.produceSubSkyLines(pointList87);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm47.produceFinalSkyLine(pointList76, pointList87);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm16.produceSubSkyLines(pointList93);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm16.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm16.getPoints();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.size()\" because \"left\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(pointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(pointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        int int4 = point2.getX();
        java.lang.Class<?> wildcardClass5 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int6 = point5.getY();
        boolean boolean7 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass8 = point5.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        int int20 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point26.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        boolean boolean36 = point26.dominates(point34);
        int int37 = point34.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int41 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point44.getX();
        boolean boolean50 = point40.dominates(point44);
        boolean boolean51 = point34.dominates(point40);
        int int52 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        int int61 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean65 = point58.dominates(point64);
        boolean boolean66 = point40.dominates(point58);
        boolean boolean67 = point16.dominates(point58);
        int int68 = point58.getX();
        boolean boolean69 = point2.dominates(point58);
        int int70 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point38 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList44, pointArray43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm35.produceFinalSkyLine(pointList44, pointList47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point52 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList58, pointArray57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm60.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm49.produceFinalSkyLine(pointList58, pointList61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm63.produceSubSkyLines(pointList73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point82 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList88, pointArray87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm90.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm79.produceFinalSkyLine(pointList88, pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm63.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm35.produceFinalSkyLine(pointList58, pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.produceSubSkyLines(pointList94);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList99 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(pointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(pointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(pointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
        org.junit.Assert.assertNotNull(pointList99);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        boolean boolean24 = point7.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int28 = point27.getX();
        int int29 = point27.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        int int38 = point35.getX();
        boolean boolean39 = point27.dominates(point35);
        boolean boolean40 = point21.dominates(point35);
        boolean boolean41 = point2.dominates(point21);
        java.lang.Class<?> wildcardClass42 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getX();
        int int14 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int18 = point17.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean22 = point17.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        int int31 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean35 = point28.dominates(point34);
        boolean boolean36 = point17.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int40 = point39.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean44 = point39.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point50.getY();
        int int53 = point50.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean57 = point50.dominates(point56);
        boolean boolean58 = point39.dominates(point50);
        boolean boolean59 = point17.dominates(point39);
        boolean boolean60 = point6.dominates(point39);
        java.lang.Class<?> wildcardClass61 = point39.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        int int18 = point15.getX();
        int int19 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        boolean boolean35 = point25.dominates(point33);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int39 = point38.getY();
        boolean boolean40 = point25.dominates(point38);
        boolean boolean41 = point15.dominates(point25);
        java.lang.Class<?> wildcardClass42 = point25.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, 0);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        boolean boolean30 = point13.dominates(point19);
        int int31 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        int int40 = point37.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean44 = point37.dominates(point43);
        boolean boolean45 = point19.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 10);
        boolean boolean49 = point37.dominates(point48);
        java.lang.Class<?> wildcardClass50 = point37.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        int int6 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = point2.dominates(point7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        int int30 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        int int38 = point36.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        boolean boolean46 = point36.dominates(point44);
        int int47 = point44.getX();
        int int48 = point44.getX();
        boolean boolean49 = point19.dominates(point44);
        int int50 = point44.getY();
        boolean boolean51 = point5.dominates(point44);
        int int52 = point5.getX();
        int int53 = point5.getY();
        java.lang.Class<?> wildcardClass54 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        boolean boolean21 = point2.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int28 = point27.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point31.getX();
        boolean boolean37 = point27.dominates(point31);
        int int38 = point27.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point44.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        boolean boolean54 = point44.dominates(point52);
        int int55 = point52.getX();
        int int56 = point52.getX();
        boolean boolean57 = point27.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean64 = point60.dominates(point63);
        int int65 = point63.getY();
        int int66 = point63.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean70 = point63.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean77 = point73.dominates(point76);
        int int78 = point76.getY();
        int int79 = point76.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean83 = point76.dominates(point82);
        boolean boolean84 = point63.dominates(point76);
        boolean boolean85 = point27.dominates(point63);
        boolean boolean86 = point24.dominates(point27);
        int int87 = point27.getX();
        int int88 = point27.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point91 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int92 = point91.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point95 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int96 = point95.getY();
        boolean boolean97 = point91.dominates(point95);
        boolean boolean98 = point27.dominates(point95);
        boolean boolean99 = point2.dominates(point95);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 32 + "'", int96 == 32);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point32 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList38, pointArray37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm40.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm29.produceFinalSkyLine(pointList38, pointList41);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm28.produceSubSkyLines(pointList38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point47 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList53, pointArray52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm55.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm44.produceFinalSkyLine(pointList53, pointList56);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm28.produceSubSkyLines(pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.produceFinalSkyLine(pointList23, pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm0.produceSubSkyLines(pointList61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(pointArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(pointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.produceSubSkyLines(pointList52);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass61 = pointList60.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int6 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean10 = point5.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        boolean boolean30 = point13.dominates(point27);
        int int31 = point13.getY();
        boolean boolean32 = point9.dominates(point13);
        boolean boolean33 = point2.dominates(point13);
        int int34 = point2.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        boolean boolean21 = point2.dominates(point18);
        java.lang.Class<?> wildcardClass22 = point18.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point20 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList26, pointArray25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm28.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm17.produceFinalSkyLine(pointList26, pointList29);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm17.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm17.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point36 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList42, pointArray41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm44.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm33.produceFinalSkyLine(pointList42, pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm17.produceSubSkyLines(pointList42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point66 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList72, pointArray71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm74.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm63.produceFinalSkyLine(pointList72, pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm62.produceSubSkyLines(pointList72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm78.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm48.produceFinalSkyLine(pointList77, pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm48.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm48.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm48.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm48.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm0.produceFinalSkyLine(pointList42, pointList84);
        java.lang.Class<?> wildcardClass86 = pointList42.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(pointArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(pointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(pointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm46.produceSubSkyLines(pointList56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm46.produceSubSkyLines(pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm18.produceFinalSkyLine(pointList41, pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.produceSubSkyLines(pointList77);
        java.lang.Class<?> wildcardClass79 = pointList78.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getX();
        java.lang.Class<?> wildcardClass5 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList29);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass32 = pointList31.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        java.lang.Class<?> wildcardClass43 = pointList27.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 97);
        int int3 = point2.getX();
        int int4 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point38 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList44, pointArray43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm35.produceFinalSkyLine(pointList44, pointList47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point52 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList58, pointArray57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm60.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm49.produceFinalSkyLine(pointList58, pointList61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm63.produceSubSkyLines(pointList73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point82 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList88, pointArray87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm90.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm79.produceFinalSkyLine(pointList88, pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm63.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm35.produceFinalSkyLine(pointList58, pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.produceSubSkyLines(pointList94);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass98 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(pointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(pointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(pointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int19 = point18.getY();
        boolean boolean20 = point5.dominates(point18);
        java.lang.Class<?> wildcardClass21 = point18.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        boolean boolean33 = point16.dominates(point22);
        boolean boolean34 = point2.dominates(point16);
        java.lang.Class<?> wildcardClass35 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm32.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point37 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList43, pointArray42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm34.produceFinalSkyLine(pointList43, pointList46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm32.produceFinalSkyLine(pointList47, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm63.produceSubSkyLines(pointList73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point82 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList88, pointArray87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm90.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm79.produceFinalSkyLine(pointList88, pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm63.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm32.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.produceSubSkyLines(pointList94);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass99 = pointList98.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(pointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(pointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList29);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point37 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList43, pointArray42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm34.produceFinalSkyLine(pointList43, pointList46);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm34.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm34.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point53 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList59, pointArray58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm61.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm50.produceFinalSkyLine(pointList59, pointList62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point68 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList74, pointArray73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm76.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm65.produceFinalSkyLine(pointList74, pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm64.produceSubSkyLines(pointList74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm80.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm50.produceFinalSkyLine(pointList79, pointList81);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm50.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm50.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm50.getPoints();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm0.produceFinalSkyLine(pointList49, pointList85);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(pointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(pointArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(pointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList29);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass33 = pointList32.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass49 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int22 = point21.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int26 = point25.getX();
        int int27 = point25.getX();
        int int28 = point25.getX();
        int int29 = point25.getY();
        int int30 = point25.getY();
        boolean boolean31 = point21.dominates(point25);
        boolean boolean32 = point5.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean49 = point38.dominates(point48);
        int int50 = point48.getY();
        boolean boolean51 = point21.dominates(point48);
        int int52 = point21.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 32 + "'", int50 == 32);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 52);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean15 = point8.dominates(point14);
        boolean boolean16 = point2.dominates(point14);
        java.lang.Class<?> wildcardClass17 = point14.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, 0);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (-1));
        boolean boolean19 = point13.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = point18.dominates(point20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) 'a');
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        int int5 = point2.getX();
        java.lang.Class<?> wildcardClass6 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point36 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList42, pointArray41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm44.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm33.produceFinalSkyLine(pointList42, pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm33.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm50.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point55 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList61, pointArray60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm63.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm52.produceFinalSkyLine(pointList61, pointList64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean73 = point69.dominates(point72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point69 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList75, pointArray74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm77.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm66.produceFinalSkyLine(pointList75, pointList78);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm50.produceFinalSkyLine(pointList65, pointList78);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm33.produceSubSkyLines(pointList80);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.produceSubSkyLines(pointList81);
        java.lang.Class<?> wildcardClass83 = pointList82.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(pointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(pointArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(pointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass15 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.produceSubSkyLines(pointList18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, 10);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        boolean boolean30 = point13.dominates(point19);
        int int31 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        int int40 = point37.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean44 = point37.dominates(point43);
        boolean boolean45 = point19.dominates(point37);
        int int46 = point19.getX();
        java.lang.Class<?> wildcardClass47 = point19.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean58 = point51.dominates(point57);
        boolean boolean59 = point38.dominates(point51);
        boolean boolean60 = point2.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean64 = point38.dominates(point63);
        int int65 = point38.getX();
        java.lang.Class<?> wildcardClass66 = point38.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean12 = point5.dominates(point11);
        int int13 = point5.getY();
        int int14 = point5.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) (short) 0);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean6 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass7 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        boolean boolean17 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point9.dominates(point20);
        int int22 = point9.getX();
        int int23 = point9.getY();
        java.lang.Class<?> wildcardClass24 = point9.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm61.produceSubSkyLines(pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm31.produceFinalSkyLine(pointList60, pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.produceSubSkyLines(pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.produceSubSkyLines(pointList81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getX();
        int int8 = point2.getY();
        int int9 = point2.getY();
        java.lang.Class<?> wildcardClass10 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.produceSubSkyLines(pointList52);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass59 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getX();
        int int8 = point2.getY();
        int int9 = point2.getX();
        int int10 = point2.getX();
        int int11 = point2.getX();
        java.lang.Class<?> wildcardClass12 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (byte) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean19 = point8.dominates(point18);
        boolean boolean20 = point2.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 97);
        int int24 = point23.getX();
        boolean boolean25 = point8.dominates(point23);
        java.lang.Class<?> wildcardClass26 = point23.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point66 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList72, pointArray71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm74.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm63.produceFinalSkyLine(pointList72, pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm62.produceSubSkyLines(pointList72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm78.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm48.produceFinalSkyLine(pointList77, pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.produceSubSkyLines(pointList77);
        java.lang.Class<?> wildcardClass82 = pointList77.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(pointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList2 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass3 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(pointList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) '4');
        boolean boolean19 = point14.dominates(point18);
        boolean boolean20 = point2.dominates(point14);
        java.lang.Class<?> wildcardClass21 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        int int22 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        boolean boolean38 = point28.dominates(point36);
        int int39 = point36.getX();
        int int40 = point36.getX();
        boolean boolean41 = point11.dominates(point36);
        boolean boolean42 = point7.dominates(point11);
        int int43 = point11.getY();
        boolean boolean44 = point2.dominates(point11);
        java.lang.Class<?> wildcardClass45 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean23 = point16.dominates(point22);
        java.lang.Class<?> wildcardClass24 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        boolean boolean42 = point32.dominates(point40);
        boolean boolean43 = point26.dominates(point40);
        boolean boolean44 = point21.dominates(point40);
        int int45 = point21.getX();
        java.lang.Class<?> wildcardClass46 = point21.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 97);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int6 = point5.getY();
        boolean boolean7 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass8 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        int int33 = point30.getX();
        int int34 = point30.getX();
        boolean boolean35 = point5.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point41.getY();
        int int44 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean48 = point41.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        int int56 = point54.getY();
        int int57 = point54.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean61 = point54.dominates(point60);
        boolean boolean62 = point41.dominates(point54);
        boolean boolean63 = point5.dominates(point41);
        boolean boolean64 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        int int72 = point70.getY();
        int int73 = point70.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean77 = point70.dominates(point76);
        boolean boolean78 = point5.dominates(point76);
        java.lang.Class<?> wildcardClass79 = point76.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        int int27 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean31 = point24.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean35 = point24.dominates(point34);
        boolean boolean36 = point5.dominates(point24);
        java.lang.Class<?> wildcardClass37 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        boolean boolean33 = point16.dominates(point22);
        boolean boolean34 = point2.dominates(point16);
        int int35 = point16.getY();
        java.lang.Class<?> wildcardClass36 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        boolean boolean11 = point2.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm48.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point53 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList59, pointArray58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm61.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm50.produceFinalSkyLine(pointList59, pointList62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm48.produceFinalSkyLine(pointList63, pointList76);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean87 = point83.dominates(point86);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray88 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point83 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList89, pointArray88);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm91 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm91.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm80.produceFinalSkyLine(pointList89, pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm79.produceSubSkyLines(pointList89);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm79.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm79.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.produceFinalSkyLine(pointList63, pointList96);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList99 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(pointArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(pointArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
        org.junit.Assert.assertNotNull(pointList99);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (short) 0);
        int int3 = point2.getX();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = null;
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point48 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList54, pointArray53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm56.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm45.produceFinalSkyLine(pointList54, pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm45.getPoints();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm0.produceFinalSkyLine(pointList44, pointList59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.size()\" because \"left\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(pointArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        boolean boolean11 = point2.dominates(point10);
        java.lang.Class<?> wildcardClass12 = point10.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean83 = point79.dominates(point82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point79 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList85, pointArray84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm87.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm76.produceFinalSkyLine(pointList85, pointList88);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm48.produceFinalSkyLine(pointList75, pointList85);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm0.produceSubSkyLines(pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass95 = pointList94.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(pointArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm32.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point37 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList43, pointArray42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm34.produceFinalSkyLine(pointList43, pointList46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm32.produceFinalSkyLine(pointList47, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm63.produceSubSkyLines(pointList73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point82 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList88, pointArray87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm90.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm79.produceFinalSkyLine(pointList88, pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm63.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm32.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.produceSubSkyLines(pointList94);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList99 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(pointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(pointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
        org.junit.Assert.assertNotNull(pointList99);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int6 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean10 = point5.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        boolean boolean30 = point13.dominates(point27);
        int int31 = point13.getY();
        boolean boolean32 = point9.dominates(point13);
        boolean boolean33 = point2.dominates(point13);
        java.lang.Class<?> wildcardClass34 = point13.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        int int24 = point21.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        int int33 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean37 = point30.dominates(point36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean41 = point30.dominates(point40);
        int int42 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        boolean boolean50 = point30.dominates(point45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int54 = point53.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        int int62 = point57.getX();
        boolean boolean63 = point53.dominates(point57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int67 = point66.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean74 = point70.dominates(point73);
        int int75 = point70.getX();
        boolean boolean76 = point66.dominates(point70);
        int int77 = point70.getX();
        boolean boolean78 = point53.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int82 = point81.getX();
        int int83 = point81.getY();
        boolean boolean84 = point53.dominates(point81);
        boolean boolean85 = point30.dominates(point53);
        boolean boolean86 = point21.dominates(point53);
        java.lang.Class<?> wildcardClass87 = point53.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass51 = pointList50.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass35 = pointList34.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point5.getX();
        boolean boolean11 = point2.dominates(point5);
        int int12 = point5.getY();
        java.lang.Class<?> wildcardClass13 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point5.getX();
        int int17 = point5.getY();
        int int18 = point5.getX();
        int int19 = point5.getX();
        java.lang.Class<?> wildcardClass20 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean58 = point51.dominates(point57);
        boolean boolean59 = point38.dominates(point51);
        boolean boolean60 = point2.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean64 = point38.dominates(point63);
        int int65 = point38.getY();
        int int66 = point38.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) '4');
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int3 = point2.getY();
        int int4 = point2.getY();
        java.lang.Class<?> wildcardClass5 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm16.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm16.produceFinalSkyLine(pointList31, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.produceSubSkyLines(pointList46);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm0.produceSubSkyLines(pointList49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point66 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList72, pointArray71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm74.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm63.produceFinalSkyLine(pointList72, pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm62.produceSubSkyLines(pointList72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm78.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm48.produceFinalSkyLine(pointList77, pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.produceSubSkyLines(pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass83 = pointList82.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(pointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) 'a');
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm61.produceSubSkyLines(pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm31.produceFinalSkyLine(pointList60, pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.produceSubSkyLines(pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass80 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, (int) (short) 10);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.lang.Class<?> wildcardClass16 = pointList15.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.produceSubSkyLines(pointList52);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass63 = pointList62.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        int int9 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int13 = point12.getX();
        int int14 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int18 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point21.getX();
        boolean boolean27 = point17.dominates(point21);
        int int28 = point17.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        boolean boolean44 = point34.dominates(point42);
        int int45 = point42.getX();
        int int46 = point42.getX();
        boolean boolean47 = point17.dominates(point42);
        int int48 = point17.getX();
        boolean boolean49 = point12.dominates(point17);
        boolean boolean50 = point5.dominates(point17);
        int int51 = point17.getX();
        int int52 = point17.getX();
        int int53 = point17.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point2.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int25 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean29 = point24.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        int int38 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean42 = point35.dominates(point41);
        boolean boolean43 = point24.dominates(point35);
        boolean boolean44 = point2.dominates(point24);
        int int45 = point24.getX();
        java.lang.Class<?> wildcardClass46 = point24.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) (short) 100);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm48.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm48.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm0.produceFinalSkyLine(pointList63, pointList64);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int24 = point23.getX();
        int int25 = point23.getX();
        int int26 = point23.getX();
        int int27 = point23.getY();
        boolean boolean28 = point18.dominates(point23);
        boolean boolean29 = point2.dominates(point23);
        int int30 = point2.getX();
        java.lang.Class<?> wildcardClass31 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', (int) (byte) -1);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        java.lang.Class<?> wildcardClass5 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getY();
        java.lang.Class<?> wildcardClass6 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean8 = point2.dominates(point7);
        java.lang.Class<?> wildcardClass9 = point7.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) '#');
        int int3 = point2.getY();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        boolean boolean11 = point2.dominates(point10);
        int int12 = point10.getY();
        java.lang.Class<?> wildcardClass13 = point10.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        int int17 = point9.getY();
        int int18 = point9.getY();
        boolean boolean19 = point2.dominates(point9);
        java.lang.Class<?> wildcardClass20 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point10.getX();
        boolean boolean16 = point6.dominates(point10);
        int int17 = point10.getX();
        boolean boolean18 = point2.dominates(point10);
        java.lang.Class<?> wildcardClass19 = point10.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm32.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point37 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList43, pointArray42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm34.produceFinalSkyLine(pointList43, pointList46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm32.produceFinalSkyLine(pointList47, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm63.produceSubSkyLines(pointList73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point82 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList88, pointArray87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm90.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm79.produceFinalSkyLine(pointList88, pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm63.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm32.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.produceSubSkyLines(pointList94);
        java.lang.Class<?> wildcardClass96 = pointList94.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(pointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(pointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm32.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point37 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList43, pointArray42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm34.produceFinalSkyLine(pointList43, pointList46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm32.produceFinalSkyLine(pointList47, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm63.produceSubSkyLines(pointList73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point82 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList88, pointArray87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm90.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm79.produceFinalSkyLine(pointList88, pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm63.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm32.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.produceSubSkyLines(pointList92);
        java.lang.Class<?> wildcardClass96 = pointList95.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(pointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(pointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int19 = point18.getY();
        boolean boolean20 = point5.dominates(point18);
        int int21 = point18.getX();
        java.lang.Class<?> wildcardClass22 = point18.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        int int28 = point2.getY();
        int int29 = point2.getY();
        int int30 = point2.getY();
        java.lang.Class<?> wildcardClass31 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        int int9 = point5.getX();
        java.lang.Class<?> wildcardClass10 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (-1));
        boolean boolean19 = point13.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int23 = point22.getX();
        int int24 = point22.getX();
        int int25 = point22.getX();
        int int26 = point22.getY();
        int int27 = point22.getY();
        boolean boolean28 = point13.dominates(point22);
        int int29 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int36 = point35.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point39.getX();
        boolean boolean45 = point35.dominates(point39);
        int int46 = point39.getX();
        boolean boolean47 = point32.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point39.dominates(point50);
        boolean boolean52 = point22.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        int int61 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean65 = point58.dominates(point64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean69 = point58.dominates(point68);
        int int70 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int74 = point73.getX();
        boolean boolean75 = point58.dominates(point73);
        int int76 = point58.getY();
        boolean boolean77 = point39.dominates(point58);
        int int78 = point39.getX();
        java.lang.Class<?> wildcardClass79 = point39.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 1);
        boolean boolean6 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass7 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        int int15 = point2.getX();
        int int16 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int36 = point35.getY();
        boolean boolean37 = point22.dominates(point35);
        boolean boolean38 = point2.dominates(point35);
        java.lang.Class<?> wildcardClass39 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (-1));
        boolean boolean19 = point13.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int23 = point22.getX();
        int int24 = point22.getX();
        int int25 = point22.getX();
        int int26 = point22.getY();
        int int27 = point22.getY();
        boolean boolean28 = point13.dominates(point22);
        int int29 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int36 = point35.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point39.getX();
        boolean boolean45 = point35.dominates(point39);
        int int46 = point39.getX();
        boolean boolean47 = point32.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point39.dominates(point50);
        boolean boolean52 = point22.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        int int61 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean65 = point58.dominates(point64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean69 = point58.dominates(point68);
        int int70 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int74 = point73.getX();
        boolean boolean75 = point58.dominates(point73);
        int int76 = point58.getY();
        boolean boolean77 = point39.dominates(point58);
        int int78 = point39.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = point39.dominates(point79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean15 = point8.dominates(point14);
        boolean boolean16 = point2.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = point2.dominates(point17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int8 = point7.getX();
        boolean boolean9 = point2.dominates(point7);
        java.lang.Class<?> wildcardClass10 = point7.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass17 = pointList16.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 97);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) ' ');
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        boolean boolean19 = point9.dominates(point17);
        boolean boolean20 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point26.getY();
        int int29 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean33 = point26.dominates(point32);
        int int34 = point32.getX();
        boolean boolean35 = point2.dominates(point32);
        java.lang.Class<?> wildcardClass36 = point32.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point22 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList28, pointArray27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm19.produceFinalSkyLine(pointList28, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm19.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm19.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm19.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm19.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm19.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = skylineAlgorithm19.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point43 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList49, pointArray48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm51.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm40.produceFinalSkyLine(pointList49, pointList52);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = skylineAlgorithm39.produceSubSkyLines(pointList49);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm19.produceSubSkyLines(pointList49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean64 = point60.dominates(point63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point60 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList66, pointArray65);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm68.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = skylineAlgorithm57.produceFinalSkyLine(pointList66, pointList69);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = skylineAlgorithm56.produceSubSkyLines(pointList66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean79 = point75.dominates(point78);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point75 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList81, pointArray80);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm83.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm72.produceFinalSkyLine(pointList81, pointList84);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm56.produceSubSkyLines(pointList85);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm0.produceFinalSkyLine(pointList55, pointList86);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm0.produceSubSkyLines(pointList89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(pointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertNotNull(pointList38);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(pointArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertNotNull(pointList54);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(pointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(pointList69);
        org.junit.Assert.assertNotNull(pointList70);
        org.junit.Assert.assertNotNull(pointList71);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(pointArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
        org.junit.Assert.assertNotNull(pointList87);
        org.junit.Assert.assertNotNull(pointList88);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean58 = point51.dominates(point57);
        boolean boolean59 = point38.dominates(point51);
        boolean boolean60 = point2.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean64 = point38.dominates(point63);
        int int65 = point38.getY();
        java.lang.Class<?> wildcardClass66 = point38.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 32);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) 'a');
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int21 = point20.getX();
        int int22 = point20.getX();
        int int23 = point20.getX();
        int int24 = point20.getY();
        boolean boolean25 = point15.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int29 = point28.getX();
        int int30 = point28.getX();
        boolean boolean31 = point20.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = point28.dominates(point32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int23 = point22.getX();
        int int24 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        int int33 = point30.getX();
        boolean boolean34 = point22.dominates(point30);
        boolean boolean35 = point16.dominates(point30);
        java.lang.Class<?> wildcardClass36 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) (short) -1);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm48.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point53 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList59, pointArray58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm61.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm50.produceFinalSkyLine(pointList59, pointList62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm48.produceFinalSkyLine(pointList63, pointList76);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean87 = point83.dominates(point86);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray88 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point83 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList89, pointArray88);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm91 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm91.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm80.produceFinalSkyLine(pointList89, pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm79.produceSubSkyLines(pointList89);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm79.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm79.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.produceFinalSkyLine(pointList63, pointList96);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass99 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(pointArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(pointArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        int int21 = point16.getY();
        int int22 = point16.getY();
        int int23 = point16.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 100);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass44 = pointList43.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        int int15 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int19 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point22.getX();
        boolean boolean28 = point18.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int32 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point35.getX();
        boolean boolean41 = point31.dominates(point35);
        int int42 = point35.getX();
        boolean boolean43 = point18.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int47 = point46.getX();
        int int48 = point46.getY();
        boolean boolean49 = point18.dominates(point46);
        boolean boolean50 = point12.dominates(point46);
        boolean boolean51 = point6.dominates(point46);
        boolean boolean52 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = point6.dominates(point53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm61.produceSubSkyLines(pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm31.produceFinalSkyLine(pointList60, pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.produceSubSkyLines(pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass82 = pointList81.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm16.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm16.produceFinalSkyLine(pointList31, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.produceSubSkyLines(pointList46);
        java.lang.Class<?> wildcardClass48 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean6 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass7 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) '4');
        int int3 = point2.getX();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) '4');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        int int7 = point5.getX();
        int int8 = point5.getX();
        int int9 = point5.getY();
        boolean boolean10 = point2.dominates(point5);
        int int11 = point5.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getX();
        int int8 = point2.getY();
        int int9 = point2.getY();
        int int10 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = point2.dominates(point11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        boolean boolean30 = point13.dominates(point19);
        int int31 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        int int40 = point37.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean44 = point37.dominates(point43);
        boolean boolean45 = point19.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 10);
        boolean boolean49 = point37.dominates(point48);
        int int50 = point48.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int54 = point53.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int58 = point57.getY();
        boolean boolean59 = point53.dominates(point57);
        boolean boolean60 = point48.dominates(point57);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 32 + "'", int50 == 32);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point38 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList44, pointArray43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm35.produceFinalSkyLine(pointList44, pointList47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point52 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList58, pointArray57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm60.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm49.produceFinalSkyLine(pointList58, pointList61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm63.produceSubSkyLines(pointList73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point82 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList88, pointArray87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm90.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm79.produceFinalSkyLine(pointList88, pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm63.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm35.produceFinalSkyLine(pointList58, pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.produceSubSkyLines(pointList94);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm0.produceSubSkyLines(pointList97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(pointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(pointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(pointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        boolean boolean17 = point2.dominates(point9);
        int int18 = point9.getY();
        int int19 = point9.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        int int5 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) (short) 10);
        int int9 = point8.getY();
        boolean boolean10 = point2.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = point8.dominates(point11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        boolean boolean6 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass7 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) (short) 10);
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (-1));
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        boolean boolean17 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int21 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean25 = point20.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point31.getY();
        int int34 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean38 = point31.dominates(point37);
        boolean boolean39 = point20.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int43 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean47 = point42.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        int int55 = point53.getY();
        int int56 = point53.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean60 = point53.dominates(point59);
        boolean boolean61 = point42.dominates(point53);
        boolean boolean62 = point20.dominates(point42);
        int int63 = point42.getX();
        int int64 = point42.getY();
        boolean boolean65 = point9.dominates(point42);
        int int66 = point9.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        boolean boolean17 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int24 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point27.getX();
        boolean boolean33 = point23.dominates(point27);
        int int34 = point27.getX();
        int int35 = point27.getY();
        int int36 = point27.getY();
        boolean boolean37 = point20.dominates(point27);
        boolean boolean38 = point2.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = point2.dominates(point39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean16 = point5.dominates(point15);
        java.lang.Class<?> wildcardClass17 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm17.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point22 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList28, pointArray27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm19.produceFinalSkyLine(pointList28, pointList31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point36 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList42, pointArray41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm44.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm33.produceFinalSkyLine(pointList42, pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm17.produceFinalSkyLine(pointList32, pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm0.produceSubSkyLines(pointList47);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass50 = pointList49.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(pointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(pointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point5.getX();
        int int17 = point5.getY();
        int int18 = point5.getX();
        int int19 = point5.getY();
        java.lang.Class<?> wildcardClass20 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        int int15 = point2.getX();
        int int16 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int20 = point19.getX();
        int int21 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        int int29 = point27.getY();
        int int30 = point27.getX();
        boolean boolean31 = point19.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        boolean boolean40 = point27.dominates(point37);
        boolean boolean41 = point2.dominates(point37);
        java.lang.Class<?> wildcardClass42 = point37.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) 'a');
        int int3 = point2.getY();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) (byte) -1);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm18.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm18.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point37 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList43, pointArray42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm34.produceFinalSkyLine(pointList43, pointList46);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm18.produceSubSkyLines(pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm18.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm18.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point54 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList60, pointArray59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm51.produceFinalSkyLine(pointList60, pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm51.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm51.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm51.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm51.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm51.getPoints();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = skylineAlgorithm0.produceFinalSkyLine(pointList50, pointList69);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(pointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(pointArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertNotNull(pointList69);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm46.produceSubSkyLines(pointList56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm46.produceSubSkyLines(pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm18.produceFinalSkyLine(pointList41, pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.produceSubSkyLines(pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass81 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, 1);
        int int3 = point2.getX();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 1);
        int int36 = point35.getY();
        boolean boolean37 = point2.dominates(point35);
        java.lang.Class<?> wildcardClass38 = point35.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.produceSubSkyLines(pointList33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 97);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int15 = point14.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        int int23 = point18.getX();
        boolean boolean24 = point14.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int28 = point27.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point31.getX();
        boolean boolean37 = point27.dominates(point31);
        int int38 = point31.getX();
        boolean boolean39 = point14.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int43 = point42.getX();
        int int44 = point42.getY();
        boolean boolean45 = point14.dominates(point42);
        boolean boolean46 = point8.dominates(point42);
        boolean boolean47 = point2.dominates(point42);
        java.lang.Class<?> wildcardClass48 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) -1);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        boolean boolean23 = point6.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int27 = point26.getX();
        int int28 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point34.getY();
        int int37 = point34.getX();
        boolean boolean38 = point26.dominates(point34);
        boolean boolean39 = point20.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int43 = point42.getX();
        boolean boolean44 = point34.dominates(point42);
        boolean boolean45 = point2.dominates(point34);
        int int46 = point34.getY();
        java.lang.Class<?> wildcardClass47 = point34.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        java.lang.Class<?> wildcardClass20 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) 100);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceSubSkyLines(pointList31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm0.produceSubSkyLines(pointList47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass51 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int8 = point7.getX();
        boolean boolean9 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int13 = point12.getY();
        boolean boolean14 = point7.dominates(point12);
        int int15 = point12.getY();
        int int16 = point12.getY();
        int int17 = point12.getX();
        java.lang.Class<?> wildcardClass18 = point12.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean16 = point5.dominates(point15);
        java.lang.Class<?> wildcardClass17 = point15.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) ' ');
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getX();
        java.lang.Class<?> wildcardClass19 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 100);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) '4');
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) 'a');
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        boolean boolean25 = point5.dominates(point20);
        int int26 = point20.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 100);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) '4');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        int int14 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int18 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point21.getX();
        boolean boolean27 = point17.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int31 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point34.getX();
        boolean boolean40 = point30.dominates(point34);
        int int41 = point34.getX();
        boolean boolean42 = point17.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int46 = point45.getX();
        int int47 = point45.getY();
        boolean boolean48 = point17.dominates(point45);
        boolean boolean49 = point11.dominates(point45);
        boolean boolean50 = point5.dominates(point45);
        boolean boolean51 = point2.dominates(point45);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        int int9 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean22 = point15.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean26 = point15.dominates(point25);
        int int27 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int31 = point30.getX();
        int int32 = point30.getX();
        int int33 = point30.getX();
        int int34 = point30.getY();
        boolean boolean35 = point25.dominates(point30);
        boolean boolean36 = point5.dominates(point25);
        java.lang.Class<?> wildcardClass37 = point25.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) '4');
        boolean boolean19 = point14.dominates(point18);
        boolean boolean20 = point2.dominates(point14);
        java.lang.Class<?> wildcardClass21 = point14.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        boolean boolean20 = point10.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        boolean boolean28 = point18.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        boolean boolean47 = point37.dominates(point45);
        boolean boolean48 = point31.dominates(point45);
        boolean boolean49 = point26.dominates(point45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int53 = point52.getY();
        boolean boolean54 = point45.dominates(point52);
        boolean boolean55 = point2.dominates(point52);
        java.lang.Class<?> wildcardClass56 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 100);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 97);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (-1));
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.produceSubSkyLines(pointList52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean65 = point61.dominates(point64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point61 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList67, pointArray66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = skylineAlgorithm69.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = skylineAlgorithm58.produceFinalSkyLine(pointList67, pointList70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean80 = point76.dominates(point79);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point76 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList82, pointArray81);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm84.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm73.produceFinalSkyLine(pointList82, pointList85);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm72.produceSubSkyLines(pointList82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm88 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm88.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm58.produceFinalSkyLine(pointList87, pointList89);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm0.produceSubSkyLines(pointList90);
        java.lang.Class<?> wildcardClass92 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(pointArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(pointList70);
        org.junit.Assert.assertNotNull(pointList71);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(pointArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
        org.junit.Assert.assertNotNull(pointList87);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.produceSubSkyLines(pointList52);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm0.produceSubSkyLines(pointList64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm14.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point33 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList39 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList39, pointArray38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm41.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm30.produceFinalSkyLine(pointList39, pointList42);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm14.produceFinalSkyLine(pointList29, pointList42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point48 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList54, pointArray53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm56.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm45.produceFinalSkyLine(pointList54, pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm45.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean68 = point64.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point64 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList70, pointArray69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm72.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm61.produceFinalSkyLine(pointList70, pointList73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean83 = point79.dominates(point82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point79 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList85, pointArray84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm87.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm76.produceFinalSkyLine(pointList85, pointList88);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm75.produceSubSkyLines(pointList85);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm45.produceFinalSkyLine(pointList74, pointList85);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm14.produceSubSkyLines(pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm0.produceSubSkyLines(pointList91);
        java.lang.Class<?> wildcardClass94 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(pointArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(pointArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(pointArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(pointList73);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(pointArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        int int18 = point15.getY();
        java.lang.Class<?> wildcardClass19 = point15.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int3 = point2.getY();
        int int4 = point2.getX();
        int int5 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (short) 100);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point33.dominates(point46);
        boolean boolean55 = point19.dominates(point46);
        java.lang.Class<?> wildcardClass56 = point19.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean15 = point8.dominates(point14);
        boolean boolean16 = point2.dominates(point14);
        int int17 = point14.getX();
        int int18 = point14.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int31 = point30.getX();
        int int32 = point30.getY();
        boolean boolean33 = point2.dominates(point30);
        int int34 = point2.getY();
        int int35 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        int int24 = point21.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int28 = point27.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point31.getX();
        boolean boolean37 = point27.dominates(point31);
        boolean boolean38 = point21.dominates(point27);
        boolean boolean39 = point7.dominates(point21);
        boolean boolean40 = point2.dominates(point7);
        java.lang.Class<?> wildcardClass41 = point7.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int6 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean10 = point5.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        boolean boolean30 = point13.dominates(point27);
        int int31 = point13.getY();
        boolean boolean32 = point9.dominates(point13);
        boolean boolean33 = point2.dominates(point13);
        int int34 = point13.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        boolean boolean21 = point11.dominates(point19);
        boolean boolean22 = point5.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean26 = point19.dominates(point25);
        boolean boolean27 = point2.dominates(point19);
        java.lang.Class<?> wildcardClass28 = point19.getClass();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point2.dominates(point13);
        java.lang.Class<?> wildcardClass22 = point13.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 0);
        boolean boolean12 = point6.dominates(point11);
        int int13 = point11.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (int) (byte) 100);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, 32);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) (byte) 10);
        boolean boolean6 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass7 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        boolean boolean23 = point6.dominates(point20);
        int int24 = point6.getY();
        int int25 = point6.getY();
        boolean boolean26 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        int int35 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean39 = point32.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean43 = point32.dominates(point42);
        int int44 = point42.getX();
        int int45 = point42.getY();
        int int46 = point42.getY();
        boolean boolean47 = point2.dominates(point42);
        java.lang.Class<?> wildcardClass48 = point42.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 32 + "'", int45 == 32);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 32 + "'", int46 == 32);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point5.getX();
        boolean boolean11 = point2.dominates(point5);
        int int12 = point5.getX();
        int int13 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = point5.dominates(point14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm14.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point33 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList39 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList39, pointArray38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm41.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm30.produceFinalSkyLine(pointList39, pointList42);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm14.produceFinalSkyLine(pointList29, pointList42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point48 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList54, pointArray53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm56.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm45.produceFinalSkyLine(pointList54, pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm45.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean68 = point64.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point64 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList70, pointArray69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm72.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm61.produceFinalSkyLine(pointList70, pointList73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean83 = point79.dominates(point82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point79 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList85, pointArray84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm87.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm76.produceFinalSkyLine(pointList85, pointList88);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm75.produceSubSkyLines(pointList85);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm45.produceFinalSkyLine(pointList74, pointList85);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm14.produceSubSkyLines(pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm0.produceSubSkyLines(pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass98 = pointList97.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(pointArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(pointArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(pointArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(pointList73);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(pointArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getY();
        int int19 = point5.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int25 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point28.getX();
        boolean boolean34 = point24.dominates(point28);
        int int35 = point28.getX();
        boolean boolean36 = point11.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int40 = point39.getX();
        int int41 = point39.getY();
        boolean boolean42 = point11.dominates(point39);
        boolean boolean43 = point5.dominates(point39);
        int int44 = point5.getY();
        int int45 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int49 = point48.getX();
        boolean boolean50 = point5.dominates(point48);
        java.lang.Class<?> wildcardClass51 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int3 = point2.getX();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int8 = point7.getX();
        int int9 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getX();
        boolean boolean19 = point7.dominates(point15);
        int int20 = point7.getX();
        int int21 = point7.getX();
        boolean boolean22 = point2.dominates(point7);
        int int23 = point7.getY();
        java.lang.Class<?> wildcardClass24 = point7.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        int int15 = point2.getX();
        int int16 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int20 = point19.getX();
        int int21 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        int int29 = point27.getY();
        int int30 = point27.getX();
        boolean boolean31 = point19.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        boolean boolean40 = point27.dominates(point37);
        boolean boolean41 = point2.dominates(point37);
        java.lang.Class<?> wildcardClass42 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm61.produceSubSkyLines(pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm31.produceFinalSkyLine(pointList60, pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.produceSubSkyLines(pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (byte) -1);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point33.dominates(point46);
        boolean boolean55 = point19.dominates(point46);
        int int56 = point19.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        int int25 = point22.getY();
        boolean boolean26 = point5.dominates(point22);
        int int27 = point5.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        boolean boolean33 = point16.dominates(point22);
        boolean boolean34 = point2.dominates(point16);
        int int35 = point2.getX();
        int int36 = point2.getX();
        java.lang.Class<?> wildcardClass37 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.produceSubSkyLines(pointList41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm31.produceSubSkyLines(pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm0.produceSubSkyLines(pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass66 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int21 = point20.getX();
        int int22 = point20.getX();
        int int23 = point20.getX();
        int int24 = point20.getY();
        boolean boolean25 = point15.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int29 = point28.getX();
        int int30 = point28.getX();
        boolean boolean31 = point20.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point20.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) '#');
        boolean boolean43 = point37.dominates(point42);
        java.lang.Class<?> wildcardClass44 = point37.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        int int18 = point16.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        boolean boolean26 = point16.dominates(point24);
        boolean boolean27 = point10.dominates(point24);
        int int28 = point10.getY();
        boolean boolean29 = point6.dominates(point10);
        java.lang.Class<?> wildcardClass30 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point32 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList38, pointArray37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm40.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm29.produceFinalSkyLine(pointList38, pointList41);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm28.produceSubSkyLines(pointList38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point47 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList53, pointArray52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm55.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm44.produceFinalSkyLine(pointList53, pointList56);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm28.produceSubSkyLines(pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.produceFinalSkyLine(pointList23, pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass62 = pointList61.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(pointArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(pointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass32 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 52);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        boolean boolean20 = point10.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        boolean boolean28 = point18.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        boolean boolean47 = point37.dominates(point45);
        boolean boolean48 = point31.dominates(point45);
        boolean boolean49 = point26.dominates(point45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int53 = point52.getY();
        boolean boolean54 = point45.dominates(point52);
        boolean boolean55 = point2.dominates(point52);
        int int56 = point52.getY();
        int int57 = point52.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm2.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm2.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm2.produceSubSkyLines(pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm2.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm2.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm2.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point40 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList46, pointArray45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm48.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm37.produceFinalSkyLine(pointList46, pointList49);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm36.produceSubSkyLines(pointList46);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm0.produceFinalSkyLine(pointList35, pointList46);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(pointArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList21 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList22 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm0.produceSubSkyLines(pointList25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertNotNull(pointList21);
        org.junit.Assert.assertNotNull(pointList22);
        org.junit.Assert.assertNotNull(pointList23);
        org.junit.Assert.assertNotNull(pointList24);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) 'a');
        int int3 = point2.getY();
        int int4 = point2.getX();
        java.lang.Class<?> wildcardClass5 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) 'a');
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (byte) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean19 = point8.dominates(point18);
        boolean boolean20 = point2.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 97);
        int int24 = point23.getX();
        boolean boolean25 = point8.dominates(point23);
        java.lang.Class<?> wildcardClass26 = point8.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 97);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int7 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int11 = point10.getX();
        int int12 = point10.getX();
        int int13 = point10.getX();
        int int14 = point10.getY();
        int int15 = point10.getY();
        boolean boolean16 = point6.dominates(point10);
        int int17 = point6.getY();
        boolean boolean18 = point2.dominates(point6);
        int int19 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', (int) ' ');
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) (short) 100);
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point66 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList72, pointArray71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm74.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm63.produceFinalSkyLine(pointList72, pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm62.produceSubSkyLines(pointList72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm78.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm48.produceFinalSkyLine(pointList77, pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.produceSubSkyLines(pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass86 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(pointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass37 = pointList36.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm32.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point37 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList43, pointArray42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm34.produceFinalSkyLine(pointList43, pointList46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm32.produceFinalSkyLine(pointList47, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm63.produceSubSkyLines(pointList73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point82 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList88, pointArray87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm90.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm79.produceFinalSkyLine(pointList88, pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm63.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm32.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.produceSubSkyLines(pointList94);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass99 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(pointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(pointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.produceSubSkyLines(pointList17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getY();
        int int17 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        int int26 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean30 = point23.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean34 = point23.dominates(point33);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 52);
        boolean boolean38 = point33.dominates(point37);
        boolean boolean39 = point13.dominates(point37);
        java.lang.Class<?> wildcardClass40 = point37.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point10.getX();
        boolean boolean16 = point6.dominates(point10);
        int int17 = point10.getX();
        boolean boolean18 = point2.dominates(point10);
        int int19 = point10.getY();
        java.lang.Class<?> wildcardClass20 = point10.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point14.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        boolean boolean24 = point14.dominates(point22);
        int int25 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int29 = point28.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point32.getX();
        boolean boolean38 = point28.dominates(point32);
        boolean boolean39 = point22.dominates(point28);
        boolean boolean40 = point8.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int44 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point47.getX();
        boolean boolean53 = point43.dominates(point47);
        int int54 = point47.getX();
        int int55 = point47.getY();
        boolean boolean56 = point8.dominates(point47);
        boolean boolean57 = point5.dominates(point47);
        int int58 = point5.getX();
        boolean boolean59 = point2.dominates(point5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = point2.dominates(point3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        int int20 = point16.getY();
        int int21 = point16.getY();
        java.lang.Class<?> wildcardClass22 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 97);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int7 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int11 = point10.getX();
        int int12 = point10.getX();
        int int13 = point10.getX();
        int int14 = point10.getY();
        int int15 = point10.getY();
        boolean boolean16 = point6.dominates(point10);
        int int17 = point6.getY();
        boolean boolean18 = point2.dominates(point6);
        java.lang.Class<?> wildcardClass19 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) 10);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean58 = point51.dominates(point57);
        boolean boolean59 = point38.dominates(point51);
        boolean boolean60 = point2.dominates(point38);
        int int61 = point38.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (-1));
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) -1);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = point5.dominates(point7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm61.produceSubSkyLines(pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm31.produceFinalSkyLine(pointList60, pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.produceSubSkyLines(pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass81 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList29);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm46.produceSubSkyLines(pointList56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm32.produceFinalSkyLine(pointList61, pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm0.produceSubSkyLines(pointList64);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm0.produceSubSkyLines(pointList67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int9 = point8.getY();
        boolean boolean10 = point2.dominates(point8);
        int int11 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (byte) -1);
        int int15 = point14.getX();
        boolean boolean16 = point8.dominates(point14);
        int int17 = point8.getY();
        java.lang.Class<?> wildcardClass18 = point8.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.produceSubSkyLines(pointList52);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean68 = point64.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point64 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList70, pointArray69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm72.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm61.produceFinalSkyLine(pointList70, pointList73);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm60.produceSubSkyLines(pointList70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean83 = point79.dominates(point82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point79 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList85, pointArray84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm87.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm76.produceFinalSkyLine(pointList85, pointList88);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm60.produceSubSkyLines(pointList89);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm0.produceSubSkyLines(pointList90);
        java.lang.Class<?> wildcardClass92 = pointList90.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(pointArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(pointList73);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(pointArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 10);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 0);
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        int int33 = point2.getX();
        int int34 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        int int15 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int19 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point22.getX();
        boolean boolean28 = point18.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int32 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point35.getX();
        boolean boolean41 = point31.dominates(point35);
        int int42 = point35.getX();
        boolean boolean43 = point18.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int47 = point46.getX();
        int int48 = point46.getY();
        boolean boolean49 = point18.dominates(point46);
        boolean boolean50 = point12.dominates(point46);
        boolean boolean51 = point6.dominates(point46);
        boolean boolean52 = point2.dominates(point6);
        int int53 = point2.getX();
        int int54 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int10 = point9.getX();
        int int11 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int15 = point14.getX();
        boolean boolean16 = point9.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int20 = point19.getY();
        boolean boolean21 = point14.dominates(point19);
        int int22 = point14.getX();
        boolean boolean23 = point5.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = point14.dominates(point24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass21 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        java.lang.Class<?> wildcardClass5 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point45.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        boolean boolean55 = point45.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        boolean boolean71 = point61.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point6, point13, point22, point38, point45, point61 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm0.produceSubSkyLines(pointList73);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass79 = pointList78.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', (int) (short) -1);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point49 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList55, pointArray54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm57.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm46.produceFinalSkyLine(pointList55, pointList58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point63 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList69, pointArray68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = skylineAlgorithm71.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm60.produceFinalSkyLine(pointList69, pointList72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm32.produceFinalSkyLine(pointList59, pointList69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean82 = point78.dominates(point81);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point78 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList84, pointArray83);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm86.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm75.produceFinalSkyLine(pointList84, pointList87);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm32.produceSubSkyLines(pointList84);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm0.produceSubSkyLines(pointList84);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm0.produceSubSkyLines(pointList92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(pointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(pointArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(pointList72);
        org.junit.Assert.assertNotNull(pointList73);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(pointArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(pointList87);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int22 = point21.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int26 = point25.getX();
        int int27 = point25.getX();
        int int28 = point25.getX();
        int int29 = point25.getY();
        int int30 = point25.getY();
        boolean boolean31 = point21.dominates(point25);
        boolean boolean32 = point5.dominates(point21);
        java.lang.Class<?> wildcardClass33 = point21.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 1);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        boolean boolean25 = point15.dominates(point23);
        int int26 = point23.getX();
        int int27 = point23.getX();
        int int28 = point23.getY();
        boolean boolean29 = point9.dominates(point23);
        int int30 = point23.getX();
        boolean boolean31 = point5.dominates(point23);
        int int32 = point23.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point45.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        boolean boolean55 = point45.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        boolean boolean71 = point61.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point6, point13, point22, point38, point45, point61 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm0.produceSubSkyLines(pointList73);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean85 = point81.dominates(point84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point81 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList87, pointArray86);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm89.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm78.produceFinalSkyLine(pointList87, pointList90);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm0.produceSubSkyLines(pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass94 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(pointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        boolean boolean20 = point10.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        boolean boolean28 = point18.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        boolean boolean47 = point37.dominates(point45);
        boolean boolean48 = point31.dominates(point45);
        boolean boolean49 = point26.dominates(point45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int53 = point52.getY();
        boolean boolean54 = point45.dominates(point52);
        boolean boolean55 = point2.dominates(point52);
        java.lang.Class<?> wildcardClass56 = point52.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 52);
        int int3 = point2.getX();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm32.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point37 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList43, pointArray42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm34.produceFinalSkyLine(pointList43, pointList46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm32.produceFinalSkyLine(pointList47, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm63.produceSubSkyLines(pointList73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point82 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList88, pointArray87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm90.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm79.produceFinalSkyLine(pointList88, pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm63.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm32.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.produceSubSkyLines(pointList94);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.produceSubSkyLines(pointList96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(pointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(pointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) 10);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass19 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList29);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.produceSubSkyLines(pointList34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 1);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        int int15 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean19 = point12.dominates(point18);
        boolean boolean20 = point2.dominates(point12);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm48.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point53 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList59, pointArray58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm61.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm50.produceFinalSkyLine(pointList59, pointList62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm48.produceFinalSkyLine(pointList63, pointList76);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean87 = point83.dominates(point86);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray88 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point83 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList89, pointArray88);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm91 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm91.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm80.produceFinalSkyLine(pointList89, pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm79.produceSubSkyLines(pointList89);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm79.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm79.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.produceFinalSkyLine(pointList63, pointList96);
        java.lang.Class<?> wildcardClass98 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(pointArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(pointArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point29.dominates(point37);
        int int40 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int44 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point47.getX();
        boolean boolean53 = point43.dominates(point47);
        boolean boolean54 = point37.dominates(point43);
        boolean boolean55 = point23.dominates(point37);
        boolean boolean56 = point16.dominates(point37);
        int int57 = point16.getX();
        int int58 = point16.getX();
        java.lang.Class<?> wildcardClass59 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point11.getX();
        boolean boolean17 = point7.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int21 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        int int29 = point24.getX();
        boolean boolean30 = point20.dominates(point24);
        int int31 = point24.getX();
        boolean boolean32 = point7.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int36 = point35.getX();
        int int37 = point35.getY();
        boolean boolean38 = point7.dominates(point35);
        boolean boolean39 = point2.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) '4');
        int int43 = point42.getX();
        boolean boolean44 = point35.dominates(point42);
        java.lang.Class<?> wildcardClass45 = point42.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int21 = point20.getX();
        int int22 = point20.getX();
        int int23 = point20.getX();
        int int24 = point20.getY();
        boolean boolean25 = point15.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int29 = point28.getX();
        int int30 = point28.getX();
        boolean boolean31 = point20.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point20.dominates(point37);
        int int40 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point20.dominates(point52);
        int int55 = point52.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        int int9 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int13 = point12.getX();
        int int14 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int18 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point21.getX();
        boolean boolean27 = point17.dominates(point21);
        int int28 = point17.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        boolean boolean44 = point34.dominates(point42);
        int int45 = point42.getX();
        int int46 = point42.getX();
        boolean boolean47 = point17.dominates(point42);
        int int48 = point17.getX();
        boolean boolean49 = point12.dominates(point17);
        boolean boolean50 = point5.dominates(point17);
        int int51 = point17.getX();
        int int52 = point17.getX();
        java.lang.Class<?> wildcardClass53 = point17.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getX();
        int int14 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int18 = point17.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean22 = point17.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        int int31 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean35 = point28.dominates(point34);
        boolean boolean36 = point17.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int40 = point39.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean44 = point39.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point50.getY();
        int int53 = point50.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean57 = point50.dominates(point56);
        boolean boolean58 = point39.dominates(point50);
        boolean boolean59 = point17.dominates(point39);
        boolean boolean60 = point6.dominates(point39);
        int int61 = point39.getX();
        java.lang.Class<?> wildcardClass62 = point39.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        boolean boolean11 = point2.dominates(point10);
        java.lang.Class<?> wildcardClass12 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        int int33 = point27.getX();
        int int34 = point27.getX();
        int int35 = point27.getX();
        int int36 = point27.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) ' ');
        int int3 = point2.getY();
        int int4 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point11.getX();
        boolean boolean17 = point7.dominates(point11);
        int int18 = point11.getX();
        int int19 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int23 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean27 = point22.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean40 = point33.dominates(point39);
        boolean boolean41 = point22.dominates(point33);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int45 = point44.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean49 = point44.dominates(point48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        int int57 = point55.getY();
        int int58 = point55.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean62 = point55.dominates(point61);
        boolean boolean63 = point44.dominates(point55);
        boolean boolean64 = point22.dominates(point44);
        boolean boolean65 = point11.dominates(point44);
        boolean boolean66 = point2.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int70 = point69.getX();
        int int71 = point69.getX();
        int int72 = point69.getX();
        int int73 = point69.getX();
        int int74 = point69.getY();
        int int75 = point69.getY();
        boolean boolean76 = point11.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        int int87 = point85.getY();
        int int88 = point85.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point91 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean92 = point85.dominates(point91);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point95 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean96 = point85.dominates(point95);
        int int97 = point95.getX();
        boolean boolean98 = point79.dominates(point95);
        boolean boolean99 = point69.dominates(point95);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 52 + "'", int75 == 52);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 100 + "'", int97 == 100);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) '4');
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int21 = point20.getX();
        int int22 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int26 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point29.getX();
        boolean boolean35 = point25.dominates(point29);
        int int36 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        boolean boolean52 = point42.dominates(point50);
        int int53 = point50.getX();
        int int54 = point50.getX();
        boolean boolean55 = point25.dominates(point50);
        int int56 = point25.getX();
        boolean boolean57 = point20.dominates(point25);
        boolean boolean58 = point15.dominates(point20);
        int int59 = point20.getX();
        java.lang.Class<?> wildcardClass60 = point20.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point66 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList72, pointArray71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm74.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm63.produceFinalSkyLine(pointList72, pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm62.produceSubSkyLines(pointList72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm78.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm48.produceFinalSkyLine(pointList77, pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.produceSubSkyLines(pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass85 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(pointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        boolean boolean21 = point2.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int25 = point24.getX();
        int int26 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int30 = point29.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        int int38 = point33.getX();
        boolean boolean39 = point29.dominates(point33);
        int int40 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        boolean boolean56 = point46.dominates(point54);
        int int57 = point54.getX();
        int int58 = point54.getX();
        boolean boolean59 = point29.dominates(point54);
        int int60 = point29.getX();
        boolean boolean61 = point24.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int65 = point64.getX();
        int int66 = point64.getY();
        int int67 = point64.getX();
        boolean boolean68 = point29.dominates(point64);
        boolean boolean69 = point2.dominates(point64);
        int int70 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 32 + "'", int70 == 32);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (-1));
        boolean boolean19 = point13.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int23 = point22.getX();
        int int24 = point22.getX();
        int int25 = point22.getX();
        int int26 = point22.getY();
        int int27 = point22.getY();
        boolean boolean28 = point13.dominates(point22);
        int int29 = point22.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) (short) 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 0);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        int int18 = point16.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        boolean boolean26 = point16.dominates(point24);
        int int27 = point24.getY();
        boolean boolean28 = point10.dominates(point24);
        int int29 = point10.getY();
        boolean boolean30 = point6.dominates(point10);
        boolean boolean31 = point2.dominates(point6);
        java.lang.Class<?> wildcardClass32 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        int int20 = point16.getX();
        int int21 = point16.getY();
        boolean boolean22 = point2.dominates(point16);
        int int23 = point16.getX();
        java.lang.Class<?> wildcardClass24 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point2.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int25 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean29 = point24.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        int int38 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean42 = point35.dominates(point41);
        boolean boolean43 = point24.dominates(point35);
        boolean boolean44 = point2.dominates(point24);
        int int45 = point24.getX();
        int int46 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (short) 1);
        boolean boolean50 = point24.dominates(point49);
        java.lang.Class<?> wildcardClass51 = point49.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        int int9 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean22 = point15.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean26 = point15.dominates(point25);
        int int27 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int31 = point30.getX();
        int int32 = point30.getX();
        int int33 = point30.getX();
        int int34 = point30.getY();
        boolean boolean35 = point25.dominates(point30);
        boolean boolean36 = point5.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int40 = point39.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean44 = point39.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        boolean boolean48 = point39.dominates(point47);
        int int49 = point47.getY();
        boolean boolean50 = point25.dominates(point47);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '#');
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm31.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm48.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point53 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList59, pointArray58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm61.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm50.produceFinalSkyLine(pointList59, pointList62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm48.produceFinalSkyLine(pointList63, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm31.produceSubSkyLines(pointList78);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.produceSubSkyLines(pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass82 = pointList81.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(pointArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        boolean boolean8 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point11.getX();
        int int17 = point11.getY();
        int int18 = point11.getX();
        int int19 = point11.getX();
        boolean boolean20 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int27 = point26.getY();
        int int28 = point26.getY();
        boolean boolean29 = point23.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point32.getX();
        int int38 = point32.getY();
        int int39 = point32.getX();
        int int40 = point32.getX();
        boolean boolean41 = point26.dominates(point32);
        boolean boolean42 = point11.dominates(point32);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) -1);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, 10);
        boolean boolean10 = point5.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int14 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        boolean boolean33 = point23.dominates(point31);
        boolean boolean34 = point17.dominates(point31);
        int int35 = point17.getY();
        int int36 = point17.getY();
        boolean boolean37 = point13.dominates(point17);
        boolean boolean38 = point9.dominates(point17);
        int int39 = point9.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm33.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point38 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList44, pointArray43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm35.produceFinalSkyLine(pointList44, pointList47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point52 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList58, pointArray57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm60.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm49.produceFinalSkyLine(pointList58, pointList61);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm33.produceFinalSkyLine(pointList48, pointList61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point68 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList74, pointArray73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm76.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm65.produceFinalSkyLine(pointList74, pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm64.produceSubSkyLines(pointList74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm80.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm80.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm80.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm33.produceFinalSkyLine(pointList74, pointList83);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm0.produceSubSkyLines(pointList84);
        java.lang.Class<?> wildcardClass86 = pointList85.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(pointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(pointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(pointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point24 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList30, pointArray29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm21.produceFinalSkyLine(pointList30, pointList33);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.produceSubSkyLines(pointList30);
        java.lang.Class<?> wildcardClass36 = pointList35.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(pointArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int7 = point6.getX();
        int int8 = point6.getX();
        int int9 = point6.getX();
        int int10 = point6.getY();
        int int11 = point6.getY();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getY();
        int int14 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int21 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        int int29 = point24.getX();
        boolean boolean30 = point20.dominates(point24);
        int int31 = point24.getX();
        boolean boolean32 = point17.dominates(point24);
        boolean boolean33 = point6.dominates(point24);
        int int34 = point6.getX();
        int int35 = point6.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        int int25 = point22.getY();
        boolean boolean26 = point5.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean30 = point22.dominates(point29);
        int int31 = point22.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) (byte) 10);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point11.getX();
        boolean boolean17 = point7.dominates(point11);
        int int18 = point7.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        boolean boolean34 = point24.dominates(point32);
        int int35 = point32.getX();
        int int36 = point32.getX();
        boolean boolean37 = point7.dominates(point32);
        int int38 = point7.getX();
        boolean boolean39 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int43 = point42.getX();
        int int44 = point42.getY();
        int int45 = point42.getX();
        boolean boolean46 = point7.dominates(point42);
        java.lang.Class<?> wildcardClass47 = point42.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) '#');
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getX();
        boolean boolean12 = point2.dominates(point8);
        java.lang.Class<?> wildcardClass13 = point8.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getX();
        int int8 = point2.getY();
        int int9 = point2.getY();
        int int10 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point2.dominates(point16);
        java.lang.Class<?> wildcardClass19 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) (short) 10);
        int int3 = point2.getX();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (short) 100);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int6 = point5.getY();
        boolean boolean7 = point2.dominates(point5);
        int int8 = point2.getY();
        java.lang.Class<?> wildcardClass9 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean83 = point79.dominates(point82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point79 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList85, pointArray84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm87.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm76.produceFinalSkyLine(pointList85, pointList88);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm48.produceFinalSkyLine(pointList75, pointList85);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm0.produceSubSkyLines(pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList99 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(pointArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
        org.junit.Assert.assertNotNull(pointList99);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int23 = point22.getX();
        int int24 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        int int33 = point30.getX();
        boolean boolean34 = point22.dominates(point30);
        boolean boolean35 = point16.dominates(point30);
        int int36 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point45.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        boolean boolean55 = point45.dominates(point53);
        int int56 = point53.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int60 = point59.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        int int68 = point63.getX();
        boolean boolean69 = point59.dominates(point63);
        boolean boolean70 = point53.dominates(point59);
        boolean boolean71 = point39.dominates(point53);
        int int72 = point53.getX();
        int int73 = point53.getY();
        int int74 = point53.getX();
        boolean boolean75 = point16.dominates(point53);
        int int76 = point16.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        int int22 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        boolean boolean38 = point28.dominates(point36);
        int int39 = point36.getX();
        int int40 = point36.getX();
        boolean boolean41 = point11.dominates(point36);
        boolean boolean42 = point7.dominates(point11);
        int int43 = point11.getY();
        boolean boolean44 = point2.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int48 = point47.getX();
        int int49 = point47.getY();
        int int50 = point47.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int54 = point53.getY();
        boolean boolean55 = point47.dominates(point53);
        boolean boolean56 = point11.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (byte) -1);
        int int60 = point59.getX();
        boolean boolean61 = point11.dominates(point59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean63 = point11.dominates(point62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm18.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm18.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm18.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm18.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm18.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm18.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = skylineAlgorithm18.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point42 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList48, pointArray47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm50.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm39.produceFinalSkyLine(pointList48, pointList51);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm18.produceSubSkyLines(pointList48);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm0.produceFinalSkyLine(pointList48, pointList54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.size()\" because \"right\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertNotNull(pointList38);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(pointArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList53);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        int int22 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        boolean boolean38 = point28.dominates(point36);
        int int39 = point36.getX();
        int int40 = point36.getX();
        boolean boolean41 = point11.dominates(point36);
        boolean boolean42 = point7.dominates(point11);
        int int43 = point11.getY();
        boolean boolean44 = point2.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int48 = point47.getX();
        int int49 = point47.getY();
        int int50 = point47.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int54 = point53.getY();
        boolean boolean55 = point47.dominates(point53);
        boolean boolean56 = point11.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (byte) -1);
        int int60 = point59.getX();
        boolean boolean61 = point11.dominates(point59);
        java.lang.Class<?> wildcardClass62 = point11.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 0);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList29);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm46.produceSubSkyLines(pointList56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm32.produceFinalSkyLine(pointList61, pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm0.produceSubSkyLines(pointList64);
        java.lang.Class<?> wildcardClass66 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) -1);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        boolean boolean23 = point6.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int27 = point26.getX();
        int int28 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point34.getY();
        int int37 = point34.getX();
        boolean boolean38 = point26.dominates(point34);
        boolean boolean39 = point20.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int43 = point42.getX();
        boolean boolean44 = point34.dominates(point42);
        boolean boolean45 = point2.dominates(point34);
        java.lang.Class<?> wildcardClass46 = point34.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm32.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point37 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList43, pointArray42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm34.produceFinalSkyLine(pointList43, pointList46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm32.produceFinalSkyLine(pointList47, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm63.produceSubSkyLines(pointList73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point82 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList88, pointArray87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm90.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm79.produceFinalSkyLine(pointList88, pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm63.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm32.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.produceSubSkyLines(pointList94);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass97 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(pointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(pointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 35);
        boolean boolean8 = point2.dominates(point7);
        java.lang.Class<?> wildcardClass9 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        int int8 = point6.getX();
        java.lang.Class<?> wildcardClass9 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm61.produceSubSkyLines(pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm31.produceFinalSkyLine(pointList60, pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.produceSubSkyLines(pointList77);
        java.lang.Class<?> wildcardClass79 = pointList78.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point40 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList46, pointArray45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm48.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm37.produceFinalSkyLine(pointList46, pointList49);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm37.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm37.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm37.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point57 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList63, pointArray62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm65.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm54.produceFinalSkyLine(pointList63, pointList66);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm54.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean77 = point73.dominates(point76);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point73 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList79, pointArray78);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm81.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm70.produceFinalSkyLine(pointList79, pointList82);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm54.produceSubSkyLines(pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm54.getPoints();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm0.produceFinalSkyLine(pointList53, pointList87);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(pointArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(pointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertNotNull(pointList69);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(pointArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
        org.junit.Assert.assertNotNull(pointList87);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm30.produceSubSkyLines(pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean83 = point79.dominates(point82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point79 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList85, pointArray84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm87.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm76.produceFinalSkyLine(pointList85, pointList88);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm48.produceFinalSkyLine(pointList75, pointList85);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm0.produceSubSkyLines(pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass99 = pointList98.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(pointArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) '4');
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        int int9 = point6.getX();
        int int10 = point6.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 0);
        boolean boolean12 = point6.dominates(point11);
        java.lang.Class<?> wildcardClass13 = point11.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point33.dominates(point46);
        boolean boolean55 = point19.dominates(point46);
        int int56 = point46.getY();
        int int57 = point46.getY();
        java.lang.Class<?> wildcardClass58 = point46.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getX();
        int int6 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        boolean boolean30 = point20.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        int int41 = point39.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        boolean boolean49 = point39.dominates(point47);
        boolean boolean50 = point33.dominates(point47);
        boolean boolean51 = point28.dominates(point47);
        boolean boolean52 = point2.dominates(point28);
        java.lang.Class<?> wildcardClass53 = point28.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        int int20 = point2.getX();
        int int21 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point33.dominates(point46);
        boolean boolean55 = point19.dominates(point46);
        int int56 = point46.getY();
        int int57 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int61 = point60.getX();
        int int62 = point60.getY();
        int int63 = point60.getY();
        boolean boolean64 = point46.dominates(point60);
        int int65 = point60.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        int int73 = point71.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean80 = point76.dominates(point79);
        boolean boolean81 = point71.dominates(point79);
        boolean boolean82 = point60.dominates(point79);
        int int83 = point60.getY();
        java.lang.Class<?> wildcardClass84 = point60.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int6 = point5.getX();
        int int7 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int11 = point10.getX();
        boolean boolean12 = point5.dominates(point10);
        boolean boolean13 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass14 = point5.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, (int) (byte) 10);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getX();
        java.lang.Class<?> wildcardClass9 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 0);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm31.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm48.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point53 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList59, pointArray58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm61.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm50.produceFinalSkyLine(pointList59, pointList62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm48.produceFinalSkyLine(pointList63, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm31.produceSubSkyLines(pointList78);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.produceSubSkyLines(pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass82 = pointList81.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(pointArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 10);
        int int3 = point2.getY();
        int int4 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        boolean boolean16 = point11.dominates(point15);
        java.lang.Class<?> wildcardClass17 = point15.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        int int9 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point18.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        boolean boolean28 = point18.dominates(point26);
        int int29 = point26.getX();
        int int30 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        int int38 = point36.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        boolean boolean46 = point36.dominates(point44);
        int int47 = point44.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int51 = point50.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        int int59 = point54.getX();
        boolean boolean60 = point50.dominates(point54);
        boolean boolean61 = point44.dominates(point50);
        int int62 = point50.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        int int70 = point68.getY();
        int int71 = point68.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean75 = point68.dominates(point74);
        boolean boolean76 = point50.dominates(point68);
        boolean boolean77 = point26.dominates(point68);
        int int78 = point68.getX();
        boolean boolean79 = point12.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        int int87 = point85.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point93 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean94 = point90.dominates(point93);
        boolean boolean95 = point85.dominates(point93);
        boolean boolean96 = point68.dominates(point93);
        boolean boolean97 = point5.dominates(point68);
        int int98 = point5.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        boolean boolean21 = point2.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int25 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean29 = point24.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        int int38 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean42 = point35.dominates(point41);
        boolean boolean43 = point24.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int47 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean51 = point46.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        int int59 = point57.getY();
        int int60 = point57.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean64 = point57.dominates(point63);
        boolean boolean65 = point46.dominates(point57);
        boolean boolean66 = point24.dominates(point46);
        boolean boolean67 = point2.dominates(point24);
        java.lang.Class<?> wildcardClass68 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, 0);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        int int15 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean19 = point12.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean23 = point12.dominates(point22);
        int int24 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point12.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int36 = point35.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point39.getX();
        boolean boolean45 = point35.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int49 = point48.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        int int57 = point52.getX();
        boolean boolean58 = point48.dominates(point52);
        int int59 = point52.getX();
        boolean boolean60 = point35.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int64 = point63.getX();
        int int65 = point63.getY();
        boolean boolean66 = point35.dominates(point63);
        boolean boolean67 = point12.dominates(point35);
        int int68 = point12.getY();
        boolean boolean69 = point5.dominates(point12);
        int int70 = point12.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        boolean boolean30 = point13.dominates(point19);
        int int31 = point19.getY();
        int int32 = point19.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        int int33 = point2.getX();
        int int34 = point2.getX();
        int int35 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 32);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int3 = point2.getY();
        int int4 = point2.getY();
        int int5 = point2.getX();
        java.lang.Class<?> wildcardClass6 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        boolean boolean33 = point16.dominates(point22);
        boolean boolean34 = point2.dominates(point16);
        java.lang.Class<?> wildcardClass35 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int9 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean13 = point8.dominates(point12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        int int22 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean26 = point19.dominates(point25);
        boolean boolean27 = point8.dominates(point19);
        boolean boolean28 = point2.dominates(point8);
        java.lang.Class<?> wildcardClass29 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm17.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point22 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList28, pointArray27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm19.produceFinalSkyLine(pointList28, pointList31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point36 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList42, pointArray41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm44.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm33.produceFinalSkyLine(pointList42, pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm17.produceFinalSkyLine(pointList32, pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm0.produceSubSkyLines(pointList47);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm0.produceSubSkyLines(pointList49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(pointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(pointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm31.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm33.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point38 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList44, pointArray43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm35.produceFinalSkyLine(pointList44, pointList47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point52 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList58, pointArray57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm60.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm49.produceFinalSkyLine(pointList58, pointList61);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm33.produceFinalSkyLine(pointList48, pointList61);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm31.produceSubSkyLines(pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm0.produceSubSkyLines(pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass69 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(pointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(pointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) -1);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        boolean boolean23 = point6.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int27 = point26.getX();
        int int28 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point34.getY();
        int int37 = point34.getX();
        boolean boolean38 = point26.dominates(point34);
        boolean boolean39 = point20.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int43 = point42.getX();
        boolean boolean44 = point34.dominates(point42);
        boolean boolean45 = point2.dominates(point34);
        int int46 = point2.getY();
        int int47 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, 32);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm33.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point38 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList44, pointArray43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm35.produceFinalSkyLine(pointList44, pointList47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point52 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList58, pointArray57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm60.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm49.produceFinalSkyLine(pointList58, pointList61);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm33.produceFinalSkyLine(pointList48, pointList61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point68 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList74, pointArray73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm76.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm65.produceFinalSkyLine(pointList74, pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm64.produceSubSkyLines(pointList74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm80.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm80.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm80.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm33.produceFinalSkyLine(pointList74, pointList83);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm0.produceSubSkyLines(pointList84);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass87 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(pointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(pointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(pointArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int7 = point6.getX();
        int int8 = point6.getX();
        int int9 = point6.getX();
        int int10 = point6.getY();
        int int11 = point6.getY();
        boolean boolean12 = point2.dominates(point6);
        java.lang.Class<?> wildcardClass13 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getX();
        int int6 = point2.getX();
        int int7 = point2.getY();
        java.lang.Class<?> wildcardClass8 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        boolean boolean30 = point13.dominates(point19);
        int int31 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        int int40 = point37.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean44 = point37.dominates(point43);
        boolean boolean45 = point19.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 10);
        boolean boolean49 = point37.dominates(point48);
        int int50 = point37.getY();
        int int51 = point37.getX();
        java.lang.Class<?> wildcardClass52 = point37.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm32.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point37 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList43, pointArray42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm34.produceFinalSkyLine(pointList43, pointList46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm32.produceFinalSkyLine(pointList47, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm63.produceSubSkyLines(pointList73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point82 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList88, pointArray87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm90.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm79.produceFinalSkyLine(pointList88, pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm63.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm32.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList99 = skylineAlgorithm0.produceSubSkyLines(pointList98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(pointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(pointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) (short) 0);
    }
}


package SkylineAlgorithm;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2001");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        boolean boolean24 = point7.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int28 = point27.getX();
        int int29 = point27.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        int int38 = point35.getX();
        boolean boolean39 = point27.dominates(point35);
        boolean boolean40 = point21.dominates(point35);
        boolean boolean41 = point2.dominates(point21);
        java.lang.Class<?> wildcardClass42 = point21.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2002");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int6 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean10 = point5.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        int int18 = point16.getY();
        int int19 = point16.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean23 = point16.dominates(point22);
        boolean boolean24 = point5.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int28 = point27.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean32 = point27.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean45 = point38.dominates(point44);
        boolean boolean46 = point27.dominates(point38);
        boolean boolean47 = point5.dominates(point27);
        int int48 = point27.getX();
        int int49 = point27.getY();
        int int50 = point27.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int54 = point53.getY();
        int int55 = point53.getY();
        boolean boolean56 = point27.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) (short) 1);
        int int60 = point59.getX();
        boolean boolean61 = point53.dominates(point59);
        boolean boolean62 = point2.dominates(point53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2003");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        int int7 = point5.getY();
        int int8 = point5.getY();
        int int9 = point5.getX();
        int int10 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int17 = point16.getX();
        int int18 = point16.getY();
        int int19 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int23 = point22.getY();
        boolean boolean24 = point16.dominates(point22);
        int int25 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point31.getY();
        int int34 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean38 = point31.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point44.getY();
        int int47 = point44.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean51 = point44.dominates(point50);
        boolean boolean52 = point31.dominates(point44);
        boolean boolean53 = point22.dominates(point44);
        int int54 = point22.getY();
        int int55 = point22.getX();
        boolean boolean56 = point13.dominates(point22);
        boolean boolean57 = point5.dominates(point13);
        int int58 = point5.getX();
        boolean boolean59 = point2.dominates(point5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getX();
        int int8 = point2.getY();
        int int9 = point2.getX();
        int int10 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int14 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int18 = point17.getY();
        boolean boolean19 = point13.dominates(point17);
        boolean boolean20 = point2.dominates(point17);
        int int21 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2005");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int23 = point22.getX();
        int int24 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        int int33 = point30.getX();
        boolean boolean34 = point22.dominates(point30);
        boolean boolean35 = point16.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int39 = point38.getX();
        boolean boolean40 = point30.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int47 = point46.getX();
        int int48 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean52 = point46.dominates(point51);
        boolean boolean53 = point43.dominates(point46);
        boolean boolean54 = point38.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean64 = point60.dominates(point63);
        int int65 = point63.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        boolean boolean73 = point63.dominates(point71);
        int int74 = point71.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int78 = point77.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean85 = point81.dominates(point84);
        int int86 = point81.getX();
        boolean boolean87 = point77.dominates(point81);
        boolean boolean88 = point71.dominates(point77);
        boolean boolean89 = point57.dominates(point71);
        int int90 = point71.getY();
        boolean boolean91 = point43.dominates(point71);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2006");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        int int8 = point2.getY();
        java.lang.Class<?> wildcardClass9 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm32.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point37 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList43, pointArray42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm34.produceFinalSkyLine(pointList43, pointList46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm32.produceFinalSkyLine(pointList47, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm63.produceSubSkyLines(pointList73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point82 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList88, pointArray87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm90.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm79.produceFinalSkyLine(pointList88, pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm63.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm32.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList99 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(pointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(pointArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
        org.junit.Assert.assertNotNull(pointList99);
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point37 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList43, pointArray42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm34.produceFinalSkyLine(pointList43, pointList46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm34.produceFinalSkyLine(pointList61, pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm0.produceSubSkyLines(pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm0.produceSubSkyLines(pointList78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(pointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2009");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int8 = point7.getX();
        boolean boolean9 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) 'a');
        boolean boolean13 = point7.dominates(point12);
        int int14 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int18 = point17.getX();
        int int19 = point17.getY();
        int int20 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int24 = point23.getY();
        boolean boolean25 = point17.dominates(point23);
        int int26 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (byte) -1);
        int int30 = point29.getX();
        boolean boolean31 = point23.dominates(point29);
        boolean boolean32 = point12.dominates(point29);
        int int33 = point29.getY();
        java.lang.Class<?> wildcardClass34 = point29.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2010");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        int int20 = point16.getX();
        int int21 = point16.getY();
        boolean boolean22 = point2.dominates(point16);
        int int23 = point16.getX();
        int int24 = point16.getY();
        java.lang.Class<?> wildcardClass25 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2011");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point6 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList12, pointArray11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm14.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm3.produceFinalSkyLine(pointList12, pointList15);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm2.produceSubSkyLines(pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm2.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm2.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point23 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList29, pointArray28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm20.produceFinalSkyLine(pointList29, pointList32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point37 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList43, pointArray42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm34.produceFinalSkyLine(pointList43, pointList46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point52 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList58, pointArray57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm60.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm49.produceFinalSkyLine(pointList58, pointList61);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm48.produceSubSkyLines(pointList58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm48.produceSubSkyLines(pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm20.produceFinalSkyLine(pointList43, pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm2.produceSubSkyLines(pointList79);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm81.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.produceFinalSkyLine(pointList80, pointList82);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(pointArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(pointArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(pointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(pointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2012");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 97);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int6 = point5.getY();
        boolean boolean7 = point2.dominates(point5);
        int int8 = point2.getY();
        int int9 = point2.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2013");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point33.dominates(point46);
        boolean boolean55 = point19.dominates(point46);
        int int56 = point46.getY();
        int int57 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int61 = point60.getY();
        int int62 = point60.getY();
        int int63 = point60.getY();
        boolean boolean64 = point46.dominates(point60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 35);
        int int68 = point67.getY();
        boolean boolean69 = point46.dominates(point67);
        int int70 = point67.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean8 = point2.dominates(point7);
        int int9 = point7.getX();
        int int10 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int14 = point13.getX();
        int int15 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        int int23 = point21.getY();
        int int24 = point21.getX();
        boolean boolean25 = point13.dominates(point21);
        int int26 = point21.getX();
        int int27 = point21.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        int int38 = point36.getY();
        int int39 = point36.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean43 = point36.dominates(point42);
        boolean boolean44 = point30.dominates(point42);
        int int45 = point42.getY();
        boolean boolean46 = point21.dominates(point42);
        boolean boolean47 = point7.dominates(point21);
        int int48 = point21.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2015");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) '4');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int6 = point5.getY();
        boolean boolean7 = point2.dominates(point5);
        int int8 = point5.getX();
        int int9 = point5.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2016");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        int int21 = point18.getY();
        int int22 = point18.getY();
        boolean boolean23 = point2.dominates(point18);
        int int24 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 32 + "'", int21 == 32);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 32 + "'", int22 == 32);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2017");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        int int14 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean18 = point11.dominates(point17);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) '4');
        boolean boolean22 = point17.dominates(point21);
        boolean boolean23 = point5.dominates(point17);
        boolean boolean24 = point2.dominates(point17);
        java.lang.Class<?> wildcardClass25 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2018");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point2.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int25 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean29 = point24.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        int int38 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean42 = point35.dominates(point41);
        boolean boolean43 = point24.dominates(point35);
        boolean boolean44 = point2.dominates(point24);
        int int45 = point24.getX();
        int int46 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 100);
        int int50 = point49.getX();
        int int51 = point49.getY();
        boolean boolean52 = point24.dominates(point49);
        java.lang.Class<?> wildcardClass53 = point49.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getY();
        java.lang.Class<?> wildcardClass6 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2020");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (byte) 100);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        int int8 = point7.getX();
        int int9 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean13 = point7.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        int int23 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean27 = point20.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean31 = point20.dominates(point30);
        int int32 = point20.getY();
        int int33 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int37 = point36.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int41 = point40.getX();
        int int42 = point40.getX();
        int int43 = point40.getX();
        int int44 = point40.getY();
        int int45 = point40.getY();
        boolean boolean46 = point36.dominates(point40);
        boolean boolean47 = point20.dominates(point36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        int int55 = point53.getY();
        int int56 = point53.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean60 = point53.dominates(point59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean64 = point53.dominates(point63);
        int int65 = point63.getY();
        boolean boolean66 = point36.dominates(point63);
        boolean boolean67 = point12.dominates(point63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int71 = point70.getX();
        boolean boolean72 = point12.dominates(point70);
        boolean boolean73 = point2.dominates(point70);
        java.lang.Class<?> wildcardClass74 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 32 + "'", int65 == 32);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2021");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        boolean boolean19 = point14.dominates(point18);
        boolean boolean20 = point2.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int24 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point27.getX();
        boolean boolean33 = point23.dominates(point27);
        int int34 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        int int42 = point40.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        boolean boolean50 = point40.dominates(point48);
        int int51 = point48.getX();
        int int52 = point48.getX();
        boolean boolean53 = point23.dominates(point48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean60 = point56.dominates(point59);
        int int61 = point59.getY();
        int int62 = point59.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean66 = point59.dominates(point65);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean73 = point69.dominates(point72);
        int int74 = point72.getY();
        int int75 = point72.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean79 = point72.dominates(point78);
        boolean boolean80 = point59.dominates(point72);
        boolean boolean81 = point23.dominates(point59);
        int int82 = point59.getX();
        boolean boolean83 = point2.dominates(point59);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2022");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        int int20 = point2.getY();
        int int21 = point2.getY();
        int int22 = point2.getX();
        int int23 = point2.getX();
        java.lang.Class<?> wildcardClass24 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point38 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList44, pointArray43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm35.produceFinalSkyLine(pointList44, pointList47);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm34.produceSubSkyLines(pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm0.produceSubSkyLines(pointList49);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point55 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList61, pointArray60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm63.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm52.produceFinalSkyLine(pointList61, pointList64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean73 = point69.dominates(point72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point69 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList75, pointArray74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm77.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm66.produceFinalSkyLine(pointList75, pointList78);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean87 = point83.dominates(point86);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray88 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point83 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList89, pointArray88);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm91 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm91.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm80.produceFinalSkyLine(pointList89, pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm52.produceFinalSkyLine(pointList79, pointList89);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.produceSubSkyLines(pointList94);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList99 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(pointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(pointArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(pointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(pointArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
        org.junit.Assert.assertNotNull(pointList99);
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2024");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) '4');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, 0);
        int int6 = point5.getY();
        boolean boolean7 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point2.dominates(point13);
        java.lang.Class<?> wildcardClass16 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2025");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int21 = point20.getX();
        boolean boolean22 = point5.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int26 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean30 = point25.dominates(point29);
        boolean boolean31 = point5.dominates(point25);
        java.lang.Class<?> wildcardClass32 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2026");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        int int20 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point26.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        boolean boolean36 = point26.dominates(point34);
        int int37 = point34.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int41 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point44.getX();
        boolean boolean50 = point40.dominates(point44);
        boolean boolean51 = point34.dominates(point40);
        int int52 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        int int61 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean65 = point58.dominates(point64);
        boolean boolean66 = point40.dominates(point58);
        boolean boolean67 = point16.dominates(point58);
        int int68 = point58.getX();
        boolean boolean69 = point2.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int73 = point72.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean77 = point72.dominates(point76);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        boolean boolean81 = point72.dominates(point80);
        boolean boolean82 = point2.dominates(point72);
        int int83 = point72.getY();
        int int84 = point72.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2027");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 35);
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2028");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point33.dominates(point46);
        boolean boolean55 = point19.dominates(point46);
        int int56 = point46.getY();
        int int57 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int61 = point60.getY();
        int int62 = point60.getY();
        int int63 = point60.getY();
        boolean boolean64 = point46.dominates(point60);
        int int65 = point60.getX();
        int int66 = point60.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2029");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        int int24 = point21.getY();
        int int25 = point21.getY();
        java.lang.Class<?> wildcardClass26 = point21.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2030");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int23 = point22.getX();
        int int24 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        int int33 = point30.getX();
        boolean boolean34 = point22.dominates(point30);
        boolean boolean35 = point16.dominates(point30);
        int int36 = point16.getX();
        int int37 = point16.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        int int45 = point43.getY();
        int int46 = point43.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean50 = point43.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int54 = point53.getY();
        boolean boolean55 = point49.dominates(point53);
        int int56 = point49.getX();
        int int57 = point49.getY();
        boolean boolean58 = point16.dominates(point49);
        java.lang.Class<?> wildcardClass59 = point49.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2031");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList29);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm34.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point39 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList45, pointArray44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm47.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm36.produceFinalSkyLine(pointList45, pointList48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point53 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList59, pointArray58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm61.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm50.produceFinalSkyLine(pointList59, pointList62);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm34.produceFinalSkyLine(pointList49, pointList62);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm0.produceSubSkyLines(pointList49);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean75 = point71.dominates(point74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point71 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList77, pointArray76);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm79.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm68.produceFinalSkyLine(pointList77, pointList80);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm68.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm68.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean91 = point87.dominates(point90);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray92 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point87 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList93, pointArray92);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm95 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm95.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm84.produceFinalSkyLine(pointList93, pointList96);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm68.produceSubSkyLines(pointList93);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList99 = skylineAlgorithm0.produceSubSkyLines(pointList98);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(pointArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(pointArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(pointArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(pointArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
        org.junit.Assert.assertNotNull(pointList99);
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2032");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point10.getX();
        boolean boolean16 = point6.dominates(point10);
        int int17 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        boolean boolean33 = point23.dominates(point31);
        int int34 = point31.getX();
        int int35 = point31.getX();
        boolean boolean36 = point6.dominates(point31);
        boolean boolean37 = point2.dominates(point6);
        int int38 = point6.getX();
        int int39 = point6.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2033");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getY();
        int int6 = point2.getY();
        int int7 = point2.getX();
        int int8 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2034");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point22 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList28, pointArray27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm19.produceFinalSkyLine(pointList28, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm19.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm19.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm19.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm19.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm19.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = skylineAlgorithm19.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point43 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList49, pointArray48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm51.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm40.produceFinalSkyLine(pointList49, pointList52);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = skylineAlgorithm39.produceSubSkyLines(pointList49);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm19.produceSubSkyLines(pointList49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean64 = point60.dominates(point63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point60 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList66, pointArray65);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm68.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = skylineAlgorithm57.produceFinalSkyLine(pointList66, pointList69);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = skylineAlgorithm56.produceSubSkyLines(pointList66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean79 = point75.dominates(point78);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point75 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList81, pointArray80);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm83.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm72.produceFinalSkyLine(pointList81, pointList84);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm56.produceSubSkyLines(pointList85);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm0.produceFinalSkyLine(pointList55, pointList86);
        java.lang.Class<?> wildcardClass88 = pointList55.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(pointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertNotNull(pointList38);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(pointArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertNotNull(pointList54);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(pointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(pointList69);
        org.junit.Assert.assertNotNull(pointList70);
        org.junit.Assert.assertNotNull(pointList71);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(pointArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
        org.junit.Assert.assertNotNull(pointList87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2035");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, 0);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        int int15 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean19 = point12.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean23 = point12.dominates(point22);
        int int24 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point12.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int36 = point35.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point39.getX();
        boolean boolean45 = point35.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int49 = point48.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        int int57 = point52.getX();
        boolean boolean58 = point48.dominates(point52);
        int int59 = point52.getX();
        boolean boolean60 = point35.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int64 = point63.getX();
        int int65 = point63.getY();
        boolean boolean66 = point35.dominates(point63);
        boolean boolean67 = point12.dominates(point35);
        int int68 = point12.getY();
        boolean boolean69 = point5.dominates(point12);
        java.lang.Class<?> wildcardClass70 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2036");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int31 = point30.getX();
        int int32 = point30.getY();
        boolean boolean33 = point2.dominates(point30);
        int int34 = point30.getX();
        int int35 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int42 = point41.getY();
        int int43 = point41.getY();
        int int44 = point41.getY();
        boolean boolean45 = point38.dominates(point41);
        boolean boolean46 = point30.dominates(point41);
        int int47 = point41.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test2037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2037");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        boolean boolean21 = point11.dominates(point19);
        int int22 = point19.getX();
        int int23 = point19.getX();
        int int24 = point19.getY();
        boolean boolean25 = point5.dominates(point19);
        boolean boolean26 = point2.dominates(point5);
        int int27 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
    }

    @Test
    public void test2038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2038");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, (int) (short) -1);
        int int3 = point2.getY();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) (short) 1);
        int int8 = point7.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 1);
        boolean boolean12 = point7.dominates(point11);
        int int13 = point11.getY();
        boolean boolean14 = point2.dominates(point11);
        int int15 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test2039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2039");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        boolean boolean25 = point5.dominates(point20);
        java.lang.Class<?> wildcardClass26 = point20.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test2040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2040");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, (int) 'a');
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
    }

    @Test
    public void test2041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2041");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int19 = point18.getY();
        boolean boolean20 = point5.dominates(point18);
        int int21 = point18.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test2042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2042");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 100);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int10 = point9.getX();
        int int11 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int15 = point14.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        int int23 = point18.getX();
        boolean boolean24 = point14.dominates(point18);
        int int25 = point14.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        boolean boolean41 = point31.dominates(point39);
        int int42 = point39.getX();
        int int43 = point39.getX();
        boolean boolean44 = point14.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point50.getY();
        int int53 = point50.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean57 = point50.dominates(point56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean64 = point60.dominates(point63);
        int int65 = point63.getY();
        int int66 = point63.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean70 = point63.dominates(point69);
        boolean boolean71 = point50.dominates(point63);
        boolean boolean72 = point14.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean76 = point50.dominates(point75);
        int int77 = point75.getY();
        boolean boolean78 = point9.dominates(point75);
        boolean boolean79 = point5.dominates(point9);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test2043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2043");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        int int28 = point2.getY();
        int int29 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) 0);
        int int33 = point32.getX();
        int int34 = point32.getY();
        boolean boolean35 = point2.dominates(point32);
        java.lang.Class<?> wildcardClass36 = point32.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test2044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2044");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point10.getX();
        boolean boolean16 = point6.dominates(point10);
        int int17 = point10.getX();
        boolean boolean18 = point2.dominates(point10);
        int int19 = point10.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        int int32 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean36 = point29.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean40 = point29.dominates(point39);
        int int41 = point39.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int45 = point44.getX();
        int int46 = point44.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int50 = point49.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        int int58 = point53.getX();
        boolean boolean59 = point49.dominates(point53);
        int int60 = point49.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        int int68 = point66.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean75 = point71.dominates(point74);
        boolean boolean76 = point66.dominates(point74);
        int int77 = point74.getX();
        int int78 = point74.getX();
        boolean boolean79 = point49.dominates(point74);
        int int80 = point49.getX();
        boolean boolean81 = point44.dominates(point49);
        boolean boolean82 = point39.dominates(point44);
        int int83 = point39.getX();
        boolean boolean84 = point22.dominates(point39);
        boolean boolean85 = point10.dominates(point39);
        java.lang.Class<?> wildcardClass86 = point10.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2045");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.produceSubSkyLines(pointList41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm31.produceSubSkyLines(pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm0.produceSubSkyLines(pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass68 = pointList67.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2046");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        int int15 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int19 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point22.getX();
        boolean boolean28 = point18.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int32 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point35.getX();
        boolean boolean41 = point31.dominates(point35);
        int int42 = point35.getX();
        boolean boolean43 = point18.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int47 = point46.getX();
        int int48 = point46.getY();
        boolean boolean49 = point18.dominates(point46);
        boolean boolean50 = point12.dominates(point46);
        boolean boolean51 = point6.dominates(point46);
        boolean boolean52 = point2.dominates(point6);
        int int53 = point6.getY();
        int int54 = point6.getY();
        int int55 = point6.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
    }

    @Test
    public void test2047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2047");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int18 = point17.getX();
        boolean boolean19 = point2.dominates(point17);
        int int20 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point26.getY();
        int int29 = point26.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean33 = point26.dominates(point32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean37 = point26.dominates(point36);
        int int38 = point26.getY();
        int int39 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int43 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int47 = point46.getX();
        int int48 = point46.getX();
        int int49 = point46.getX();
        int int50 = point46.getY();
        int int51 = point46.getY();
        boolean boolean52 = point42.dominates(point46);
        boolean boolean53 = point26.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (int) (short) -1);
        boolean boolean57 = point26.dominates(point56);
        boolean boolean58 = point2.dominates(point56);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2048");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point8.getX();
        boolean boolean14 = point5.dominates(point8);
        int int15 = point8.getX();
        int int16 = point8.getX();
        boolean boolean17 = point2.dominates(point8);
        int int18 = point8.getX();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test2049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2049");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        int int22 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        boolean boolean38 = point28.dominates(point36);
        int int39 = point36.getX();
        int int40 = point36.getX();
        boolean boolean41 = point11.dominates(point36);
        boolean boolean42 = point7.dominates(point11);
        int int43 = point11.getY();
        boolean boolean44 = point2.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int48 = point47.getX();
        int int49 = point47.getY();
        int int50 = point47.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int54 = point53.getY();
        boolean boolean55 = point47.dominates(point53);
        boolean boolean56 = point11.dominates(point53);
        int int57 = point11.getY();
        int int58 = point11.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test2050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2050");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point45.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        boolean boolean55 = point45.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        boolean boolean71 = point61.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point6, point13, point22, point38, point45, point61 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm0.produceSubSkyLines(pointList73);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass84 = pointList83.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test2051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2051");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) '#');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int7 = point6.getX();
        int int8 = point6.getX();
        boolean boolean9 = point2.dominates(point6);
        int int10 = point6.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test2052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2052");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean8 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point18.getY();
        int int21 = point18.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean25 = point18.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean29 = point18.dominates(point28);
        int int30 = point28.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int34 = point33.getX();
        int int35 = point33.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int39 = point38.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point42.getX();
        boolean boolean48 = point38.dominates(point42);
        int int49 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        int int57 = point55.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean64 = point60.dominates(point63);
        boolean boolean65 = point55.dominates(point63);
        int int66 = point63.getX();
        int int67 = point63.getX();
        boolean boolean68 = point38.dominates(point63);
        int int69 = point38.getX();
        boolean boolean70 = point33.dominates(point38);
        boolean boolean71 = point28.dominates(point33);
        int int72 = point28.getX();
        boolean boolean73 = point11.dominates(point28);
        int int74 = point28.getY();
        int int75 = point28.getY();
        boolean boolean76 = point2.dominates(point28);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 32 + "'", int74 == 32);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 32 + "'", int75 == 32);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test2053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2053");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, 97);
    }

    @Test
    public void test2054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2054");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        int int27 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean31 = point24.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean35 = point24.dominates(point34);
        boolean boolean36 = point5.dominates(point24);
        int int37 = point24.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test2055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2055");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int23 = point22.getX();
        int int24 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        int int33 = point30.getX();
        boolean boolean34 = point22.dominates(point30);
        boolean boolean35 = point16.dominates(point30);
        int int36 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point45.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        boolean boolean55 = point45.dominates(point53);
        int int56 = point53.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int60 = point59.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        int int68 = point63.getX();
        boolean boolean69 = point59.dominates(point63);
        boolean boolean70 = point53.dominates(point59);
        boolean boolean71 = point39.dominates(point53);
        int int72 = point53.getX();
        int int73 = point53.getY();
        int int74 = point53.getX();
        boolean boolean75 = point16.dominates(point53);
        int int76 = point16.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test2056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2056");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (byte) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean19 = point8.dominates(point18);
        boolean boolean20 = point2.dominates(point8);
        int int21 = point8.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test2057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2057");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        int int9 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) '4');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int16 = point15.getY();
        boolean boolean17 = point12.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int24 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point27.getX();
        boolean boolean33 = point23.dominates(point27);
        int int34 = point27.getX();
        boolean boolean35 = point20.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point27.dominates(point38);
        boolean boolean40 = point15.dominates(point27);
        boolean boolean41 = point5.dominates(point27);
        java.lang.Class<?> wildcardClass42 = point27.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test2058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2058");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 10);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2059");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) 100);
        int int3 = point2.getX();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2060");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) 100);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int7 = point6.getX();
        int int8 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int12 = point11.getX();
        boolean boolean13 = point6.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) 'a');
        boolean boolean17 = point11.dominates(point16);
        boolean boolean18 = point2.dominates(point16);
        int int19 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
    }

    @Test
    public void test2061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2061");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int19 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point22.getX();
        boolean boolean28 = point18.dominates(point22);
        int int29 = point22.getX();
        boolean boolean30 = point5.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        int int38 = point36.getY();
        int int39 = point36.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean43 = point36.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        int int51 = point49.getY();
        int int52 = point49.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean56 = point49.dominates(point55);
        boolean boolean57 = point36.dominates(point49);
        boolean boolean58 = point22.dominates(point49);
        int int59 = point49.getY();
        int int60 = point49.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int64 = point63.getX();
        int int65 = point63.getY();
        int int66 = point63.getY();
        boolean boolean67 = point49.dominates(point63);
        boolean boolean68 = point2.dominates(point63);
        int int69 = point63.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
    }

    @Test
    public void test2062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2062");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (short) 10);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 0);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int11 = point10.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        int int19 = point14.getX();
        boolean boolean20 = point10.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int24 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point27.getX();
        boolean boolean33 = point23.dominates(point27);
        int int34 = point27.getX();
        boolean boolean35 = point10.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point41.getY();
        int int44 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean48 = point41.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        int int56 = point54.getY();
        int int57 = point54.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean61 = point54.dominates(point60);
        boolean boolean62 = point41.dominates(point54);
        boolean boolean63 = point27.dominates(point54);
        int int64 = point54.getY();
        int int65 = point54.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int69 = point68.getX();
        int int70 = point68.getY();
        int int71 = point68.getY();
        boolean boolean72 = point54.dominates(point68);
        int int73 = point54.getX();
        boolean boolean74 = point6.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean78 = point6.dominates(point77);
        int int79 = point6.getY();
        boolean boolean80 = point2.dominates(point6);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test2063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2063");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        boolean boolean42 = point32.dominates(point40);
        boolean boolean43 = point26.dominates(point40);
        boolean boolean44 = point21.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) (short) 1);
        int int48 = point47.getX();
        int int49 = point47.getX();
        boolean boolean50 = point40.dominates(point47);
        int int51 = point40.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 97 + "'", int48 == 97);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test2064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2064");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point29.dominates(point37);
        int int40 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int44 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point47.getX();
        boolean boolean53 = point43.dominates(point47);
        boolean boolean54 = point37.dominates(point43);
        boolean boolean55 = point23.dominates(point37);
        boolean boolean56 = point16.dominates(point37);
        int int57 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int61 = point60.getX();
        int int62 = point60.getY();
        boolean boolean63 = point16.dominates(point60);
        int int64 = point16.getY();
        java.lang.Class<?> wildcardClass65 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2065");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        int int8 = point5.getY();
        boolean boolean9 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int16 = point15.getX();
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int21 = point20.getX();
        boolean boolean22 = point15.dominates(point20);
        boolean boolean23 = point12.dominates(point15);
        boolean boolean24 = point5.dominates(point15);
        int int25 = point15.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test2066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2066");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList39 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point44 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList50, pointArray49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm52.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = skylineAlgorithm41.produceFinalSkyLine(pointList50, pointList53);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm41.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm41.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm41.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm41.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm41.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point63 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList69, pointArray68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = skylineAlgorithm71.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm60.produceFinalSkyLine(pointList69, pointList72);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm0.produceFinalSkyLine(pointList59, pointList69);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertNotNull(pointList38);
        org.junit.Assert.assertNotNull(pointList39);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(pointArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertNotNull(pointList54);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(pointArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(pointList72);
        org.junit.Assert.assertNotNull(pointList73);
    }

    @Test
    public void test2067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2067");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        int int21 = point16.getY();
        int int22 = point16.getY();
        int int23 = point16.getY();
        int int24 = point16.getY();
        int int25 = point16.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test2068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2068");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getX();
        java.lang.Class<?> wildcardClass8 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2069");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 10);
        int int3 = point2.getY();
        int int4 = point2.getX();
        int int5 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
    }

    @Test
    public void test2070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2070");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
    }

    @Test
    public void test2071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2071");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) 1);
        int int3 = point2.getY();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2072");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        int int22 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        boolean boolean38 = point28.dominates(point36);
        int int39 = point36.getX();
        int int40 = point36.getX();
        boolean boolean41 = point11.dominates(point36);
        boolean boolean42 = point7.dominates(point11);
        int int43 = point11.getY();
        boolean boolean44 = point2.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int48 = point47.getX();
        int int49 = point47.getY();
        int int50 = point47.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int54 = point53.getY();
        boolean boolean55 = point47.dominates(point53);
        boolean boolean56 = point11.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (byte) -1);
        int int60 = point59.getX();
        boolean boolean61 = point11.dominates(point59);
        int int62 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        boolean boolean66 = point11.dominates(point65);
        java.lang.Class<?> wildcardClass67 = point11.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test2073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2073");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean23 = point16.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        boolean boolean27 = point16.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int31 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point34.getX();
        boolean boolean40 = point30.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int44 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point47.getX();
        boolean boolean53 = point43.dominates(point47);
        int int54 = point47.getX();
        boolean boolean55 = point30.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        int int64 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean68 = point61.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean75 = point71.dominates(point74);
        int int76 = point74.getY();
        int int77 = point74.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean81 = point74.dominates(point80);
        boolean boolean82 = point61.dominates(point74);
        boolean boolean83 = point47.dominates(point74);
        int int84 = point74.getY();
        int int85 = point74.getY();
        int int86 = point74.getX();
        boolean boolean87 = point26.dominates(point74);
        java.lang.Class<?> wildcardClass88 = point26.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2074");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point45.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        boolean boolean55 = point45.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        boolean boolean71 = point61.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point6, point13, point22, point38, point45, point61 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm0.produceSubSkyLines(pointList73);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass82 = pointList81.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2075");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        boolean boolean21 = point11.dominates(point19);
        int int22 = point19.getX();
        int int23 = point19.getX();
        int int24 = point19.getY();
        boolean boolean25 = point5.dominates(point19);
        boolean boolean26 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass27 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test2076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2076");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        int int4 = point2.getX();
        int int5 = point2.getX();
        int int6 = point2.getY();
        int int7 = point2.getY();
        java.lang.Class<?> wildcardClass8 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2077");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 100);
        int int8 = point7.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point14.getY();
        int int17 = point14.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean21 = point14.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean25 = point14.dominates(point24);
        int int26 = point14.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        boolean boolean34 = point14.dominates(point29);
        boolean boolean35 = point7.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) 100);
        boolean boolean39 = point29.dominates(point38);
        boolean boolean40 = point2.dominates(point38);
        int int41 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
    }

    @Test
    public void test2078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2078");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        boolean boolean23 = point6.dominates(point20);
        int int24 = point6.getY();
        int int25 = point6.getY();
        boolean boolean26 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        int int35 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean39 = point32.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean43 = point32.dominates(point42);
        int int44 = point42.getX();
        int int45 = point42.getY();
        int int46 = point42.getY();
        boolean boolean47 = point2.dominates(point42);
        int int48 = point2.getX();
        java.lang.Class<?> wildcardClass49 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 32 + "'", int45 == 32);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 32 + "'", int46 == 32);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test2079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2079");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean15 = point8.dominates(point14);
        boolean boolean16 = point2.dominates(point14);
        int int17 = point2.getY();
        int int18 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        int int27 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean31 = point24.dominates(point30);
        boolean boolean32 = point2.dominates(point24);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2080");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 1);
        boolean boolean17 = point2.dominates(point16);
        int int18 = point2.getY();
        int int19 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        int int28 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int32 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point35.getX();
        boolean boolean41 = point31.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int45 = point44.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point48.getX();
        boolean boolean54 = point44.dominates(point48);
        int int55 = point48.getX();
        boolean boolean56 = point31.dominates(point48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int60 = point59.getX();
        int int61 = point59.getY();
        boolean boolean62 = point31.dominates(point59);
        boolean boolean63 = point25.dominates(point59);
        int int64 = point59.getX();
        int int65 = point59.getY();
        boolean boolean66 = point2.dominates(point59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int70 = point69.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean74 = point69.dominates(point73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        boolean boolean78 = point69.dominates(point77);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean85 = point81.dominates(point84);
        int int86 = point84.getY();
        int int87 = point84.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean91 = point84.dominates(point90);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point94 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean95 = point84.dominates(point94);
        int int96 = point94.getX();
        boolean boolean97 = point69.dominates(point94);
        boolean boolean98 = point59.dominates(point69);
        int int99 = point59.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 52 + "'", int99 == 52);
    }

    @Test
    public void test2081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2081");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        boolean boolean24 = point7.dominates(point21);
        int int25 = point7.getY();
        int int26 = point7.getY();
        int int27 = point7.getY();
        boolean boolean28 = point2.dominates(point7);
        int int29 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
    }

    @Test
    public void test2082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2082");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point10.getX();
        boolean boolean16 = point6.dominates(point10);
        int int17 = point10.getX();
        boolean boolean18 = point2.dominates(point10);
        int int19 = point10.getY();
        int int20 = point10.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test2083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2083");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) '4');
        int int3 = point2.getY();
        int int4 = point2.getX();
        int int5 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
    }

    @Test
    public void test2084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2084");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) 100);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point11.getX();
        boolean boolean17 = point7.dominates(point11);
        int int18 = point7.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int22 = point21.getX();
        int int23 = point21.getX();
        int int24 = point21.getX();
        boolean boolean25 = point7.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, 1);
        int int29 = point28.getX();
        boolean boolean30 = point21.dominates(point28);
        int int31 = point21.getY();
        boolean boolean32 = point2.dominates(point21);
        int int33 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
    }

    @Test
    public void test2085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2085");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 35);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
    }

    @Test
    public void test2086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2086");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 32);
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test2087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2087");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) '#');
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2088");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) 0);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getY();
        int int6 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2089");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point2.dominates(point13);
        int int22 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test2090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2090");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, (int) (byte) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        int int7 = point5.getY();
        int int8 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int12 = point11.getY();
        boolean boolean13 = point5.dominates(point11);
        int int14 = point11.getX();
        int int15 = point11.getX();
        int int16 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        int int33 = point26.getX();
        boolean boolean34 = point19.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int41 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point44.getX();
        boolean boolean50 = point40.dominates(point44);
        int int51 = point44.getX();
        int int52 = point44.getY();
        int int53 = point44.getY();
        boolean boolean54 = point37.dominates(point44);
        boolean boolean55 = point19.dominates(point37);
        int int56 = point37.getX();
        boolean boolean57 = point11.dominates(point37);
        int int58 = point11.getX();
        boolean boolean59 = point2.dominates(point11);
        int int60 = point2.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test2091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2091");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (short) 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) (short) -1);
        int int7 = point6.getX();
        boolean boolean8 = point2.dominates(point6);
        java.lang.Class<?> wildcardClass9 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2092");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        boolean boolean30 = point13.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) '#');
        boolean boolean34 = point19.dominates(point33);
        java.lang.Class<?> wildcardClass35 = point33.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2093");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.produceSubSkyLines(pointList52);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point66 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList72, pointArray71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm74.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm63.produceFinalSkyLine(pointList72, pointList75);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean85 = point81.dominates(point84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point81 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList87, pointArray86);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm89.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm78.produceFinalSkyLine(pointList87, pointList90);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm77.produceSubSkyLines(pointList87);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm93 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm93.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm63.produceFinalSkyLine(pointList92, pointList94);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.produceSubSkyLines(pointList92);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass98 = pointList97.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(pointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(pointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2094");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) (short) -1);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2095");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) ' ');
        int int10 = point9.getX();
        boolean boolean11 = point5.dominates(point9);
        int int12 = point5.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test2096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2096");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean8 = point2.dominates(point7);
        int int9 = point7.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean22 = point15.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean26 = point15.dominates(point25);
        int int27 = point15.getY();
        int int28 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int32 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int36 = point35.getX();
        int int37 = point35.getX();
        int int38 = point35.getX();
        int int39 = point35.getY();
        int int40 = point35.getY();
        boolean boolean41 = point31.dominates(point35);
        boolean boolean42 = point15.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        int int50 = point48.getY();
        int int51 = point48.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean55 = point48.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean59 = point48.dominates(point58);
        int int60 = point58.getY();
        boolean boolean61 = point31.dominates(point58);
        boolean boolean62 = point7.dominates(point58);
        int int63 = point7.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 32 + "'", int60 == 32);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test2097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2097");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point11.getX();
        boolean boolean17 = point7.dominates(point11);
        int int18 = point11.getX();
        int int19 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int23 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean27 = point22.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean40 = point33.dominates(point39);
        boolean boolean41 = point22.dominates(point33);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int45 = point44.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean49 = point44.dominates(point48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        int int57 = point55.getY();
        int int58 = point55.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean62 = point55.dominates(point61);
        boolean boolean63 = point44.dominates(point55);
        boolean boolean64 = point22.dominates(point44);
        boolean boolean65 = point11.dominates(point44);
        boolean boolean66 = point2.dominates(point11);
        int int67 = point2.getX();
        java.lang.Class<?> wildcardClass68 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2098");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point11.getX();
        boolean boolean17 = point7.dominates(point11);
        int int18 = point7.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        boolean boolean34 = point24.dominates(point32);
        int int35 = point32.getX();
        int int36 = point32.getX();
        boolean boolean37 = point7.dominates(point32);
        int int38 = point7.getX();
        boolean boolean39 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int43 = point42.getX();
        int int44 = point42.getY();
        int int45 = point42.getX();
        boolean boolean46 = point7.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int50 = point49.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        int int58 = point53.getX();
        boolean boolean59 = point49.dominates(point53);
        int int60 = point53.getX();
        int int61 = point53.getY();
        int int62 = point53.getY();
        int int63 = point53.getY();
        boolean boolean64 = point7.dominates(point53);
        int int65 = point53.getY();
        int int66 = point53.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test2099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2099");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        int int20 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point26.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        boolean boolean36 = point26.dominates(point34);
        int int37 = point34.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int41 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point44.getX();
        boolean boolean50 = point40.dominates(point44);
        boolean boolean51 = point34.dominates(point40);
        int int52 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        int int61 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean65 = point58.dominates(point64);
        boolean boolean66 = point40.dominates(point58);
        boolean boolean67 = point16.dominates(point58);
        int int68 = point58.getX();
        boolean boolean69 = point2.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int73 = point72.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean77 = point72.dominates(point76);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        boolean boolean81 = point72.dominates(point80);
        boolean boolean82 = point2.dominates(point72);
        int int83 = point72.getX();
        java.lang.Class<?> wildcardClass84 = point72.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test2100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2100");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) '4');
        int int6 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int10 = point9.getY();
        boolean boolean11 = point5.dominates(point9);
        boolean boolean12 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (-1));
        boolean boolean16 = point2.dominates(point15);
        int int17 = point15.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test2101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2101");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (byte) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean19 = point8.dominates(point18);
        boolean boolean20 = point2.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 97);
        int int24 = point23.getX();
        boolean boolean25 = point8.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        boolean boolean41 = point31.dominates(point39);
        int int42 = point39.getY();
        int int43 = point39.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int47 = point46.getX();
        int int48 = point46.getX();
        int int49 = point46.getX();
        int int50 = point46.getX();
        int int51 = point46.getY();
        boolean boolean52 = point39.dominates(point46);
        boolean boolean53 = point8.dominates(point39);
        java.lang.Class<?> wildcardClass54 = point8.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test2102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2102");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int6 = point5.getY();
        boolean boolean7 = point2.dominates(point5);
        int int8 = point5.getY();
        int int9 = point5.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test2103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2103");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, 100);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test2104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2104");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point14.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        boolean boolean24 = point14.dominates(point22);
        int int25 = point22.getY();
        int int26 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int30 = point29.getX();
        int int31 = point29.getX();
        int int32 = point29.getX();
        int int33 = point29.getX();
        int int34 = point29.getY();
        boolean boolean35 = point22.dominates(point29);
        boolean boolean36 = point2.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point42.getY();
        boolean boolean45 = point2.dominates(point42);
        java.lang.Class<?> wildcardClass46 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 97 + "'", int44 == 97);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test2105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2105");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) 'a');
        int int3 = point2.getY();
        int int4 = point2.getY();
        int int5 = point2.getY();
        int int6 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
    }

    @Test
    public void test2106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2106");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList2 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList3 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point7 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList13, pointArray12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm15.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm4.produceFinalSkyLine(pointList13, pointList16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm4.produceFinalSkyLine(pointList31, pointList41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm4.produceSubSkyLines(pointList56);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm0.produceSubSkyLines(pointList61);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm0.produceSubSkyLines(pointList65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(pointList2);
        org.junit.Assert.assertNotNull(pointList3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(pointArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
    }

    @Test
    public void test2107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2107");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        int int20 = point2.getY();
        int int21 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int25 = point24.getY();
        int int26 = point24.getY();
        boolean boolean27 = point2.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, (int) '#');
        boolean boolean31 = point24.dominates(point30);
        java.lang.Class<?> wildcardClass32 = point24.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test2108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2108");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point14.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        boolean boolean24 = point14.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int28 = point27.getY();
        boolean boolean29 = point14.dominates(point27);
        int int30 = point27.getX();
        boolean boolean31 = point5.dominates(point27);
        int int32 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 0);
        int int36 = point35.getX();
        boolean boolean37 = point5.dominates(point35);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test2109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2109");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point32 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList38, pointArray37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm40.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm29.produceFinalSkyLine(pointList38, pointList41);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm28.produceSubSkyLines(pointList38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point47 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList53, pointArray52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm55.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm44.produceFinalSkyLine(pointList53, pointList56);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm28.produceSubSkyLines(pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.produceFinalSkyLine(pointList23, pointList57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point63 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList69, pointArray68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = skylineAlgorithm71.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm60.produceFinalSkyLine(pointList69, pointList72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm0.produceSubSkyLines(pointList73);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(pointArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(pointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(pointArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(pointList72);
        org.junit.Assert.assertNotNull(pointList73);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
    }

    @Test
    public void test2110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2110");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int22 = point21.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int26 = point25.getX();
        int int27 = point25.getX();
        int int28 = point25.getX();
        int int29 = point25.getY();
        int int30 = point25.getY();
        boolean boolean31 = point21.dominates(point25);
        boolean boolean32 = point5.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (int) (short) -1);
        boolean boolean36 = point5.dominates(point35);
        java.lang.Class<?> wildcardClass37 = point35.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test2111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2111");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 97);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int6 = point5.getY();
        boolean boolean7 = point2.dominates(point5);
        int int8 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 52);
        int int12 = point11.getX();
        int int13 = point11.getX();
        boolean boolean14 = point2.dominates(point11);
        java.lang.Class<?> wildcardClass15 = point11.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2112");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point22 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList28, pointArray27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm19.produceFinalSkyLine(pointList28, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm19.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm19.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm19.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm19.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm19.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = skylineAlgorithm19.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point43 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList49, pointArray48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm51.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm40.produceFinalSkyLine(pointList49, pointList52);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = skylineAlgorithm39.produceSubSkyLines(pointList49);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm19.produceSubSkyLines(pointList49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean64 = point60.dominates(point63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point60 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList66, pointArray65);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm68.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = skylineAlgorithm57.produceFinalSkyLine(pointList66, pointList69);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = skylineAlgorithm56.produceSubSkyLines(pointList66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean79 = point75.dominates(point78);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point75 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList81, pointArray80);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm83.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm72.produceFinalSkyLine(pointList81, pointList84);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm56.produceSubSkyLines(pointList85);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm0.produceFinalSkyLine(pointList55, pointList86);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass91 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(pointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertNotNull(pointList38);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(pointArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertNotNull(pointList54);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(pointArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(pointList69);
        org.junit.Assert.assertNotNull(pointList70);
        org.junit.Assert.assertNotNull(pointList71);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(pointArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
        org.junit.Assert.assertNotNull(pointList87);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2113");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.produceSubSkyLines(pointList52);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = null;
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point66 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList72, pointArray71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm74.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm63.produceFinalSkyLine(pointList72, pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm62.produceSubSkyLines(pointList72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm62.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm62.getPoints();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.produceFinalSkyLine(pointList61, pointList82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.size()\" because \"left\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(pointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
    }

    @Test
    public void test2114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2114");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList29);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass37 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test2115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2115");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        boolean boolean21 = point11.dominates(point19);
        int int22 = point19.getX();
        int int23 = point19.getX();
        int int24 = point19.getY();
        boolean boolean25 = point5.dominates(point19);
        boolean boolean26 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass27 = point5.getClass();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test2116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2116");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int9 = point8.getY();
        boolean boolean10 = point2.dominates(point8);
        int int11 = point2.getY();
        int int12 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test2117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2117");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (short) -1);
    }

    @Test
    public void test2118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2118");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int12 = point11.getX();
        int int13 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean17 = point11.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        int int28 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean32 = point25.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int36 = point35.getY();
        boolean boolean37 = point31.dominates(point35);
        int int38 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int42 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        int int50 = point48.getY();
        int int51 = point48.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean55 = point48.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean59 = point48.dominates(point58);
        int int60 = point58.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int64 = point63.getX();
        int int65 = point63.getX();
        int int66 = point63.getX();
        int int67 = point63.getY();
        boolean boolean68 = point58.dominates(point63);
        int int69 = point63.getY();
        boolean boolean70 = point41.dominates(point63);
        int int71 = point63.getY();
        boolean boolean72 = point35.dominates(point63);
        boolean boolean73 = point8.dominates(point35);
        int int74 = point35.getY();
        boolean boolean75 = point5.dominates(point35);
        boolean boolean76 = point2.dominates(point35);
        java.lang.Class<?> wildcardClass77 = point35.getClass();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 97 + "'", int74 == 97);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2119");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean19 = point8.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        int int28 = point25.getY();
        boolean boolean29 = point8.dominates(point25);
        boolean boolean30 = point2.dominates(point25);
        int int31 = point25.getY();
        java.lang.Class<?> wildcardClass32 = point25.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test2120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2120");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int23 = point22.getX();
        int int24 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        int int33 = point30.getX();
        boolean boolean34 = point22.dominates(point30);
        boolean boolean35 = point16.dominates(point30);
        int int36 = point16.getX();
        java.lang.Class<?> wildcardClass37 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test2121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2121");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        boolean boolean25 = point5.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int29 = point28.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point32.getX();
        boolean boolean38 = point28.dominates(point32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int42 = point41.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        int int50 = point45.getX();
        boolean boolean51 = point41.dominates(point45);
        int int52 = point45.getX();
        boolean boolean53 = point28.dominates(point45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int57 = point56.getX();
        int int58 = point56.getY();
        boolean boolean59 = point28.dominates(point56);
        boolean boolean60 = point5.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (int) 'a');
        boolean boolean64 = point5.dominates(point63);
        int int65 = point5.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
    }

    @Test
    public void test2122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2122");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) (byte) 1);
        int int3 = point2.getX();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2123");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) '4');
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        int int9 = point6.getX();
        int int10 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 97);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int17 = point16.getY();
        boolean boolean18 = point13.dominates(point16);
        boolean boolean19 = point6.dominates(point13);
        int int20 = point6.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test2124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2124");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getX();
        int int14 = point6.getY();
        int int15 = point6.getY();
        int int16 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (short) 100);
        int int20 = point19.getX();
        boolean boolean21 = point6.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        java.lang.Class<?> wildcardClass30 = point19.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test2125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2125");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) 10);
        int int3 = point2.getY();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2126");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getX();
        int int6 = point2.getY();
        int int7 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) '4');
        int int11 = point10.getX();
        boolean boolean12 = point2.dominates(point10);
        int int13 = point2.getX();
        int int14 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
    }

    @Test
    public void test2127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2127");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean16 = point5.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int20 = point19.getX();
        int int21 = point19.getY();
        int int22 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int26 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean30 = point25.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        int int38 = point36.getY();
        int int39 = point36.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean43 = point36.dominates(point42);
        boolean boolean44 = point25.dominates(point36);
        boolean boolean45 = point19.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        int int56 = point54.getY();
        int int57 = point54.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean61 = point54.dominates(point60);
        boolean boolean62 = point48.dominates(point60);
        boolean boolean63 = point25.dominates(point48);
        boolean boolean64 = point5.dominates(point25);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test2128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2128");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, (int) (byte) 0);
        boolean boolean16 = point6.dominates(point15);
        int int17 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int21 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        int int33 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int37 = point36.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        int int45 = point40.getX();
        boolean boolean46 = point36.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int50 = point49.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        int int58 = point53.getX();
        boolean boolean59 = point49.dominates(point53);
        int int60 = point53.getX();
        boolean boolean61 = point36.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int65 = point64.getX();
        int int66 = point64.getY();
        boolean boolean67 = point36.dominates(point64);
        boolean boolean68 = point30.dominates(point64);
        boolean boolean69 = point24.dominates(point64);
        boolean boolean70 = point20.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean77 = point73.dominates(point76);
        int int78 = point76.getY();
        int int79 = point76.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean83 = point76.dominates(point82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int87 = point86.getY();
        boolean boolean88 = point82.dominates(point86);
        boolean boolean89 = point20.dominates(point82);
        boolean boolean90 = point15.dominates(point82);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2129");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) -1);
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test2130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2130");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) 'a');
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int10 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        int int18 = point16.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        boolean boolean26 = point16.dominates(point24);
        int int27 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int31 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point34.getX();
        boolean boolean40 = point30.dominates(point34);
        int int41 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point47.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        boolean boolean57 = point47.dominates(point55);
        int int58 = point55.getX();
        int int59 = point55.getX();
        boolean boolean60 = point30.dominates(point55);
        int int61 = point55.getY();
        boolean boolean62 = point16.dominates(point55);
        boolean boolean63 = point9.dominates(point55);
        int int64 = point55.getX();
        int int65 = point55.getX();
        boolean boolean66 = point2.dominates(point55);
        int int67 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test2131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2131");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        int int7 = point5.getY();
        int int8 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int12 = point11.getY();
        boolean boolean13 = point5.dominates(point11);
        int int14 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        int int23 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean27 = point20.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean40 = point33.dominates(point39);
        boolean boolean41 = point20.dominates(point33);
        boolean boolean42 = point11.dominates(point33);
        int int43 = point11.getY();
        int int44 = point11.getX();
        boolean boolean45 = point2.dominates(point11);
        int int46 = point11.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test2132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2132");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 10);
        int int3 = point2.getX();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 97);
        int int8 = point7.getX();
        boolean boolean9 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 32);
        boolean boolean13 = point2.dominates(point12);
        java.lang.Class<?> wildcardClass14 = point12.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test2133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2133");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 97);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
    }

    @Test
    public void test2134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2134");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point37 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList43, pointArray42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm34.produceFinalSkyLine(pointList43, pointList46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm34.produceFinalSkyLine(pointList61, pointList71);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm0.produceSubSkyLines(pointList76);
        java.lang.Class<?> wildcardClass78 = pointList76.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(pointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test2135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2135");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean7 = point2.dominates(point6);
        int int8 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int12 = point11.getX();
        int int13 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        int int22 = point19.getX();
        boolean boolean23 = point11.dominates(point19);
        int int24 = point19.getX();
        int int25 = point19.getY();
        boolean boolean26 = point2.dominates(point19);
        int int27 = point19.getY();
        java.lang.Class<?> wildcardClass28 = point19.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test2136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2136");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        int int8 = point5.getY();
        boolean boolean9 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int16 = point15.getX();
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int21 = point20.getX();
        boolean boolean22 = point15.dominates(point20);
        boolean boolean23 = point12.dominates(point15);
        boolean boolean24 = point5.dominates(point15);
        java.lang.Class<?> wildcardClass25 = point5.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2137");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        boolean boolean33 = point16.dominates(point22);
        int int34 = point16.getX();
        int int35 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int39 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean43 = point38.dominates(point42);
        boolean boolean44 = point16.dominates(point38);
        boolean boolean45 = point2.dominates(point16);
        int int46 = point2.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test2138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2138");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int9 = point8.getX();
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean14 = point8.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        int int25 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean29 = point22.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int33 = point32.getY();
        boolean boolean34 = point28.dominates(point32);
        int int35 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int39 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point45.getY();
        int int48 = point45.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean52 = point45.dominates(point51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean56 = point45.dominates(point55);
        int int57 = point55.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int61 = point60.getX();
        int int62 = point60.getX();
        int int63 = point60.getX();
        int int64 = point60.getY();
        boolean boolean65 = point55.dominates(point60);
        int int66 = point60.getY();
        boolean boolean67 = point38.dominates(point60);
        int int68 = point60.getY();
        boolean boolean69 = point32.dominates(point60);
        boolean boolean70 = point5.dominates(point32);
        int int71 = point32.getY();
        boolean boolean72 = point2.dominates(point32);
        int int73 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) '4');
        boolean boolean77 = point32.dominates(point76);
        int int78 = point32.getY();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 97 + "'", int71 == 97);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 97 + "'", int73 == 97);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 97 + "'", int78 == 97);
    }

    @Test
    public void test2139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2139");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getX();
        int int8 = point2.getY();
        int int9 = point2.getX();
        int int10 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int14 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point17.getX();
        boolean boolean23 = point13.dominates(point17);
        int int24 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        int int33 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean37 = point30.dominates(point36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean41 = point30.dominates(point40);
        int int42 = point30.getY();
        int int43 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        int int51 = point49.getY();
        int int52 = point49.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean56 = point49.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean60 = point49.dominates(point59);
        boolean boolean61 = point30.dominates(point49);
        boolean boolean62 = point13.dominates(point49);
        boolean boolean63 = point2.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, 97);
        int int67 = point66.getY();
        int int68 = point66.getX();
        int int69 = point66.getY();
        boolean boolean70 = point13.dominates(point66);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test2140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2140");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getX();
        int int14 = point6.getY();
        int int15 = point6.getY();
        int int16 = point6.getY();
        int int17 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) '4');
        boolean boolean21 = point6.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 100);
        int int25 = point24.getX();
        boolean boolean26 = point6.dominates(point24);
        java.lang.Class<?> wildcardClass27 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test2141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2141");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (-1));
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
    }

    @Test
    public void test2142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2142");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) '#');
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2143");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test2144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2144");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        int int6 = point2.getX();
        int int7 = point2.getY();
        int int8 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test2145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2145");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int6 = point5.getX();
        int int7 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int11 = point10.getX();
        boolean boolean12 = point5.dominates(point10);
        boolean boolean13 = point2.dominates(point5);
        int int14 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int18 = point17.getX();
        int int19 = point17.getX();
        int int20 = point17.getY();
        int int21 = point17.getY();
        int int22 = point17.getX();
        int int23 = point17.getY();
        int int24 = point17.getX();
        boolean boolean25 = point5.dominates(point17);
        int int26 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 0);
        boolean boolean30 = point17.dominates(point29);
        java.lang.Class<?> wildcardClass31 = point17.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2146");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int9 = point8.getY();
        boolean boolean10 = point2.dominates(point8);
        int int11 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        int int19 = point17.getY();
        int int20 = point17.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean24 = point17.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        int int33 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean37 = point30.dominates(point36);
        boolean boolean38 = point17.dominates(point30);
        boolean boolean39 = point8.dominates(point30);
        int int40 = point8.getY();
        int int41 = point8.getX();
        java.lang.Class<?> wildcardClass42 = point8.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test2147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2147");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        boolean boolean30 = point13.dominates(point19);
        int int31 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        int int40 = point37.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean44 = point37.dominates(point43);
        boolean boolean45 = point19.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 10);
        boolean boolean49 = point37.dominates(point48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (int) (short) -1);
        int int53 = point52.getX();
        int int54 = point52.getX();
        boolean boolean55 = point37.dominates(point52);
        int int56 = point52.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test2148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2148");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int24 = point23.getX();
        int int25 = point23.getX();
        int int26 = point23.getX();
        int int27 = point23.getY();
        boolean boolean28 = point18.dominates(point23);
        boolean boolean29 = point2.dominates(point23);
        int int30 = point23.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
    }

    @Test
    public void test2149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2149");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int7 = point6.getX();
        int int8 = point6.getX();
        int int9 = point6.getX();
        int int10 = point6.getY();
        int int11 = point6.getY();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getY();
        int int14 = point6.getY();
        int int15 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, 35);
        boolean boolean19 = point6.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        int int33 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        int int41 = point39.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        boolean boolean49 = point39.dominates(point47);
        int int50 = point47.getX();
        int int51 = point47.getX();
        boolean boolean52 = point22.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        int int61 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean65 = point58.dominates(point64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        int int73 = point71.getY();
        int int74 = point71.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean78 = point71.dominates(point77);
        boolean boolean79 = point58.dominates(point71);
        boolean boolean80 = point22.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean84 = point58.dominates(point83);
        int int85 = point58.getX();
        boolean boolean86 = point6.dominates(point58);
        int int87 = point58.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
    }

    @Test
    public void test2150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2150");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point36 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList42, pointArray41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm44.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm33.produceFinalSkyLine(pointList42, pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm33.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm50.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point55 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList61, pointArray60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm63.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm52.produceFinalSkyLine(pointList61, pointList64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean73 = point69.dominates(point72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point69 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList75, pointArray74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm77.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm66.produceFinalSkyLine(pointList75, pointList78);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm50.produceFinalSkyLine(pointList65, pointList78);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm33.produceSubSkyLines(pointList80);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.produceSubSkyLines(pointList81);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass84 = pointList83.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(pointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(pointArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(pointArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test2151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2151");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int21 = point20.getX();
        int int22 = point20.getX();
        int int23 = point20.getX();
        int int24 = point20.getY();
        boolean boolean25 = point15.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int29 = point28.getX();
        int int30 = point28.getX();
        boolean boolean31 = point20.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point20.dominates(point37);
        int int40 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point20.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) -1);
        boolean boolean58 = point52.dominates(point57);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2152");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getX();
        int int14 = point6.getY();
        int int15 = point6.getY();
        int int16 = point6.getY();
        int int17 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) '4');
        boolean boolean21 = point6.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 10);
        int int25 = point24.getX();
        int int26 = point24.getY();
        boolean boolean27 = point20.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) '#');
        boolean boolean31 = point20.dominates(point30);
        int int32 = point30.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
    }

    @Test
    public void test2153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2153");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int16 = point15.getX();
        boolean boolean17 = point11.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (short) 100);
        boolean boolean21 = point11.dominates(point20);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2154");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point2.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int25 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int29 = point28.getY();
        boolean boolean30 = point24.dominates(point28);
        int int31 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int35 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        boolean boolean51 = point41.dominates(point49);
        int int52 = point49.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int56 = point55.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean63 = point59.dominates(point62);
        int int64 = point59.getX();
        boolean boolean65 = point55.dominates(point59);
        boolean boolean66 = point49.dominates(point55);
        int int67 = point55.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean74 = point70.dominates(point73);
        int int75 = point73.getY();
        int int76 = point73.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean80 = point73.dominates(point79);
        boolean boolean81 = point55.dominates(point73);
        int int82 = point55.getX();
        boolean boolean83 = point34.dominates(point55);
        boolean boolean84 = point24.dominates(point34);
        int int85 = point24.getX();
        boolean boolean86 = point13.dominates(point24);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test2155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2155");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        boolean boolean21 = point2.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int25 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean29 = point24.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        int int38 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean42 = point35.dominates(point41);
        boolean boolean43 = point24.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int47 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean51 = point46.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        int int59 = point57.getY();
        int int60 = point57.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean64 = point57.dominates(point63);
        boolean boolean65 = point46.dominates(point57);
        boolean boolean66 = point24.dominates(point46);
        boolean boolean67 = point2.dominates(point24);
        int int68 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 100);
        int int72 = point71.getY();
        int int73 = point71.getY();
        boolean boolean74 = point24.dominates(point71);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test2156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2156");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        int int20 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point26.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        boolean boolean36 = point26.dominates(point34);
        int int37 = point34.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int41 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point44.getX();
        boolean boolean50 = point40.dominates(point44);
        boolean boolean51 = point34.dominates(point40);
        int int52 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        int int61 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean65 = point58.dominates(point64);
        boolean boolean66 = point40.dominates(point58);
        boolean boolean67 = point16.dominates(point58);
        boolean boolean68 = point2.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = point58.dominates(point69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test2157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2157");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        boolean boolean25 = point5.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int29 = point28.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point32.getX();
        boolean boolean38 = point28.dominates(point32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int42 = point41.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        int int50 = point45.getX();
        boolean boolean51 = point41.dominates(point45);
        int int52 = point45.getX();
        boolean boolean53 = point28.dominates(point45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int57 = point56.getX();
        int int58 = point56.getY();
        boolean boolean59 = point28.dominates(point56);
        boolean boolean60 = point5.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (int) 'a');
        boolean boolean64 = point5.dominates(point63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (short) 1);
        int int68 = point67.getX();
        boolean boolean69 = point63.dominates(point67);
        java.lang.Class<?> wildcardClass70 = point63.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 97 + "'", int68 == 97);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2158");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int12 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean19 = point15.dominates(point18);
        int int20 = point15.getX();
        boolean boolean21 = point11.dominates(point15);
        int int22 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        boolean boolean38 = point28.dominates(point36);
        int int39 = point36.getX();
        int int40 = point36.getX();
        boolean boolean41 = point11.dominates(point36);
        boolean boolean42 = point7.dominates(point11);
        int int43 = point11.getY();
        boolean boolean44 = point2.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point50.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        boolean boolean60 = point50.dominates(point58);
        int int61 = point50.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int65 = point64.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        int int73 = point68.getX();
        boolean boolean74 = point64.dominates(point68);
        int int75 = point64.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean82 = point78.dominates(point81);
        int int83 = point81.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean90 = point86.dominates(point89);
        boolean boolean91 = point81.dominates(point89);
        int int92 = point89.getX();
        int int93 = point89.getX();
        boolean boolean94 = point64.dominates(point89);
        int int95 = point89.getY();
        boolean boolean96 = point50.dominates(point89);
        boolean boolean97 = point11.dominates(point50);
        int int98 = point50.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 52 + "'", int75 == 52);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test2159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2159");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point5.getX();
        int int11 = point5.getY();
        int int12 = point5.getX();
        int int13 = point5.getX();
        int int14 = point5.getX();
        boolean boolean15 = point2.dominates(point5);
        int int16 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        boolean boolean40 = point30.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        int int51 = point49.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        boolean boolean59 = point49.dominates(point57);
        boolean boolean60 = point43.dominates(point57);
        boolean boolean61 = point38.dominates(point57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean68 = point64.dominates(point67);
        boolean boolean69 = point38.dominates(point64);
        int int70 = point38.getX();
        boolean boolean71 = point2.dominates(point38);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test2160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2160");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) (short) 100);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test2161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2161");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) '4');
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        int int9 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int13 = point12.getX();
        boolean boolean14 = point6.dominates(point12);
        int int15 = point6.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test2162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2162");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getY();
        int int17 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        int int26 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean30 = point23.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean34 = point23.dominates(point33);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 52);
        boolean boolean38 = point33.dominates(point37);
        boolean boolean39 = point13.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int43 = point42.getX();
        int int44 = point42.getX();
        boolean boolean45 = point13.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int49 = point48.getY();
        int int50 = point48.getY();
        int int51 = point48.getX();
        int int52 = point48.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int56 = point55.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean60 = point55.dominates(point59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        int int68 = point66.getY();
        int int69 = point66.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean73 = point66.dominates(point72);
        int int74 = point66.getY();
        boolean boolean75 = point55.dominates(point66);
        boolean boolean76 = point48.dominates(point55);
        int int77 = point55.getX();
        boolean boolean78 = point13.dominates(point55);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test2163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2163");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        boolean boolean23 = point10.dominates(point20);
        int int24 = point20.getY();
        int int25 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int29 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean33 = point28.dominates(point32);
        boolean boolean34 = point20.dominates(point32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        int int45 = point43.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        boolean boolean53 = point43.dominates(point51);
        int int54 = point51.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int58 = point57.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean65 = point61.dominates(point64);
        int int66 = point61.getX();
        boolean boolean67 = point57.dominates(point61);
        boolean boolean68 = point51.dominates(point57);
        boolean boolean69 = point37.dominates(point57);
        int int70 = point57.getY();
        int int71 = point57.getX();
        boolean boolean72 = point20.dominates(point57);
        int int73 = point20.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 32 + "'", int73 == 32);
    }

    @Test
    public void test2164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2164");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean23 = point16.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        boolean boolean27 = point16.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int31 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point34.getX();
        boolean boolean40 = point30.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int44 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point47.getX();
        boolean boolean53 = point43.dominates(point47);
        int int54 = point47.getX();
        boolean boolean55 = point30.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        int int64 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean68 = point61.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean75 = point71.dominates(point74);
        int int76 = point74.getY();
        int int77 = point74.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean81 = point74.dominates(point80);
        boolean boolean82 = point61.dominates(point74);
        boolean boolean83 = point47.dominates(point74);
        int int84 = point74.getY();
        int int85 = point74.getY();
        int int86 = point74.getX();
        boolean boolean87 = point26.dominates(point74);
        int int88 = point26.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
    }

    @Test
    public void test2165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2165");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        boolean boolean30 = point13.dominates(point19);
        int int31 = point13.getX();
        int int32 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int36 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean40 = point35.dominates(point39);
        boolean boolean41 = point13.dominates(point35);
        int int42 = point35.getX();
        int int43 = point35.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test2166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2166");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getX();
        int int14 = point6.getY();
        int int15 = point6.getY();
        int int16 = point6.getY();
        int int17 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) '4');
        boolean boolean21 = point6.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 10);
        int int25 = point24.getX();
        int int26 = point24.getY();
        boolean boolean27 = point20.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) '#');
        boolean boolean31 = point20.dominates(point30);
        int int32 = point30.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test2167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2167");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point5.getX();
        int int11 = point5.getY();
        int int12 = point5.getX();
        int int13 = point5.getX();
        int int14 = point5.getX();
        boolean boolean15 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int19 = point18.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean23 = point18.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        int int32 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean36 = point29.dominates(point35);
        boolean boolean37 = point18.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int41 = point40.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean45 = point40.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        int int54 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean58 = point51.dominates(point57);
        boolean boolean59 = point40.dominates(point51);
        boolean boolean60 = point18.dominates(point40);
        int int61 = point40.getX();
        boolean boolean62 = point2.dominates(point40);
        int int63 = point2.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
    }

    @Test
    public void test2168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2168");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int6 = point5.getX();
        int int7 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int11 = point10.getX();
        boolean boolean12 = point5.dominates(point10);
        int int13 = point10.getX();
        int int14 = point10.getX();
        int int15 = point10.getX();
        int int16 = point10.getX();
        boolean boolean17 = point2.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) '4');
        int int21 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) (byte) 10);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point20.dominates(point27);
        boolean boolean30 = point10.dominates(point27);
        int int31 = point10.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test2169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2169");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        boolean boolean17 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point9.dominates(point20);
        int int22 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 100);
        int int26 = point25.getX();
        boolean boolean27 = point20.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int31 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point34.getX();
        boolean boolean40 = point30.dominates(point34);
        int int41 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point47.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        boolean boolean57 = point47.dominates(point55);
        int int58 = point55.getX();
        int int59 = point55.getX();
        boolean boolean60 = point30.dominates(point55);
        int int61 = point55.getX();
        int int62 = point55.getY();
        boolean boolean63 = point20.dominates(point55);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test2170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2170");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean8 = point2.dominates(point7);
        java.lang.Class<?> wildcardClass9 = point7.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2171");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) '4');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int6 = point5.getY();
        boolean boolean7 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int14 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point17.getX();
        boolean boolean23 = point13.dominates(point17);
        int int24 = point17.getX();
        boolean boolean25 = point10.dominates(point17);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point17.dominates(point28);
        boolean boolean30 = point5.dominates(point17);
        java.lang.Class<?> wildcardClass31 = point5.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2172");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        int int3 = point2.getX();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int14 = point13.getY();
        boolean boolean15 = point10.dominates(point13);
        boolean boolean16 = point7.dominates(point10);
        boolean boolean17 = point2.dominates(point7);
        int int18 = point7.getY();
        int int19 = point7.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int23 = point22.getX();
        boolean boolean24 = point7.dominates(point22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2173");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int21 = point20.getX();
        boolean boolean22 = point5.dominates(point20);
        int int23 = point5.getY();
        int int24 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int28 = point27.getY();
        int int29 = point27.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int33 = point32.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int37 = point36.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        int int45 = point40.getX();
        boolean boolean46 = point36.dominates(point40);
        int int47 = point36.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        int int55 = point53.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        boolean boolean63 = point53.dominates(point61);
        int int64 = point61.getX();
        int int65 = point61.getX();
        boolean boolean66 = point36.dominates(point61);
        boolean boolean67 = point32.dominates(point36);
        int int68 = point36.getY();
        boolean boolean69 = point27.dominates(point36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int73 = point72.getX();
        int int74 = point72.getY();
        int int75 = point72.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int79 = point78.getY();
        boolean boolean80 = point72.dominates(point78);
        boolean boolean81 = point36.dominates(point78);
        int int82 = point78.getX();
        boolean boolean83 = point5.dominates(point78);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 100 + "'", int82 == 100);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test2174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2174");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int11 = point10.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        int int19 = point14.getX();
        boolean boolean20 = point10.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int24 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point27.getX();
        boolean boolean33 = point23.dominates(point27);
        int int34 = point27.getX();
        boolean boolean35 = point10.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int39 = point38.getX();
        int int40 = point38.getY();
        boolean boolean41 = point10.dominates(point38);
        boolean boolean42 = point5.dominates(point38);
        int int43 = point38.getX();
        int int44 = point38.getY();
        boolean boolean45 = point2.dominates(point38);
        java.lang.Class<?> wildcardClass46 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test2175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2175");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) '4');
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test2176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2176");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        int int25 = point22.getY();
        boolean boolean26 = point5.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean30 = point22.dominates(point29);
        java.lang.Class<?> wildcardClass31 = point29.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2177");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (short) 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        int int15 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean19 = point12.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) '4');
        boolean boolean23 = point18.dominates(point22);
        boolean boolean24 = point6.dominates(point18);
        int int25 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        boolean boolean41 = point31.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        boolean boolean49 = point39.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        boolean boolean68 = point58.dominates(point66);
        boolean boolean69 = point52.dominates(point66);
        boolean boolean70 = point47.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int74 = point73.getY();
        boolean boolean75 = point66.dominates(point73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean82 = point78.dominates(point81);
        int int83 = point81.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean90 = point86.dominates(point89);
        boolean boolean91 = point81.dominates(point89);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point94 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (-1));
        boolean boolean95 = point89.dominates(point94);
        boolean boolean96 = point73.dominates(point94);
        int int97 = point94.getX();
        boolean boolean98 = point6.dominates(point94);
        boolean boolean99 = point2.dominates(point6);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 10 + "'", int97 == 10);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test2178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2178");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        int int15 = point2.getX();
        int int16 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int36 = point35.getY();
        boolean boolean37 = point22.dominates(point35);
        boolean boolean38 = point2.dominates(point35);
        int int39 = point35.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test2179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2179");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) '4');
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        int int9 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int13 = point12.getX();
        boolean boolean14 = point6.dominates(point12);
        int int15 = point12.getY();
        java.lang.Class<?> wildcardClass16 = point12.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2180");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point33.dominates(point46);
        boolean boolean55 = point19.dominates(point46);
        int int56 = point46.getY();
        int int57 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int61 = point60.getX();
        int int62 = point60.getY();
        int int63 = point60.getY();
        boolean boolean64 = point46.dominates(point60);
        int int65 = point60.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        int int73 = point71.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean80 = point76.dominates(point79);
        boolean boolean81 = point71.dominates(point79);
        boolean boolean82 = point60.dominates(point79);
        int int83 = point60.getX();
        int int84 = point60.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) (short) 100);
        boolean boolean88 = point60.dominates(point87);
        java.lang.Class<?> wildcardClass89 = point87.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 52 + "'", int84 == 52);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2181");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) '#');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        int int15 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean19 = point12.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) '4');
        boolean boolean23 = point18.dominates(point22);
        boolean boolean24 = point6.dominates(point18);
        int int25 = point6.getY();
        boolean boolean26 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        boolean boolean33 = point29.dominates(point32);
        boolean boolean34 = point6.dominates(point32);
        int int35 = point6.getX();
        int int36 = point6.getX();
        int int37 = point6.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 97 + "'", int37 == 97);
    }

    @Test
    public void test2182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2182");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (byte) 100);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test2183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2183");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        int int3 = point2.getX();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int14 = point13.getY();
        boolean boolean15 = point10.dominates(point13);
        boolean boolean16 = point7.dominates(point10);
        boolean boolean17 = point2.dominates(point7);
        int int18 = point2.getX();
        int int19 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        boolean boolean38 = point28.dominates(point36);
        boolean boolean39 = point22.dominates(point36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int43 = point42.getX();
        int int44 = point42.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point50.getY();
        int int53 = point50.getX();
        boolean boolean54 = point42.dominates(point50);
        boolean boolean55 = point36.dominates(point50);
        int int56 = point36.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean66 = point62.dominates(point65);
        int int67 = point65.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean74 = point70.dominates(point73);
        boolean boolean75 = point65.dominates(point73);
        int int76 = point73.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int80 = point79.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean87 = point83.dominates(point86);
        int int88 = point83.getX();
        boolean boolean89 = point79.dominates(point83);
        boolean boolean90 = point73.dominates(point79);
        boolean boolean91 = point59.dominates(point73);
        int int92 = point73.getX();
        int int93 = point73.getY();
        int int94 = point73.getX();
        boolean boolean95 = point36.dominates(point73);
        boolean boolean96 = point2.dominates(point73);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test2184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2184");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int8 = point7.getX();
        boolean boolean9 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int13 = point12.getY();
        boolean boolean14 = point7.dominates(point12);
        int int15 = point7.getX();
        int int16 = point7.getX();
        int int17 = point7.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test2185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2185");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) 'a');
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
    }

    @Test
    public void test2186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2186");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        boolean boolean19 = point9.dominates(point17);
        int int20 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int24 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point27.getX();
        boolean boolean33 = point23.dominates(point27);
        int int34 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        int int42 = point40.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        boolean boolean50 = point40.dominates(point48);
        int int51 = point48.getX();
        int int52 = point48.getX();
        boolean boolean53 = point23.dominates(point48);
        int int54 = point48.getY();
        boolean boolean55 = point9.dominates(point48);
        boolean boolean56 = point2.dominates(point48);
        int int57 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test2187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2187");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) -1);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        boolean boolean23 = point6.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int27 = point26.getX();
        int int28 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point34.getY();
        int int37 = point34.getX();
        boolean boolean38 = point26.dominates(point34);
        boolean boolean39 = point20.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int43 = point42.getX();
        boolean boolean44 = point34.dominates(point42);
        boolean boolean45 = point2.dominates(point34);
        int int46 = point34.getY();
        int int47 = point34.getX();
        int int48 = point34.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test2188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2188");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 32);
        int int3 = point2.getY();
        int int4 = point2.getY();
        int int5 = point2.getY();
        int int6 = point2.getX();
        java.lang.Class<?> wildcardClass7 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2189");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        boolean boolean23 = point6.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int27 = point26.getX();
        int int28 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point34.getY();
        int int37 = point34.getX();
        boolean boolean38 = point26.dominates(point34);
        boolean boolean39 = point20.dominates(point34);
        int int40 = point20.getX();
        boolean boolean41 = point2.dominates(point20);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test2190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2190");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean7 = point2.dominates(point6);
        java.lang.Class<?> wildcardClass8 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2191");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int21 = point20.getY();
        int int22 = point20.getY();
        boolean boolean23 = point15.dominates(point20);
        int int24 = point15.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 32 + "'", int17 == 32);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test2192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2192");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        int int24 = point21.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int28 = point27.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point31.getX();
        boolean boolean37 = point27.dominates(point31);
        boolean boolean38 = point21.dominates(point27);
        boolean boolean39 = point7.dominates(point21);
        boolean boolean40 = point2.dominates(point7);
        int int41 = point7.getY();
        int int42 = point7.getY();
        java.lang.Class<?> wildcardClass43 = point7.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test2193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2193");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        boolean boolean19 = point9.dominates(point17);
        int int20 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int24 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point27.getX();
        boolean boolean33 = point23.dominates(point27);
        boolean boolean34 = point17.dominates(point23);
        int int35 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point41.getY();
        int int44 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean48 = point41.dominates(point47);
        boolean boolean49 = point23.dominates(point41);
        int int50 = point23.getX();
        boolean boolean51 = point2.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        int int62 = point60.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        boolean boolean70 = point60.dominates(point68);
        int int71 = point68.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int75 = point74.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean82 = point78.dominates(point81);
        int int83 = point78.getX();
        boolean boolean84 = point74.dominates(point78);
        boolean boolean85 = point68.dominates(point74);
        boolean boolean86 = point54.dominates(point68);
        int int87 = point68.getX();
        boolean boolean88 = point2.dominates(point68);
        int int89 = point2.getX();
        int int90 = point2.getX();
        int int91 = point2.getX();
        int int92 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test2194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2194");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 0);
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test2195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2195");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean23 = point16.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        boolean boolean27 = point16.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 52);
        boolean boolean31 = point26.dominates(point30);
        java.lang.Class<?> wildcardClass32 = point26.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test2196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2196");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int9 = point8.getY();
        boolean boolean10 = point2.dominates(point8);
        int int11 = point8.getX();
        int int12 = point8.getX();
        int int13 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        int int30 = point23.getX();
        boolean boolean31 = point16.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int38 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point41.getX();
        boolean boolean47 = point37.dominates(point41);
        int int48 = point41.getX();
        int int49 = point41.getY();
        int int50 = point41.getY();
        boolean boolean51 = point34.dominates(point41);
        boolean boolean52 = point16.dominates(point34);
        int int53 = point34.getX();
        boolean boolean54 = point8.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) 'a');
        boolean boolean58 = point34.dominates(point57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean68 = point64.dominates(point67);
        int int69 = point67.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean76 = point72.dominates(point75);
        boolean boolean77 = point67.dominates(point75);
        int int78 = point75.getY();
        boolean boolean79 = point61.dominates(point75);
        int int80 = point75.getY();
        int int81 = point75.getX();
        int int82 = point75.getY();
        int int83 = point75.getY();
        int int84 = point75.getX();
        boolean boolean85 = point34.dominates(point75);
        int int86 = point75.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test2197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2197");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) 'a');
    }

    @Test
    public void test2198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2198");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean10 = point6.dominates(point9);
        boolean boolean11 = point2.dominates(point6);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2199");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        int int24 = point21.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        int int33 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean37 = point30.dominates(point36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean41 = point30.dominates(point40);
        int int42 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        boolean boolean50 = point30.dominates(point45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int54 = point53.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        int int62 = point57.getX();
        boolean boolean63 = point53.dominates(point57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int67 = point66.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean74 = point70.dominates(point73);
        int int75 = point70.getX();
        boolean boolean76 = point66.dominates(point70);
        int int77 = point70.getX();
        boolean boolean78 = point53.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int82 = point81.getX();
        int int83 = point81.getY();
        boolean boolean84 = point53.dominates(point81);
        boolean boolean85 = point30.dominates(point53);
        boolean boolean86 = point21.dominates(point53);
        int int87 = point21.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test2200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2200");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, 52);
    }

    @Test
    public void test2201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2201");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point49 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList55, pointArray54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm57.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm46.produceFinalSkyLine(pointList55, pointList58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point63 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList69, pointArray68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = skylineAlgorithm71.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm60.produceFinalSkyLine(pointList69, pointList72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm32.produceFinalSkyLine(pointList59, pointList69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean82 = point78.dominates(point81);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point78 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList84, pointArray83);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm86.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm75.produceFinalSkyLine(pointList84, pointList87);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm32.produceSubSkyLines(pointList84);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm0.produceSubSkyLines(pointList84);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.produceSubSkyLines(pointList94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(pointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(pointArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(pointList72);
        org.junit.Assert.assertNotNull(pointList73);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(pointArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(pointList87);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
    }

    @Test
    public void test2202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2202");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList21 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = skylineAlgorithm22.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point27 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList33, pointArray32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm35.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm24.produceFinalSkyLine(pointList33, pointList36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point41 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList47, pointArray46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm49.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm38.produceFinalSkyLine(pointList47, pointList50);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm22.produceFinalSkyLine(pointList37, pointList50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point57 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList63, pointArray62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm65.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm54.produceFinalSkyLine(pointList63, pointList66);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm53.produceSubSkyLines(pointList63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean76 = point72.dominates(point75);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point72 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList78, pointArray77);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm80.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm69.produceFinalSkyLine(pointList78, pointList81);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm53.produceSubSkyLines(pointList82);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm22.produceSubSkyLines(pointList82);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm22.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm22.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm22.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm22.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm22.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm0.produceFinalSkyLine(pointList89, pointList90);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertNotNull(pointList21);
        org.junit.Assert.assertNotNull(pointList23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(pointArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(pointArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(pointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(pointArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
        org.junit.Assert.assertNotNull(pointList87);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
    }

    @Test
    public void test2203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2203");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) '4');
        int int3 = point2.getX();
        int int4 = point2.getY();
        java.lang.Class<?> wildcardClass5 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2204");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList21 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point26 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList32, pointArray31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm34.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm23.produceFinalSkyLine(pointList32, pointList35);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm22.produceSubSkyLines(pointList32);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = skylineAlgorithm22.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList39 = skylineAlgorithm22.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm22.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm22.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm22.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm22.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm22.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm22.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm22.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm22.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm48.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm48.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm48.produceSubSkyLines(pointList73);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm22.produceSubSkyLines(pointList78);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.produceSubSkyLines(pointList79);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertNotNull(pointList21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(pointArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertNotNull(pointList38);
        org.junit.Assert.assertNotNull(pointList39);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
    }

    @Test
    public void test2205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2205");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 100);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2206");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        int int20 = point2.getY();
        int int21 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int25 = point24.getY();
        int int26 = point24.getY();
        boolean boolean27 = point2.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int34 = point33.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        int int42 = point37.getX();
        boolean boolean43 = point33.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int47 = point46.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        int int55 = point50.getX();
        boolean boolean56 = point46.dominates(point50);
        int int57 = point50.getX();
        boolean boolean58 = point33.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean65 = point61.dominates(point64);
        int int66 = point64.getY();
        int int67 = point64.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean71 = point64.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean78 = point74.dominates(point77);
        int int79 = point77.getY();
        int int80 = point77.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean84 = point77.dominates(point83);
        boolean boolean85 = point64.dominates(point77);
        boolean boolean86 = point50.dominates(point77);
        int int87 = point77.getY();
        int int88 = point77.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point91 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int92 = point91.getX();
        int int93 = point91.getY();
        int int94 = point91.getY();
        boolean boolean95 = point77.dominates(point91);
        boolean boolean96 = point30.dominates(point91);
        int int97 = point30.getX();
        boolean boolean98 = point2.dominates(point30);
        int int99 = point30.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 52 + "'", int93 == 52);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 52 + "'", int94 == 52);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 35 + "'", int97 == 35);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 10 + "'", int99 == 10);
    }

    @Test
    public void test2207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2207");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) (byte) 10);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test2208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2208");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 97);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int6 = point5.getY();
        boolean boolean7 = point2.dominates(point5);
        int int8 = point5.getX();
        int int9 = point5.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test2209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2209");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point45.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        boolean boolean55 = point45.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        boolean boolean71 = point61.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point6, point13, point22, point38, point45, point61 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm0.produceSubSkyLines(pointList73);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean85 = point81.dominates(point84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point81 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList87, pointArray86);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm89.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm78.produceFinalSkyLine(pointList87, pointList90);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm0.produceSubSkyLines(pointList91);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList98 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass99 = pointList98.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(pointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
        org.junit.Assert.assertNotNull(pointList98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2210");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        int int3 = point2.getY();
        int int4 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
    }

    @Test
    public void test2211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2211");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm31.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm48.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point53 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList59, pointArray58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm61.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm50.produceFinalSkyLine(pointList59, pointList62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm48.produceFinalSkyLine(pointList63, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm31.produceSubSkyLines(pointList78);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.produceSubSkyLines(pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm0.produceSubSkyLines(pointList83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(pointArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
    }

    @Test
    public void test2212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2212");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) '#');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int9 = point8.getX();
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean14 = point8.dominates(point13);
        boolean boolean15 = point5.dominates(point8);
        int int16 = point5.getY();
        int int17 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        int int21 = point20.getX();
        int int22 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean26 = point20.dominates(point25);
        int int27 = point25.getY();
        int int28 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point31.getX();
        int int37 = point31.getY();
        int int38 = point31.getY();
        boolean boolean39 = point25.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 35);
        boolean boolean43 = point25.dominates(point42);
        boolean boolean44 = point5.dominates(point25);
        boolean boolean45 = point2.dominates(point25);
        int int46 = point25.getX();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 32 + "'", int17 == 32);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
    }

    @Test
    public void test2213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2213");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point2.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int25 = point24.getX();
        int int26 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        int int35 = point32.getX();
        boolean boolean36 = point24.dominates(point32);
        int int37 = point32.getX();
        int int38 = point32.getY();
        boolean boolean39 = point13.dominates(point32);
        int int40 = point32.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 1);
        boolean boolean44 = point32.dominates(point43);
        int int45 = point32.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test2214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2214");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point36 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList42, pointArray41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm44.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm33.produceFinalSkyLine(pointList42, pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm32.produceSubSkyLines(pointList42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm32.produceSubSkyLines(pointList61);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm0.produceSubSkyLines(pointList61);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(pointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
    }

    @Test
    public void test2215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2215");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        boolean boolean33 = point16.dominates(point22);
        boolean boolean34 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int38 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point41.getX();
        boolean boolean47 = point37.dominates(point41);
        int int48 = point41.getX();
        int int49 = point41.getY();
        boolean boolean50 = point2.dominates(point41);
        int int51 = point41.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test2216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2216");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) '4');
        int int3 = point2.getX();
        int int4 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test2217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2217");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (byte) 100);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test2218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2218");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point23 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList29, pointArray28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm20.produceFinalSkyLine(pointList29, pointList32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point37 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList43, pointArray42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm45.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm34.produceFinalSkyLine(pointList43, pointList46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point51 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList57, pointArray56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm59.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm48.produceFinalSkyLine(pointList57, pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm20.produceFinalSkyLine(pointList47, pointList57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point66 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList72, pointArray71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm74.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm63.produceFinalSkyLine(pointList72, pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm20.produceSubSkyLines(pointList72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.produceSubSkyLines(pointList72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.produceSubSkyLines(pointList80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(pointArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(pointArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(pointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(pointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
    }

    @Test
    public void test2219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2219");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int31 = point30.getX();
        int int32 = point30.getY();
        boolean boolean33 = point2.dominates(point30);
        int int34 = point30.getX();
        int int35 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean39 = point30.dominates(point38);
        int int40 = point30.getY();
        java.lang.Class<?> wildcardClass41 = point30.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2220");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int22 = point21.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int26 = point25.getX();
        int int27 = point25.getX();
        int int28 = point25.getX();
        int int29 = point25.getY();
        int int30 = point25.getY();
        boolean boolean31 = point21.dominates(point25);
        boolean boolean32 = point5.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean49 = point38.dominates(point48);
        int int50 = point48.getY();
        boolean boolean51 = point21.dominates(point48);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 0);
        boolean boolean58 = point54.dominates(point57);
        boolean boolean59 = point21.dominates(point57);
        java.lang.Class<?> wildcardClass60 = point57.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 32 + "'", int50 == 32);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2221");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 100);
        int int3 = point2.getY();
        int int4 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
    }

    @Test
    public void test2222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2222");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point33.dominates(point46);
        boolean boolean55 = point19.dominates(point46);
        int int56 = point46.getY();
        int int57 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int61 = point60.getY();
        int int62 = point60.getY();
        int int63 = point60.getY();
        boolean boolean64 = point46.dominates(point60);
        java.lang.Class<?> wildcardClass65 = point46.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2223");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point36 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList42, pointArray41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm44.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm33.produceFinalSkyLine(pointList42, pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm33.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point57 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList63, pointArray62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm65.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm54.produceFinalSkyLine(pointList63, pointList66);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm53.produceSubSkyLines(pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm33.produceSubSkyLines(pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = skylineAlgorithm0.produceSubSkyLines(pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(pointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(pointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertNotNull(pointList69);
        org.junit.Assert.assertNotNull(pointList70);
        org.junit.Assert.assertNotNull(pointList71);
        org.junit.Assert.assertNotNull(pointList72);
        org.junit.Assert.assertNotNull(pointList73);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
    }

    @Test
    public void test2224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2224");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList29);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceSubSkyLines(pointList31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
    }

    @Test
    public void test2225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2225");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        int int33 = point27.getX();
        int int34 = point27.getX();
        int int35 = point27.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (byte) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int42 = point41.getX();
        int int43 = point41.getY();
        int int44 = point41.getY();
        int int45 = point41.getX();
        boolean boolean46 = point38.dominates(point41);
        boolean boolean47 = point27.dominates(point41);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test2226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2226");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) (short) -1);
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test2227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2227");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        int int24 = point21.getX();
        int int25 = point21.getX();
        int int26 = point21.getY();
        int int27 = point21.getX();
        boolean boolean28 = point5.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 1);
        int int32 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 100);
        int int36 = point35.getY();
        boolean boolean37 = point31.dominates(point35);
        int int38 = point35.getX();
        boolean boolean39 = point5.dominates(point35);
        java.lang.Class<?> wildcardClass40 = point35.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2228");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 10);
        int int3 = point2.getX();
        int int4 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test2229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2229");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean23 = point16.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        boolean boolean27 = point16.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 52);
        boolean boolean31 = point26.dominates(point30);
        int int32 = point30.getX();
        int int33 = point30.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
    }

    @Test
    public void test2230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2230");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (byte) 100);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        int int15 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean19 = point12.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean23 = point12.dominates(point22);
        int int24 = point22.getX();
        boolean boolean25 = point6.dominates(point22);
        int int26 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int30 = point29.getX();
        int int31 = point29.getY();
        boolean boolean32 = point22.dominates(point29);
        int int33 = point29.getX();
        int int34 = point29.getY();
        int int35 = point29.getY();
        boolean boolean36 = point2.dominates(point29);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2231");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int22 = point21.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int26 = point25.getX();
        int int27 = point25.getX();
        int int28 = point25.getX();
        int int29 = point25.getY();
        int int30 = point25.getY();
        boolean boolean31 = point21.dominates(point25);
        boolean boolean32 = point5.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean49 = point38.dominates(point48);
        int int50 = point48.getY();
        boolean boolean51 = point21.dominates(point48);
        java.lang.Class<?> wildcardClass52 = point21.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 32 + "'", int50 == 32);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test2232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2232");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, 35);
        int int3 = point2.getX();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2233");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int23 = point22.getX();
        int int24 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        int int33 = point30.getX();
        boolean boolean34 = point22.dominates(point30);
        boolean boolean35 = point16.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int39 = point38.getX();
        boolean boolean40 = point30.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int47 = point46.getX();
        int int48 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean52 = point46.dominates(point51);
        boolean boolean53 = point43.dominates(point46);
        boolean boolean54 = point38.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 1);
        int int61 = point60.getX();
        boolean boolean62 = point57.dominates(point60);
        boolean boolean63 = point38.dominates(point60);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test2234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2234");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        boolean boolean30 = point13.dominates(point19);
        int int31 = point19.getX();
        java.lang.Class<?> wildcardClass32 = point19.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test2235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2235");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int8 = point7.getX();
        int int9 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getX();
        boolean boolean19 = point7.dominates(point15);
        int int20 = point7.getX();
        int int21 = point7.getX();
        boolean boolean22 = point2.dominates(point7);
        int int23 = point2.getX();
        int int24 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int44 = point43.getY();
        boolean boolean45 = point39.dominates(point43);
        int int46 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 35);
        boolean boolean50 = point43.dominates(point49);
        boolean boolean51 = point27.dominates(point43);
        int int52 = point43.getY();
        boolean boolean53 = point2.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 97);
        int int57 = point56.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int61 = point60.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int65 = point64.getX();
        int int66 = point64.getX();
        int int67 = point64.getX();
        int int68 = point64.getY();
        int int69 = point64.getY();
        boolean boolean70 = point60.dominates(point64);
        int int71 = point60.getY();
        boolean boolean72 = point56.dominates(point60);
        int int73 = point60.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        boolean boolean77 = point60.dominates(point76);
        boolean boolean78 = point43.dominates(point60);
        java.lang.Class<?> wildcardClass79 = point60.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 97 + "'", int44 == 97);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 97 + "'", int52 == 97);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 97 + "'", int57 == 97);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2236");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int9 = point8.getY();
        boolean boolean10 = point2.dominates(point8);
        int int11 = point8.getX();
        int int12 = point8.getX();
        int int13 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        int int30 = point23.getX();
        boolean boolean31 = point16.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int38 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point41.getX();
        boolean boolean47 = point37.dominates(point41);
        int int48 = point41.getX();
        int int49 = point41.getY();
        int int50 = point41.getY();
        boolean boolean51 = point34.dominates(point41);
        boolean boolean52 = point16.dominates(point34);
        int int53 = point34.getX();
        boolean boolean54 = point8.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) 'a');
        boolean boolean58 = point34.dominates(point57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean68 = point64.dominates(point67);
        int int69 = point67.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean76 = point72.dominates(point75);
        boolean boolean77 = point67.dominates(point75);
        int int78 = point75.getY();
        boolean boolean79 = point61.dominates(point75);
        int int80 = point75.getY();
        int int81 = point75.getX();
        int int82 = point75.getY();
        int int83 = point75.getY();
        int int84 = point75.getX();
        boolean boolean85 = point34.dominates(point75);
        java.lang.Class<?> wildcardClass86 = point34.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2237");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) -1);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, 10);
        boolean boolean10 = point5.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int14 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        boolean boolean33 = point23.dominates(point31);
        boolean boolean34 = point17.dominates(point31);
        int int35 = point17.getY();
        int int36 = point17.getY();
        boolean boolean37 = point13.dominates(point17);
        boolean boolean38 = point9.dominates(point17);
        int int39 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int43 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean47 = point42.dominates(point46);
        int int48 = point42.getX();
        boolean boolean49 = point9.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) (byte) 10);
        int int53 = point52.getX();
        boolean boolean54 = point9.dominates(point52);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2238");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        boolean boolean17 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point9.dominates(point20);
        int int22 = point9.getX();
        int int23 = point9.getY();
        int int24 = point9.getX();
        int int25 = point9.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test2239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2239");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        int int9 = point2.getX();
        int int10 = point2.getY();
        int int11 = point2.getY();
        int int12 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int20 = point19.getY();
        boolean boolean21 = point15.dominates(point19);
        int int22 = point19.getY();
        int int23 = point19.getY();
        int int24 = point19.getY();
        boolean boolean25 = point2.dominates(point19);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2240");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        boolean boolean21 = point2.dominates(point18);
        int int22 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int26 = point25.getX();
        int int27 = point25.getY();
        boolean boolean28 = point18.dominates(point25);
        int int29 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        boolean boolean48 = point38.dominates(point46);
        int int49 = point46.getY();
        boolean boolean50 = point32.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean60 = point56.dominates(point59);
        int int61 = point59.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean68 = point64.dominates(point67);
        boolean boolean69 = point59.dominates(point67);
        int int70 = point67.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int74 = point73.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean81 = point77.dominates(point80);
        int int82 = point77.getX();
        boolean boolean83 = point73.dominates(point77);
        boolean boolean84 = point67.dominates(point73);
        boolean boolean85 = point53.dominates(point67);
        boolean boolean86 = point46.dominates(point67);
        boolean boolean87 = point25.dominates(point67);
        int int88 = point25.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 10 + "'", int88 == 10);
    }

    @Test
    public void test2241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2241");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (short) 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean16 = point9.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean20 = point9.dominates(point19);
        int int21 = point19.getX();
        int int22 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point28.getX();
        boolean boolean34 = point25.dominates(point28);
        boolean boolean35 = point19.dominates(point28);
        boolean boolean36 = point2.dominates(point28);
        int int37 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test2242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2242");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        int int23 = point20.getY();
        boolean boolean24 = point6.dominates(point20);
        int int25 = point6.getY();
        boolean boolean26 = point2.dominates(point6);
        int int27 = point2.getY();
        int int28 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int32 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point35.getX();
        boolean boolean41 = point31.dominates(point35);
        int int42 = point35.getY();
        boolean boolean43 = point2.dominates(point35);
        java.lang.Class<?> wildcardClass44 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test2243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2243");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 97);
        int int3 = point2.getX();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2244");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int3 = point2.getY();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        int int24 = point21.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int28 = point27.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        int int36 = point31.getX();
        boolean boolean37 = point27.dominates(point31);
        boolean boolean38 = point21.dominates(point27);
        boolean boolean39 = point7.dominates(point21);
        int int40 = point21.getY();
        int int41 = point21.getX();
        boolean boolean42 = point2.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) (byte) 100);
        boolean boolean46 = point21.dominates(point45);
        int int47 = point21.getX();
        int int48 = point21.getX();
        int int49 = point21.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test2245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2245");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 100);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
    }

    @Test
    public void test2246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2246");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm31.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm33.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point38 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList44, pointArray43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm35.produceFinalSkyLine(pointList44, pointList47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point52 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList58, pointArray57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm60.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm49.produceFinalSkyLine(pointList58, pointList61);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm33.produceFinalSkyLine(pointList48, pointList61);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm31.produceSubSkyLines(pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm0.produceSubSkyLines(pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm0.produceSubSkyLines(pointList68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(pointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(pointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
    }

    @Test
    public void test2247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2247");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        boolean boolean19 = point9.dominates(point17);
        int int20 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int24 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point27.getX();
        boolean boolean33 = point23.dominates(point27);
        int int34 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        int int42 = point40.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        boolean boolean50 = point40.dominates(point48);
        int int51 = point48.getX();
        int int52 = point48.getX();
        boolean boolean53 = point23.dominates(point48);
        int int54 = point48.getY();
        boolean boolean55 = point9.dominates(point48);
        boolean boolean56 = point2.dominates(point48);
        int int57 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean64 = point60.dominates(point63);
        int int65 = point63.getY();
        int int66 = point63.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean70 = point63.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean74 = point63.dominates(point73);
        int int75 = point63.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int79 = point78.getX();
        boolean boolean80 = point63.dominates(point78);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int84 = point83.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean88 = point83.dominates(point87);
        boolean boolean89 = point63.dominates(point83);
        int int90 = point83.getX();
        int int91 = point83.getX();
        int int92 = point83.getY();
        boolean boolean93 = point2.dominates(point83);
        int int94 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 100 + "'", int84 == 100);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test2248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2248");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 97);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
    }

    @Test
    public void test2249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2249");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) (short) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (-1));
        boolean boolean22 = point16.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int26 = point25.getX();
        int int27 = point25.getX();
        int int28 = point25.getX();
        int int29 = point25.getY();
        int int30 = point25.getY();
        boolean boolean31 = point16.dominates(point25);
        int int32 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int39 = point38.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point42.getX();
        boolean boolean48 = point38.dominates(point42);
        int int49 = point42.getX();
        boolean boolean50 = point35.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point42.dominates(point53);
        boolean boolean55 = point25.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        int int64 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean68 = point61.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean72 = point61.dominates(point71);
        int int73 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int77 = point76.getX();
        boolean boolean78 = point61.dominates(point76);
        int int79 = point61.getY();
        boolean boolean80 = point42.dominates(point61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int84 = point83.getY();
        int int85 = point83.getY();
        int int86 = point83.getX();
        boolean boolean87 = point42.dominates(point83);
        boolean boolean88 = point2.dominates(point83);
        int int89 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
    }

    @Test
    public void test2250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2250");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        int int20 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point26.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        boolean boolean36 = point26.dominates(point34);
        int int37 = point34.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int41 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point44.getX();
        boolean boolean50 = point40.dominates(point44);
        boolean boolean51 = point34.dominates(point40);
        int int52 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        int int61 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean65 = point58.dominates(point64);
        boolean boolean66 = point40.dominates(point58);
        boolean boolean67 = point16.dominates(point58);
        int int68 = point58.getX();
        boolean boolean69 = point2.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean76 = point72.dominates(point75);
        int int77 = point75.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean84 = point80.dominates(point83);
        boolean boolean85 = point75.dominates(point83);
        boolean boolean86 = point58.dominates(point83);
        int int87 = point58.getY();
        int int88 = point58.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test2251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2251");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int16 = point15.getY();
        boolean boolean17 = point11.dominates(point15);
        int int18 = point11.getY();
        java.lang.Class<?> wildcardClass19 = point11.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test2252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2252");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, 52);
    }

    @Test
    public void test2253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2253");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        int int24 = point21.getX();
        int int25 = point21.getX();
        int int26 = point21.getY();
        int int27 = point21.getX();
        boolean boolean28 = point5.dominates(point21);
        int int29 = point5.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test2254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2254");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) '4');
        int int3 = point2.getY();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int8 = point7.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        int int19 = point17.getY();
        int int20 = point17.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int24 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point27.getX();
        boolean boolean33 = point23.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int37 = point36.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        int int45 = point40.getX();
        boolean boolean46 = point36.dominates(point40);
        int int47 = point40.getX();
        boolean boolean48 = point23.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int52 = point51.getX();
        int int53 = point51.getY();
        boolean boolean54 = point23.dominates(point51);
        boolean boolean55 = point17.dominates(point51);
        boolean boolean56 = point11.dominates(point51);
        boolean boolean57 = point7.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean64 = point60.dominates(point63);
        int int65 = point63.getY();
        int int66 = point63.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean70 = point63.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int74 = point73.getY();
        boolean boolean75 = point69.dominates(point73);
        boolean boolean76 = point7.dominates(point69);
        boolean boolean77 = point2.dominates(point7);
        int int78 = point7.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 97 + "'", int74 == 97);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test2255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2255");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point2.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int25 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean29 = point24.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        int int38 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean42 = point35.dominates(point41);
        boolean boolean43 = point24.dominates(point35);
        boolean boolean44 = point2.dominates(point24);
        int int45 = point24.getX();
        int int46 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (short) 1);
        boolean boolean50 = point24.dominates(point49);
        java.lang.Class<?> wildcardClass51 = point24.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test2256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2256");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) (short) -1);
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
    }

    @Test
    public void test2257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2257");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (byte) -1);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2258");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 1);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test2259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2259");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 32);
        boolean boolean22 = point5.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, 52);
        int int26 = point25.getX();
        int int27 = point25.getX();
        int int28 = point25.getX();
        boolean boolean29 = point21.dominates(point25);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test2260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2260");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) 10);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, 1);
        boolean boolean8 = point2.dominates(point7);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2261");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        int int10 = point9.getY();
        boolean boolean11 = point5.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 97);
        boolean boolean15 = point5.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) '4');
        int int19 = point18.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int23 = point22.getY();
        boolean boolean24 = point18.dominates(point22);
        int int25 = point22.getX();
        boolean boolean26 = point5.dominates(point22);
        int int27 = point5.getY();
        int int28 = point5.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 32 + "'", int28 == 32);
    }

    @Test
    public void test2262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2262");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int7 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int11 = point10.getY();
        boolean boolean12 = point6.dominates(point10);
        int int13 = point6.getY();
        boolean boolean14 = point2.dominates(point6);
        int int15 = point2.getY();
        int int16 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
    }

    @Test
    public void test2263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2263");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        int int9 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean22 = point15.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean26 = point15.dominates(point25);
        int int27 = point15.getY();
        int int28 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int32 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int36 = point35.getX();
        int int37 = point35.getX();
        int int38 = point35.getX();
        int int39 = point35.getY();
        int int40 = point35.getY();
        boolean boolean41 = point31.dominates(point35);
        boolean boolean42 = point15.dominates(point31);
        int int43 = point15.getY();
        boolean boolean44 = point6.dominates(point15);
        int int45 = point6.getX();
        java.lang.Class<?> wildcardClass46 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test2264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2264");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        boolean boolean17 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int21 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean25 = point20.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point31.getY();
        int int34 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean38 = point31.dominates(point37);
        boolean boolean39 = point20.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int43 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean47 = point42.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        int int55 = point53.getY();
        int int56 = point53.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean60 = point53.dominates(point59);
        boolean boolean61 = point42.dominates(point53);
        boolean boolean62 = point20.dominates(point42);
        int int63 = point42.getX();
        int int64 = point42.getY();
        boolean boolean65 = point9.dominates(point42);
        int int66 = point42.getY();
        java.lang.Class<?> wildcardClass67 = point42.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test2265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2265");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) (short) 10);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2266");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        int int20 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) '4');
        boolean boolean24 = point2.dominates(point23);
        int int25 = point23.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
    }

    @Test
    public void test2267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2267");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.produceSubSkyLines(pointList52);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm0.produceSubSkyLines(pointList67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
    }

    @Test
    public void test2268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2268");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList21 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList22 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass25 = pointList24.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertNotNull(pointList21);
        org.junit.Assert.assertNotNull(pointList22);
        org.junit.Assert.assertNotNull(pointList23);
        org.junit.Assert.assertNotNull(pointList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2269");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        int int6 = point2.getX();
        java.lang.Class<?> wildcardClass7 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2270");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) 10);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int29 = point28.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point32.getX();
        boolean boolean38 = point28.dominates(point32);
        int int39 = point32.getX();
        boolean boolean40 = point15.dominates(point32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int44 = point43.getX();
        int int45 = point43.getY();
        boolean boolean46 = point15.dominates(point43);
        boolean boolean47 = point9.dominates(point43);
        int int48 = point9.getY();
        int int49 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int53 = point52.getX();
        boolean boolean54 = point9.dominates(point52);
        boolean boolean55 = point2.dominates(point52);
        int int56 = point52.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
    }

    @Test
    public void test2271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2271");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        int int33 = point27.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        int int41 = point39.getY();
        int int42 = point39.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean46 = point39.dominates(point45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 10);
        boolean boolean50 = point39.dominates(point49);
        int int51 = point39.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        int int59 = point57.getY();
        int int60 = point57.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean64 = point57.dominates(point63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean68 = point57.dominates(point67);
        int int69 = point67.getX();
        int int70 = point67.getX();
        int int71 = point67.getX();
        boolean boolean72 = point39.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (-1));
        boolean boolean76 = point67.dominates(point75);
        boolean boolean77 = point27.dominates(point75);
        java.lang.Class<?> wildcardClass78 = point27.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 100 + "'", int69 == 100);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test2272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2272");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int21 = point20.getX();
        int int22 = point20.getX();
        int int23 = point20.getX();
        int int24 = point20.getY();
        boolean boolean25 = point15.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int29 = point28.getX();
        int int30 = point28.getX();
        boolean boolean31 = point20.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point20.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) 'a');
        int int43 = point42.getX();
        boolean boolean44 = point20.dominates(point42);
        int int45 = point42.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
    }

    @Test
    public void test2273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2273");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point22 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList28, pointArray27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm19.produceFinalSkyLine(pointList28, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm18.produceSubSkyLines(pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.produceSubSkyLines(pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList39 = skylineAlgorithm38.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm0.produceFinalSkyLine(pointList39, pointList40);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(pointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertNotNull(pointList39);
    }

    @Test
    public void test2274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2274");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point11.getX();
        boolean boolean17 = point7.dominates(point11);
        int int18 = point7.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        boolean boolean34 = point24.dominates(point32);
        int int35 = point32.getX();
        int int36 = point32.getX();
        boolean boolean37 = point7.dominates(point32);
        int int38 = point7.getX();
        boolean boolean39 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int43 = point42.getX();
        int int44 = point42.getY();
        int int45 = point42.getX();
        boolean boolean46 = point7.dominates(point42);
        int int47 = point42.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        int int55 = point53.getY();
        int int56 = point53.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean60 = point53.dominates(point59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean64 = point53.dominates(point63);
        int int65 = point53.getY();
        int int66 = point53.getY();
        boolean boolean67 = point42.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, 100);
        boolean boolean71 = point42.dominates(point70);
        int int72 = point42.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test2275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2275");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm31.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm48.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point53 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList59, pointArray58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm61.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm50.produceFinalSkyLine(pointList59, pointList62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm48.produceFinalSkyLine(pointList63, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm31.produceSubSkyLines(pointList78);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.produceSubSkyLines(pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass85 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(pointArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2276");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm31.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm48.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point53 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList59, pointArray58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm61.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm50.produceFinalSkyLine(pointList59, pointList62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point67 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList73, pointArray72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm75.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm64.produceFinalSkyLine(pointList73, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm48.produceFinalSkyLine(pointList63, pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm31.produceSubSkyLines(pointList78);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.produceSubSkyLines(pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(pointArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(pointArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
        org.junit.Assert.assertNotNull(pointList87);
    }

    @Test
    public void test2277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2277");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int8 = point7.getX();
        int int9 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getX();
        boolean boolean19 = point7.dominates(point15);
        int int20 = point7.getX();
        int int21 = point7.getX();
        boolean boolean22 = point2.dominates(point7);
        int int23 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test2278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2278");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 100);
        int int3 = point2.getX();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2279");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test2280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2280");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int17 = point16.getX();
        int int18 = point16.getX();
        int int19 = point16.getX();
        boolean boolean20 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, 1);
        int int24 = point23.getX();
        boolean boolean25 = point16.dominates(point23);
        int int26 = point23.getY();
        java.lang.Class<?> wildcardClass27 = point23.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test2281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2281");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', (int) (byte) 100);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int8 = point7.getX();
        int int9 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getX();
        boolean boolean19 = point7.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) -1);
        boolean boolean23 = point7.dominates(point22);
        int int24 = point7.getX();
        boolean boolean25 = point2.dominates(point7);
        int int26 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
    }

    @Test
    public void test2282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2282");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 10);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int10 = point9.getX();
        int int11 = point9.getY();
        int int12 = point9.getX();
        boolean boolean13 = point2.dominates(point9);
        int int14 = point9.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test2283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2283");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        boolean boolean30 = point13.dominates(point19);
        int int31 = point13.getX();
        int int32 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int36 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean40 = point35.dominates(point39);
        boolean boolean41 = point13.dominates(point35);
        int int42 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int46 = point45.getX();
        int int47 = point45.getY();
        int int48 = point45.getY();
        int int49 = point45.getX();
        int int50 = point45.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int57 = point56.getX();
        int int58 = point56.getY();
        int int59 = point56.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int63 = point62.getY();
        boolean boolean64 = point56.dominates(point62);
        int int65 = point62.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        int int73 = point71.getY();
        int int74 = point71.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean78 = point71.dominates(point77);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean85 = point81.dominates(point84);
        int int86 = point84.getY();
        int int87 = point84.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean91 = point84.dominates(point90);
        boolean boolean92 = point71.dominates(point84);
        boolean boolean93 = point62.dominates(point84);
        int int94 = point62.getY();
        int int95 = point62.getX();
        boolean boolean96 = point53.dominates(point62);
        boolean boolean97 = point45.dominates(point53);
        int int98 = point45.getX();
        boolean boolean99 = point35.dominates(point45);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 100 + "'", int95 == 100);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test2284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2284");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        boolean boolean21 = point11.dominates(point19);
        boolean boolean22 = point5.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean26 = point19.dominates(point25);
        boolean boolean27 = point2.dominates(point19);
        int int28 = point2.getX();
        int int29 = point2.getX();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test2285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2285");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 0);
        int int21 = point20.getX();
        int int22 = point20.getY();
        boolean boolean23 = point15.dominates(point20);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2286");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        boolean boolean21 = point2.dominates(point18);
        int int22 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int26 = point25.getX();
        int int27 = point25.getY();
        boolean boolean28 = point18.dominates(point25);
        java.lang.Class<?> wildcardClass29 = point25.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test2287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2287");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean15 = point8.dominates(point14);
        boolean boolean16 = point2.dominates(point14);
        int int17 = point14.getY();
        java.lang.Class<?> wildcardClass18 = point14.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test2288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2288");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int7 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int11 = point10.getY();
        boolean boolean12 = point6.dominates(point10);
        int int13 = point6.getY();
        boolean boolean14 = point2.dominates(point6);
        int int15 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        boolean boolean34 = point24.dominates(point32);
        boolean boolean35 = point18.dominates(point32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean39 = point32.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        boolean boolean43 = point32.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 52);
        boolean boolean47 = point42.dominates(point46);
        boolean boolean48 = point6.dominates(point42);
        int int49 = point42.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test2289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2289");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        boolean boolean21 = point2.dominates(point18);
        int int22 = point18.getY();
        int int23 = point18.getX();
        java.lang.Class<?> wildcardClass24 = point18.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test2290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2290");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int6 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int10 = point9.getX();
        int int11 = point9.getX();
        int int12 = point9.getX();
        int int13 = point9.getY();
        int int14 = point9.getY();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getY();
        int int17 = point9.getY();
        int int18 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, 35);
        boolean boolean22 = point9.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int26 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point29.getX();
        boolean boolean35 = point25.dominates(point29);
        int int36 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        boolean boolean52 = point42.dominates(point50);
        int int53 = point50.getX();
        int int54 = point50.getX();
        boolean boolean55 = point25.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        int int64 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean68 = point61.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean75 = point71.dominates(point74);
        int int76 = point74.getY();
        int int77 = point74.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean81 = point74.dominates(point80);
        boolean boolean82 = point61.dominates(point74);
        boolean boolean83 = point25.dominates(point61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean87 = point61.dominates(point86);
        int int88 = point61.getX();
        boolean boolean89 = point9.dominates(point61);
        int int90 = point61.getX();
        boolean boolean91 = point2.dominates(point61);
        java.lang.Class<?> wildcardClass92 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2291");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getY();
        int int6 = point2.getY();
        int int7 = point2.getX();
        int int8 = point2.getY();
        int int9 = point2.getX();
        int int10 = point2.getX();
        java.lang.Class<?> wildcardClass11 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2292");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) '#');
        int int3 = point2.getX();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2293");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int3 = point2.getY();
        int int4 = point2.getY();
        int int5 = point2.getX();
        int int6 = point2.getY();
        int int7 = point2.getX();
        int int8 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
    }

    @Test
    public void test2294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2294");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int3 = point2.getY();
        int int4 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
    }

    @Test
    public void test2295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2295");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int17 = point16.getX();
        int int18 = point16.getY();
        boolean boolean19 = point6.dominates(point16);
        int int20 = point16.getY();
        java.lang.Class<?> wildcardClass21 = point16.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test2296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2296");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        int int23 = point20.getY();
        boolean boolean24 = point6.dominates(point20);
        int int25 = point6.getY();
        boolean boolean26 = point2.dominates(point6);
        int int27 = point2.getY();
        int int28 = point2.getY();
        java.lang.Class<?> wildcardClass29 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test2297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2297");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (-1));
        int int3 = point2.getX();
        int int4 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test2298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2298");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 0);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int10 = point9.getX();
        int int11 = point9.getY();
        int int12 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int16 = point15.getY();
        boolean boolean17 = point9.dominates(point15);
        int int18 = point15.getX();
        int int19 = point15.getX();
        int int20 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int27 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point30.getX();
        boolean boolean36 = point26.dominates(point30);
        int int37 = point30.getX();
        boolean boolean38 = point23.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int45 = point44.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point48.getX();
        boolean boolean54 = point44.dominates(point48);
        int int55 = point48.getX();
        int int56 = point48.getY();
        int int57 = point48.getY();
        boolean boolean58 = point41.dominates(point48);
        boolean boolean59 = point23.dominates(point41);
        int int60 = point41.getX();
        boolean boolean61 = point15.dominates(point41);
        int int62 = point15.getX();
        boolean boolean63 = point5.dominates(point15);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test2299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2299");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test2300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2300");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int21 = point20.getX();
        int int22 = point20.getX();
        int int23 = point20.getX();
        int int24 = point20.getY();
        boolean boolean25 = point15.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int29 = point28.getX();
        int int30 = point28.getX();
        boolean boolean31 = point20.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point20.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        int int50 = point48.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        boolean boolean58 = point48.dominates(point56);
        int int59 = point56.getY();
        boolean boolean60 = point42.dominates(point56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        int int71 = point69.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean78 = point74.dominates(point77);
        boolean boolean79 = point69.dominates(point77);
        int int80 = point77.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int84 = point83.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean91 = point87.dominates(point90);
        int int92 = point87.getX();
        boolean boolean93 = point83.dominates(point87);
        boolean boolean94 = point77.dominates(point83);
        boolean boolean95 = point63.dominates(point77);
        boolean boolean96 = point56.dominates(point77);
        boolean boolean97 = point20.dominates(point56);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test2301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2301");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point32 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList38, pointArray37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm40.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm29.produceFinalSkyLine(pointList38, pointList41);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm28.produceSubSkyLines(pointList38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point47 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList53, pointArray52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm55.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm44.produceFinalSkyLine(pointList53, pointList56);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm28.produceSubSkyLines(pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.produceFinalSkyLine(pointList23, pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass61 = pointList60.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(pointArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(pointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2302");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        boolean boolean30 = point13.dominates(point19);
        int int31 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        int int40 = point37.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean44 = point37.dominates(point43);
        boolean boolean45 = point19.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 10);
        boolean boolean49 = point37.dominates(point48);
        int int50 = point48.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
    }

    @Test
    public void test2303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2303");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceSubSkyLines(pointList25);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point38 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList44, pointArray43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm35.produceFinalSkyLine(pointList44, pointList47);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm34.produceSubSkyLines(pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm0.produceSubSkyLines(pointList49);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(pointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
    }

    @Test
    public void test2304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2304");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) (short) 100);
    }

    @Test
    public void test2305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2305");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (int) (short) 10);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2306");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) 'a');
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test2307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2307");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) '#');
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test2308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2308");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', (int) (byte) 100);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean16 = point9.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean20 = point9.dominates(point19);
        int int21 = point19.getX();
        boolean boolean22 = point2.dominates(point19);
        int int23 = point19.getX();
        java.lang.Class<?> wildcardClass24 = point19.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test2309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2309");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        int int21 = point18.getY();
        int int22 = point18.getY();
        boolean boolean23 = point2.dominates(point18);
        int int24 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) ' ');
        boolean boolean28 = point18.dominates(point27);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 32 + "'", int21 == 32);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 32 + "'", int22 == 32);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test2310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2310");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) -1);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int11 = point10.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        int int19 = point14.getX();
        boolean boolean20 = point10.dominates(point14);
        int int21 = point10.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        int int29 = point27.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        boolean boolean37 = point27.dominates(point35);
        int int38 = point35.getX();
        int int39 = point35.getX();
        boolean boolean40 = point10.dominates(point35);
        boolean boolean41 = point6.dominates(point10);
        int int42 = point6.getY();
        int int43 = point6.getY();
        int int44 = point6.getY();
        boolean boolean45 = point2.dominates(point6);
        int int46 = point6.getX();
        java.lang.Class<?> wildcardClass47 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test2311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2311");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        boolean boolean33 = point16.dominates(point22);
        boolean boolean34 = point2.dominates(point16);
        int int35 = point2.getY();
        int int36 = point2.getY();
        int int37 = point2.getY();
        int int38 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test2312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2312");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        boolean boolean24 = point7.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int28 = point27.getX();
        int int29 = point27.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        int int38 = point35.getX();
        boolean boolean39 = point27.dominates(point35);
        boolean boolean40 = point21.dominates(point35);
        boolean boolean41 = point2.dominates(point21);
        int int42 = point2.getX();
        int int43 = point2.getX();
        int int44 = point2.getX();
        int int45 = point2.getX();
        int int46 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
    }

    @Test
    public void test2313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2313");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 0);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 100);
        boolean boolean10 = point5.dominates(point9);
        java.lang.Class<?> wildcardClass11 = point9.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2314");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int9 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean13 = point8.dominates(point12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        int int22 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean26 = point19.dominates(point25);
        boolean boolean27 = point8.dominates(point19);
        boolean boolean28 = point2.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        int int40 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean44 = point37.dominates(point43);
        boolean boolean45 = point31.dominates(point43);
        boolean boolean46 = point8.dominates(point31);
        int int47 = point31.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
    }

    @Test
    public void test2315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2315");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int7 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int11 = point10.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        int int19 = point14.getX();
        boolean boolean20 = point10.dominates(point14);
        int int21 = point10.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        int int29 = point27.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        boolean boolean37 = point27.dominates(point35);
        int int38 = point35.getX();
        int int39 = point35.getX();
        boolean boolean40 = point10.dominates(point35);
        boolean boolean41 = point6.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int45 = point44.getX();
        int int46 = point44.getX();
        int int47 = point44.getX();
        boolean boolean48 = point10.dominates(point44);
        int int49 = point10.getY();
        boolean boolean50 = point2.dominates(point10);
        int int51 = point2.getY();
        int int52 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test2316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2316");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm46.produceSubSkyLines(pointList56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm46.produceSubSkyLines(pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm18.produceFinalSkyLine(pointList41, pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.produceSubSkyLines(pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass81 = pointList80.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2317");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point11.getX();
        boolean boolean17 = point7.dominates(point11);
        int int18 = point7.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        boolean boolean34 = point24.dominates(point32);
        int int35 = point32.getX();
        int int36 = point32.getX();
        boolean boolean37 = point7.dominates(point32);
        int int38 = point7.getX();
        boolean boolean39 = point2.dominates(point7);
        int int40 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        boolean boolean56 = point46.dominates(point54);
        int int57 = point46.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int61 = point60.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean68 = point64.dominates(point67);
        int int69 = point64.getX();
        boolean boolean70 = point60.dominates(point64);
        int int71 = point60.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean78 = point74.dominates(point77);
        int int79 = point77.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        boolean boolean87 = point77.dominates(point85);
        int int88 = point85.getX();
        int int89 = point85.getX();
        boolean boolean90 = point60.dominates(point85);
        int int91 = point85.getY();
        boolean boolean92 = point46.dominates(point85);
        int int93 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point96 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) (short) 1);
        boolean boolean97 = point46.dominates(point96);
        boolean boolean98 = point7.dominates(point96);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test2318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2318");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        int int3 = point2.getY();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2319");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) '4');
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 10);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        int int9 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int13 = point12.getX();
        boolean boolean14 = point6.dominates(point12);
        java.lang.Class<?> wildcardClass15 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2320");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        boolean boolean9 = point5.dominates(point8);
        boolean boolean10 = point2.dominates(point8);
        int int11 = point8.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test2321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2321");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm1 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean8 = point4.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point4 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList10 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList10, pointArray9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm12.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm1.produceFinalSkyLine(pointList10, pointList13);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.produceSubSkyLines(pointList10);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm46.produceSubSkyLines(pointList56);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point65 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList71, pointArray70);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm62.produceFinalSkyLine(pointList71, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm46.produceSubSkyLines(pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm18.produceFinalSkyLine(pointList41, pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.produceSubSkyLines(pointList77);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = null;
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm80.getPoints();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.produceFinalSkyLine(pointList79, pointList81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.ArrayList.size()\" because \"left\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pointArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(pointArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList81);
    }

    @Test
    public void test2322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2322");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int8 = point7.getX();
        int int9 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getX();
        boolean boolean19 = point7.dominates(point15);
        int int20 = point7.getX();
        int int21 = point7.getX();
        boolean boolean22 = point2.dominates(point7);
        int int23 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int27 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int31 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point34.getX();
        boolean boolean40 = point30.dominates(point34);
        int int41 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point47.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        boolean boolean57 = point47.dominates(point55);
        int int58 = point55.getX();
        int int59 = point55.getX();
        boolean boolean60 = point30.dominates(point55);
        boolean boolean61 = point26.dominates(point30);
        boolean boolean62 = point7.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', (int) (byte) 100);
        int int66 = point65.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean73 = point69.dominates(point72);
        int int74 = point72.getY();
        int int75 = point72.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean79 = point72.dominates(point78);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean83 = point72.dominates(point82);
        int int84 = point82.getX();
        boolean boolean85 = point65.dominates(point82);
        boolean boolean86 = point7.dominates(point65);
        int int87 = point65.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 32 + "'", int87 == 32);
    }

    @Test
    public void test2323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2323");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) '#');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        int int7 = point5.getY();
        int int8 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int12 = point11.getY();
        boolean boolean13 = point5.dominates(point11);
        int int14 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        int int23 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean27 = point20.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean40 = point33.dominates(point39);
        boolean boolean41 = point20.dominates(point33);
        boolean boolean42 = point11.dominates(point33);
        int int43 = point11.getY();
        boolean boolean44 = point2.dominates(point11);
        int int45 = point2.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test2324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2324");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 0);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2325");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean19 = point8.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        int int28 = point25.getY();
        boolean boolean29 = point8.dominates(point25);
        boolean boolean30 = point2.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        int int38 = point36.getY();
        int int39 = point36.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean43 = point36.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 10);
        boolean boolean47 = point36.dominates(point46);
        boolean boolean48 = point25.dominates(point36);
        int int49 = point36.getX();
        int int50 = point36.getY();
        int int51 = point36.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test2326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2326");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 0);
        boolean boolean12 = point6.dominates(point11);
        int int13 = point6.getX();
        java.lang.Class<?> wildcardClass14 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test2327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2327");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) -1);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = point2.dominates(point7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2328");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int6 = point5.getY();
        int int7 = point5.getX();
        int int8 = point5.getX();
        boolean boolean9 = point2.dominates(point5);
        java.lang.Class<?> wildcardClass10 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2329");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        boolean boolean21 = point2.dominates(point18);
        int int22 = point2.getY();
        int int23 = point2.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 32 + "'", int22 == 32);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test2330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2330");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point42 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList48, pointArray47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm50.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm39.produceFinalSkyLine(pointList48, pointList51);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm39.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point63 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList69, pointArray68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = skylineAlgorithm71.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm60.produceFinalSkyLine(pointList69, pointList72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm39.produceSubSkyLines(pointList69);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm0.produceSubSkyLines(pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass77 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertNotNull(pointList38);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(pointArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertNotNull(pointList54);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(pointArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(pointList72);
        org.junit.Assert.assertNotNull(pointList73);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2331");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point33.dominates(point46);
        boolean boolean55 = point19.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        boolean boolean71 = point61.dominates(point69);
        int int72 = point69.getY();
        int int73 = point69.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int77 = point76.getX();
        int int78 = point76.getX();
        int int79 = point76.getX();
        int int80 = point76.getX();
        int int81 = point76.getY();
        boolean boolean82 = point69.dominates(point76);
        boolean boolean83 = point46.dominates(point76);
        java.lang.Class<?> wildcardClass84 = point46.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test2332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2332");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int8 = point7.getX();
        boolean boolean9 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) 'a');
        boolean boolean13 = point7.dominates(point12);
        int int14 = point7.getX();
        java.lang.Class<?> wildcardClass15 = point7.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2333");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (short) 100);
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
    }

    @Test
    public void test2334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2334");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        int int7 = point5.getY();
        int int8 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int12 = point11.getY();
        boolean boolean13 = point5.dominates(point11);
        int int14 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        int int23 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean27 = point20.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean40 = point33.dominates(point39);
        boolean boolean41 = point20.dominates(point33);
        boolean boolean42 = point11.dominates(point33);
        int int43 = point11.getY();
        int int44 = point11.getX();
        boolean boolean45 = point2.dominates(point11);
        int int46 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int50 = point49.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean60 = point56.dominates(point59);
        int int61 = point59.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean68 = point64.dominates(point67);
        boolean boolean69 = point59.dominates(point67);
        boolean boolean70 = point53.dominates(point67);
        int int71 = point53.getY();
        int int72 = point53.getY();
        boolean boolean73 = point49.dominates(point53);
        int int74 = point49.getX();
        boolean boolean75 = point11.dominates(point49);
        int int76 = point11.getX();
        int int77 = point11.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test2335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2335");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        boolean boolean21 = point2.dominates(point18);
        int int22 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        int int26 = point25.getX();
        int int27 = point25.getY();
        boolean boolean28 = point18.dominates(point25);
        int int29 = point25.getX();
        int int30 = point25.getY();
        int int31 = point25.getX();
        java.lang.Class<?> wildcardClass32 = point25.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test2336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2336");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        boolean boolean8 = point2.dominates(point5);
        int int9 = point2.getY();
        int int10 = point2.getY();
        int int11 = point2.getX();
        int int12 = point2.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test2337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2337");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        int int15 = point10.getX();
        int int16 = point10.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int20 = point19.getX();
        int int21 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int25 = point24.getX();
        int int26 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        int int35 = point32.getX();
        boolean boolean36 = point24.dominates(point32);
        int int37 = point24.getX();
        int int38 = point24.getX();
        boolean boolean39 = point19.dominates(point24);
        int int40 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int44 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int48 = point47.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        int int56 = point51.getX();
        boolean boolean57 = point47.dominates(point51);
        int int58 = point47.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean65 = point61.dominates(point64);
        int int66 = point64.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean73 = point69.dominates(point72);
        boolean boolean74 = point64.dominates(point72);
        int int75 = point72.getX();
        int int76 = point72.getX();
        boolean boolean77 = point47.dominates(point72);
        boolean boolean78 = point43.dominates(point47);
        boolean boolean79 = point24.dominates(point47);
        int int80 = point47.getX();
        int int81 = point47.getY();
        boolean boolean82 = point10.dominates(point47);
        int int83 = point10.getY();
        java.lang.Class<?> wildcardClass84 = point10.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test2338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2338");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point29.dominates(point37);
        int int40 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int44 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point47.getX();
        boolean boolean53 = point43.dominates(point47);
        boolean boolean54 = point37.dominates(point43);
        boolean boolean55 = point23.dominates(point37);
        boolean boolean56 = point16.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) (short) 10);
        boolean boolean60 = point37.dominates(point59);
        int int61 = point37.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test2339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2339");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int3 = point2.getY();
        int int4 = point2.getX();
        int int5 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int9 = point8.getY();
        boolean boolean10 = point2.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int17 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point20.getX();
        boolean boolean26 = point16.dominates(point20);
        int int27 = point20.getX();
        int int28 = point20.getY();
        int int29 = point20.getY();
        boolean boolean30 = point13.dominates(point20);
        int int31 = point20.getX();
        boolean boolean32 = point2.dominates(point20);
        int int33 = point20.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test2340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2340");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean19 = point8.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        int int28 = point25.getY();
        boolean boolean29 = point8.dominates(point25);
        boolean boolean30 = point2.dominates(point25);
        int int31 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) 10);
        boolean boolean35 = point25.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int39 = point38.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point42.getX();
        boolean boolean48 = point38.dominates(point42);
        int int49 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        int int57 = point55.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean64 = point60.dominates(point63);
        boolean boolean65 = point55.dominates(point63);
        int int66 = point63.getX();
        int int67 = point63.getX();
        boolean boolean68 = point38.dominates(point63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean75 = point71.dominates(point74);
        int int76 = point74.getY();
        int int77 = point74.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean81 = point74.dominates(point80);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point87 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean88 = point84.dominates(point87);
        int int89 = point87.getY();
        int int90 = point87.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point93 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean94 = point87.dominates(point93);
        boolean boolean95 = point74.dominates(point87);
        boolean boolean96 = point38.dominates(point74);
        boolean boolean97 = point25.dominates(point74);
        int int98 = point25.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
    }

    @Test
    public void test2341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2341");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) 'a');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        int int8 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
    }

    @Test
    public void test2342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2342");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        int int14 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean18 = point11.dominates(point17);
        boolean boolean19 = point5.dominates(point17);
        int int20 = point17.getX();
        boolean boolean21 = point2.dominates(point17);
        int int22 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (int) (short) -1);
        int int26 = point25.getX();
        boolean boolean27 = point2.dominates(point25);
        int int28 = point2.getY();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test2343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2343");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int21 = point20.getX();
        int int22 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int26 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point29.getX();
        boolean boolean35 = point25.dominates(point29);
        int int36 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        boolean boolean52 = point42.dominates(point50);
        int int53 = point50.getX();
        int int54 = point50.getX();
        boolean boolean55 = point25.dominates(point50);
        int int56 = point25.getX();
        boolean boolean57 = point20.dominates(point25);
        boolean boolean58 = point15.dominates(point20);
        int int59 = point15.getY();
        java.lang.Class<?> wildcardClass60 = point15.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 32 + "'", int59 == 32);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2344");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 0);
        boolean boolean12 = point6.dominates(point11);
        java.lang.Class<?> wildcardClass13 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2345");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        int int8 = point5.getY();
        boolean boolean9 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int16 = point15.getX();
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int21 = point20.getX();
        boolean boolean22 = point15.dominates(point20);
        boolean boolean23 = point12.dominates(point15);
        boolean boolean24 = point5.dominates(point15);
        int int25 = point5.getY();
        java.lang.Class<?> wildcardClass26 = point5.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test2346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2346");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getX();
        int int6 = point2.getY();
        int int7 = point2.getX();
        int int8 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test2347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2347");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (int) '4');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        boolean boolean7 = point2.dominates(point6);
        int int8 = point6.getX();
        int int9 = point6.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    }

    @Test
    public void test2348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2348");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point18 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList24 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList24, pointArray23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm26.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm15.produceFinalSkyLine(pointList24, pointList27);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm14.produceSubSkyLines(pointList24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.produceFinalSkyLine(pointList29, pointList31);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point42 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList48, pointArray47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm50.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm39.produceFinalSkyLine(pointList48, pointList51);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm39.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point63 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList69, pointArray68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = skylineAlgorithm71.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm60.produceFinalSkyLine(pointList69, pointList72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm39.produceSubSkyLines(pointList69);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm0.produceSubSkyLines(pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass78 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(pointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertNotNull(pointList37);
        org.junit.Assert.assertNotNull(pointList38);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(pointArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertNotNull(pointList54);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(pointArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(pointList72);
        org.junit.Assert.assertNotNull(pointList73);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test2349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2349");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 10);
        boolean boolean6 = point2.dominates(point5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2350");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (-1));
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        int int7 = point6.getX();
        int int8 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean12 = point6.dominates(point11);
        int int13 = point11.getY();
        int int14 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int18 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point21.getX();
        boolean boolean27 = point17.dominates(point21);
        int int28 = point21.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int32 = point31.getX();
        int int33 = point31.getY();
        boolean boolean34 = point21.dominates(point31);
        int int35 = point31.getY();
        boolean boolean36 = point11.dominates(point31);
        boolean boolean37 = point2.dominates(point11);
        java.lang.Class<?> wildcardClass38 = point11.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test2351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2351");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        int int13 = point5.getY();
        int int14 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        int int23 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean27 = point20.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean31 = point20.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        int int40 = point37.getY();
        boolean boolean41 = point20.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean45 = point37.dominates(point44);
        boolean boolean46 = point5.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int50 = point49.getY();
        boolean boolean51 = point44.dominates(point49);
        java.lang.Class<?> wildcardClass52 = point49.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test2352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2352");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        int int17 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int21 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean25 = point20.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        int int33 = point31.getY();
        int int34 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean38 = point31.dominates(point37);
        boolean boolean39 = point20.dominates(point31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int43 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean47 = point42.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        int int55 = point53.getY();
        int int56 = point53.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean60 = point53.dominates(point59);
        boolean boolean61 = point42.dominates(point53);
        boolean boolean62 = point20.dominates(point42);
        boolean boolean63 = point9.dominates(point42);
        int int64 = point9.getX();
        boolean boolean65 = point2.dominates(point9);
        int int66 = point9.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test2353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2353");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        int int14 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean18 = point11.dominates(point17);
        boolean boolean19 = point5.dominates(point17);
        int int20 = point17.getX();
        boolean boolean21 = point2.dominates(point17);
        int int22 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 0);
        boolean boolean29 = point25.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int33 = point32.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        int int41 = point36.getX();
        boolean boolean42 = point32.dominates(point36);
        int int43 = point36.getY();
        boolean boolean44 = point28.dominates(point36);
        boolean boolean45 = point17.dominates(point28);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test2354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2354");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        boolean boolean16 = point11.dominates(point15);
        int int17 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int21 = point20.getX();
        int int22 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int26 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point29.getX();
        boolean boolean35 = point25.dominates(point29);
        int int36 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        boolean boolean52 = point42.dominates(point50);
        int int53 = point50.getX();
        int int54 = point50.getX();
        boolean boolean55 = point25.dominates(point50);
        int int56 = point25.getX();
        boolean boolean57 = point20.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int61 = point60.getX();
        int int62 = point60.getY();
        int int63 = point60.getX();
        boolean boolean64 = point25.dominates(point60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int68 = point67.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean75 = point71.dominates(point74);
        int int76 = point71.getX();
        boolean boolean77 = point67.dominates(point71);
        int int78 = point71.getX();
        int int79 = point71.getY();
        int int80 = point71.getY();
        int int81 = point71.getY();
        boolean boolean82 = point25.dominates(point71);
        int int83 = point71.getY();
        boolean boolean84 = point15.dominates(point71);
        int int85 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point88 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) -1);
        boolean boolean89 = point15.dominates(point88);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test2355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2355");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        int int24 = point21.getY();
        int int25 = point21.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int29 = point28.getX();
        int int30 = point28.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        int int38 = point36.getY();
        int int39 = point36.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean43 = point36.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean47 = point36.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getX();
        int int50 = point46.getX();
        boolean boolean51 = point28.dominates(point46);
        boolean boolean52 = point21.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int56 = point55.getX();
        int int57 = point55.getY();
        int int58 = point55.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int62 = point61.getY();
        boolean boolean63 = point55.dominates(point61);
        int int64 = point61.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (byte) -1);
        int int68 = point67.getX();
        boolean boolean69 = point61.dominates(point67);
        boolean boolean70 = point21.dominates(point61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = point61.dominates(point71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 32 + "'", int48 == 32);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test2356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2356");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int7 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int11 = point10.getY();
        boolean boolean12 = point6.dominates(point10);
        int int13 = point6.getY();
        boolean boolean14 = point2.dominates(point6);
        int int15 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
    }

    @Test
    public void test2357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2357");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (short) 10);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2358");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        boolean boolean24 = point7.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int28 = point27.getX();
        int int29 = point27.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        int int38 = point35.getX();
        boolean boolean39 = point27.dominates(point35);
        boolean boolean40 = point21.dominates(point35);
        boolean boolean41 = point2.dominates(point21);
        int int42 = point2.getX();
        int int43 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) '#');
        int int47 = point46.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        int int58 = point56.getY();
        int int59 = point56.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean63 = point56.dominates(point62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) '4');
        boolean boolean67 = point62.dominates(point66);
        boolean boolean68 = point50.dominates(point62);
        int int69 = point50.getY();
        boolean boolean70 = point46.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        boolean boolean77 = point73.dominates(point76);
        boolean boolean78 = point50.dominates(point76);
        boolean boolean79 = point2.dominates(point76);
        java.lang.Class<?> wildcardClass80 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test2359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2359");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList3 = skylineAlgorithm2.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point7 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList13, pointArray12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm15.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm4.produceFinalSkyLine(pointList13, pointList16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm2.produceFinalSkyLine(pointList17, pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.produceSubSkyLines(pointList32);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point40 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList46, pointArray45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm48.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm37.produceFinalSkyLine(pointList46, pointList49);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm36.produceSubSkyLines(pointList46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point55 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList61, pointArray60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm63.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm52.produceFinalSkyLine(pointList61, pointList64);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm36.produceSubSkyLines(pointList65);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm0.produceSubSkyLines(pointList65);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean79 = point75.dominates(point78);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point75 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList81, pointArray80);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm83.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm72.produceFinalSkyLine(pointList81, pointList84);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm71.produceSubSkyLines(pointList81);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm0.produceSubSkyLines(pointList86);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass90 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(pointList3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(pointArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(pointArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(pointArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertNotNull(pointList69);
        org.junit.Assert.assertNotNull(pointList70);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(pointArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
        org.junit.Assert.assertNotNull(pointList87);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2360");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) ' ');
        int int3 = point2.getY();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 0);
        boolean boolean11 = point7.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        int int19 = point17.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        boolean boolean27 = point17.dominates(point25);
        int int28 = point17.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int32 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point35.getX();
        boolean boolean41 = point31.dominates(point35);
        int int42 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean49 = point45.dominates(point48);
        int int50 = point48.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        boolean boolean58 = point48.dominates(point56);
        int int59 = point56.getX();
        int int60 = point56.getX();
        boolean boolean61 = point31.dominates(point56);
        int int62 = point56.getY();
        boolean boolean63 = point17.dominates(point56);
        int int64 = point56.getY();
        boolean boolean65 = point7.dominates(point56);
        int int66 = point56.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) 'a');
        boolean boolean73 = point69.dominates(point72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) '4');
        boolean boolean77 = point72.dominates(point76);
        boolean boolean78 = point56.dominates(point72);
        boolean boolean79 = point2.dominates(point56);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test2361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2361");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean23 = point16.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean27 = point16.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) '4');
        boolean boolean31 = point16.dominates(point30);
        int int32 = point16.getY();
        int int33 = point16.getX();
        int int34 = point16.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test2362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2362");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) 'a');
        int int3 = point2.getY();
        int int4 = point2.getX();
        int int5 = point2.getY();
        int int6 = point2.getX();
        java.lang.Class<?> wildcardClass7 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2363");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 10);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean18 = point14.dominates(point17);
        boolean boolean19 = point9.dominates(point17);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        boolean boolean27 = point17.dominates(point25);
        int int28 = point25.getY();
        boolean boolean29 = point2.dominates(point25);
        java.lang.Class<?> wildcardClass30 = point25.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test2364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2364");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, 97);
    }

    @Test
    public void test2365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2365");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean23 = point16.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        boolean boolean27 = point16.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        boolean boolean43 = point33.dominates(point41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int47 = point46.getY();
        boolean boolean48 = point33.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        int int59 = point54.getX();
        boolean boolean60 = point51.dominates(point54);
        boolean boolean61 = point46.dominates(point51);
        boolean boolean62 = point26.dominates(point51);
        java.lang.Class<?> wildcardClass63 = point26.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2366");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        int int21 = point16.getY();
        int int22 = point16.getX();
        int int23 = point16.getY();
        int int24 = point16.getX();
        java.lang.Class<?> wildcardClass25 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2367");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        int int23 = point20.getY();
        boolean boolean24 = point6.dominates(point20);
        int int25 = point6.getY();
        boolean boolean26 = point2.dominates(point6);
        int int27 = point2.getY();
        int int28 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int32 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point35.getX();
        boolean boolean41 = point31.dominates(point35);
        int int42 = point35.getY();
        boolean boolean43 = point2.dominates(point35);
        java.lang.Class<?> wildcardClass44 = point35.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test2368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2368");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) ' ');
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test2369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2369");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int9 = point8.getX();
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean14 = point8.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        int int25 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean29 = point22.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int33 = point32.getY();
        boolean boolean34 = point28.dominates(point32);
        int int35 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int39 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point45.getY();
        int int48 = point45.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean52 = point45.dominates(point51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean56 = point45.dominates(point55);
        int int57 = point55.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int61 = point60.getX();
        int int62 = point60.getX();
        int int63 = point60.getX();
        int int64 = point60.getY();
        boolean boolean65 = point55.dominates(point60);
        int int66 = point60.getY();
        boolean boolean67 = point38.dominates(point60);
        int int68 = point60.getY();
        boolean boolean69 = point32.dominates(point60);
        boolean boolean70 = point5.dominates(point32);
        int int71 = point32.getY();
        boolean boolean72 = point2.dominates(point32);
        int int73 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean83 = point79.dominates(point82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) ' ');
        int int87 = point86.getX();
        boolean boolean88 = point82.dominates(point86);
        boolean boolean89 = point76.dominates(point82);
        boolean boolean90 = point32.dominates(point76);
        java.lang.Class<?> wildcardClass91 = point32.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 97 + "'", int71 == 97);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 97 + "'", int73 == 97);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2370");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 52);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point11.getX();
        boolean boolean17 = point7.dominates(point11);
        int int18 = point7.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        boolean boolean34 = point24.dominates(point32);
        int int35 = point32.getX();
        int int36 = point32.getX();
        boolean boolean37 = point7.dominates(point32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        int int45 = point43.getY();
        int int46 = point43.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean50 = point43.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        int int58 = point56.getY();
        int int59 = point56.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean63 = point56.dominates(point62);
        boolean boolean64 = point43.dominates(point56);
        boolean boolean65 = point7.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean69 = point43.dominates(point68);
        int int70 = point68.getY();
        boolean boolean71 = point2.dominates(point68);
        java.lang.Class<?> wildcardClass72 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2371");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getX();
        int int6 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
    }

    @Test
    public void test2372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2372");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, 97);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 0);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        java.lang.Class<?> wildcardClass9 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2373");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) 'a');
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
    }

    @Test
    public void test2374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2374");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        int int22 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean26 = point19.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean30 = point19.dominates(point29);
        int int31 = point19.getY();
        int int32 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean49 = point38.dominates(point48);
        boolean boolean50 = point19.dominates(point38);
        boolean boolean51 = point2.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (byte) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        int int62 = point60.getY();
        int int63 = point60.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean67 = point60.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean71 = point60.dominates(point70);
        boolean boolean72 = point54.dominates(point60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 97);
        int int76 = point75.getX();
        boolean boolean77 = point60.dominates(point75);
        boolean boolean78 = point2.dominates(point75);
        java.lang.Class<?> wildcardClass79 = point75.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 97 + "'", int76 == 97);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2375");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        boolean boolean33 = point16.dominates(point22);
        boolean boolean34 = point2.dominates(point16);
        int int35 = point16.getX();
        int int36 = point16.getY();
        java.lang.Class<?> wildcardClass37 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test2376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2376");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int3 = point2.getY();
        int int4 = point2.getY();
        int int5 = point2.getX();
        int int6 = point2.getY();
        int int7 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
    }

    @Test
    public void test2377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2377");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 10);
        boolean boolean7 = point2.dominates(point6);
        int int8 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point14.getY();
        int int17 = point14.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean21 = point14.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean25 = point14.dominates(point24);
        int int26 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int30 = point29.getX();
        int int31 = point29.getX();
        int int32 = point29.getX();
        int int33 = point29.getY();
        boolean boolean34 = point24.dominates(point29);
        boolean boolean35 = point2.dominates(point29);
        int int36 = point2.getY();
        java.lang.Class<?> wildcardClass37 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test2378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2378");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point33.dominates(point46);
        boolean boolean55 = point19.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int59 = point58.getY();
        int int60 = point58.getX();
        int int61 = point58.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int65 = point64.getY();
        boolean boolean66 = point58.dominates(point64);
        boolean boolean67 = point46.dominates(point58);
        int int68 = point46.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test2379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2379");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) 0);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean13 = point9.dominates(point12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        int int25 = point19.getY();
        int int26 = point19.getX();
        int int27 = point19.getX();
        int int28 = point19.getX();
        boolean boolean29 = point16.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int33 = point32.getX();
        int int34 = point32.getY();
        int int35 = point32.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int39 = point38.getY();
        boolean boolean40 = point32.dominates(point38);
        int int41 = point38.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        int int49 = point47.getY();
        int int50 = point47.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean54 = point47.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        int int62 = point60.getY();
        int int63 = point60.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean67 = point60.dominates(point66);
        boolean boolean68 = point47.dominates(point60);
        boolean boolean69 = point38.dominates(point60);
        int int70 = point38.getY();
        boolean boolean71 = point19.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean81 = point77.dominates(point80);
        int int82 = point77.getX();
        boolean boolean83 = point74.dominates(point77);
        int int84 = point77.getY();
        boolean boolean85 = point19.dominates(point77);
        boolean boolean86 = point12.dominates(point77);
        boolean boolean87 = point6.dominates(point77);
        boolean boolean88 = point2.dominates(point77);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test2380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2380");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point11.getX();
        boolean boolean17 = point7.dominates(point11);
        int int18 = point7.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        boolean boolean34 = point24.dominates(point32);
        int int35 = point32.getX();
        int int36 = point32.getX();
        boolean boolean37 = point7.dominates(point32);
        int int38 = point7.getX();
        boolean boolean39 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, (-1));
        boolean boolean43 = point2.dominates(point42);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test2381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2381");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) (short) 1);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test2382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2382");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int6 = point5.getX();
        int int7 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getX();
        boolean boolean17 = point5.dominates(point13);
        int int18 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int22 = point21.getX();
        int int23 = point21.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        int int32 = point29.getX();
        boolean boolean33 = point21.dominates(point29);
        int int34 = point21.getX();
        int int35 = point21.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int39 = point38.getX();
        int int40 = point38.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getX();
        boolean boolean50 = point38.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean57 = point53.dominates(point56);
        int int58 = point56.getY();
        boolean boolean59 = point46.dominates(point56);
        boolean boolean60 = point21.dominates(point56);
        boolean boolean61 = point5.dominates(point56);
        boolean boolean62 = point2.dominates(point5);
        int int63 = point2.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
    }

    @Test
    public void test2383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2383");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        boolean boolean33 = point16.dominates(point22);
        boolean boolean34 = point2.dominates(point22);
        int int35 = point22.getY();
        int int36 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int40 = point39.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int44 = point43.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int48 = point47.getY();
        boolean boolean49 = point43.dominates(point47);
        int int50 = point43.getY();
        boolean boolean51 = point39.dominates(point43);
        int int52 = point43.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        int int63 = point61.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        boolean boolean71 = point61.dominates(point69);
        boolean boolean72 = point55.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) -1);
        boolean boolean76 = point69.dominates(point75);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        boolean boolean80 = point69.dominates(point79);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 52);
        boolean boolean84 = point79.dominates(point83);
        boolean boolean85 = point43.dominates(point79);
        boolean boolean86 = point22.dominates(point43);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 32 + "'", int48 == 32);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test2384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2384");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getY();
        int int14 = point6.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test2385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2385");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        int int33 = point30.getX();
        int int34 = point30.getX();
        boolean boolean35 = point5.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point41.getY();
        int int44 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean48 = point41.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        int int56 = point54.getY();
        int int57 = point54.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean61 = point54.dominates(point60);
        boolean boolean62 = point41.dominates(point54);
        boolean boolean63 = point5.dominates(point41);
        boolean boolean64 = point2.dominates(point5);
        int int65 = point5.getX();
        int int66 = point5.getX();
        int int67 = point5.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test2386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2386");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point9.getX();
        boolean boolean17 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point9.dominates(point20);
        int int22 = point20.getX();
        int int23 = point20.getY();
        int int24 = point20.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test2387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2387");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int3 = point2.getX();
        int int4 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test2388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2388");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        boolean boolean42 = point32.dominates(point40);
        boolean boolean43 = point26.dominates(point40);
        boolean boolean44 = point21.dominates(point40);
        int int45 = point21.getX();
        int int46 = point21.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        int int54 = point52.getY();
        int int55 = point52.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean59 = point52.dominates(point58);
        boolean boolean60 = point21.dominates(point58);
        int int61 = point21.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
    }

    @Test
    public void test2389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2389");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point20 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList26, pointArray25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm28.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm17.produceFinalSkyLine(pointList26, pointList29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point34 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList40, pointArray39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm42.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm31.produceFinalSkyLine(pointList40, pointList43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point48 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList54, pointArray53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm56.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm45.produceFinalSkyLine(pointList54, pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm17.produceFinalSkyLine(pointList44, pointList54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point63 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList69, pointArray68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = skylineAlgorithm71.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm60.produceFinalSkyLine(pointList69, pointList72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm17.produceSubSkyLines(pointList69);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm0.produceSubSkyLines(pointList69);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(pointArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(pointArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(pointArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(pointArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(pointList72);
        org.junit.Assert.assertNotNull(pointList73);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
    }

    @Test
    public void test2390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2390");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm32.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean60 = point56.dominates(point59);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point56 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList62, pointArray61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm64.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm53.produceFinalSkyLine(pointList62, pointList65);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm32.produceSubSkyLines(pointList62);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm0.produceSubSkyLines(pointList62);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass73 = pointList72.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(pointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertNotNull(pointList69);
        org.junit.Assert.assertNotNull(pointList70);
        org.junit.Assert.assertNotNull(pointList71);
        org.junit.Assert.assertNotNull(pointList72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2391");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        boolean boolean33 = point16.dominates(point22);
        boolean boolean34 = point2.dominates(point16);
        int int35 = point16.getX();
        java.lang.Class<?> wildcardClass36 = point16.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test2392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2392");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int6 = point5.getX();
        boolean boolean7 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int11 = point10.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int15 = point14.getX();
        int int16 = point14.getX();
        int int17 = point14.getX();
        int int18 = point14.getY();
        int int19 = point14.getY();
        boolean boolean20 = point10.dominates(point14);
        int int21 = point14.getY();
        int int22 = point14.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int26 = point25.getY();
        int int27 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int31 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int35 = point34.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point38.getX();
        boolean boolean44 = point34.dominates(point38);
        int int45 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean60 = point56.dominates(point59);
        boolean boolean61 = point51.dominates(point59);
        int int62 = point59.getX();
        int int63 = point59.getX();
        boolean boolean64 = point34.dominates(point59);
        boolean boolean65 = point30.dominates(point34);
        int int66 = point34.getY();
        boolean boolean67 = point25.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int71 = point70.getX();
        int int72 = point70.getY();
        int int73 = point70.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int77 = point76.getY();
        boolean boolean78 = point70.dominates(point76);
        boolean boolean79 = point34.dominates(point76);
        int int80 = point76.getY();
        boolean boolean81 = point14.dominates(point76);
        boolean boolean82 = point2.dominates(point14);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test2393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2393");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 97);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int7 = point6.getX();
        int int8 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int12 = point11.getX();
        boolean boolean13 = point6.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) '#');
        int int17 = point16.getX();
        boolean boolean18 = point11.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2394");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point49 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList55, pointArray54);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm57.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm46.produceFinalSkyLine(pointList55, pointList58);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm46.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean74 = point70.dominates(point73);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point70 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList76, pointArray75);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm78.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList80 = skylineAlgorithm67.produceFinalSkyLine(pointList76, pointList79);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = skylineAlgorithm46.produceSubSkyLines(pointList76);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList82 = skylineAlgorithm0.produceSubSkyLines(pointList81);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList83 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm0.produceSubSkyLines(pointList85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(pointArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(pointArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(pointList80);
        org.junit.Assert.assertNotNull(pointList81);
        org.junit.Assert.assertNotNull(pointList82);
        org.junit.Assert.assertNotNull(pointList83);
        org.junit.Assert.assertNotNull(pointList84);
    }

    @Test
    public void test2395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2395");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int21 = point20.getX();
        int int22 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int26 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point29.getX();
        boolean boolean35 = point25.dominates(point29);
        int int36 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        boolean boolean52 = point42.dominates(point50);
        int int53 = point50.getX();
        int int54 = point50.getX();
        boolean boolean55 = point25.dominates(point50);
        int int56 = point25.getX();
        boolean boolean57 = point20.dominates(point25);
        boolean boolean58 = point15.dominates(point20);
        java.lang.Class<?> wildcardClass59 = point15.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2396");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getY();
        int int17 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int21 = point20.getX();
        int int22 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) '#');
        boolean boolean26 = point20.dominates(point25);
        boolean boolean27 = point13.dominates(point20);
        int int28 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int32 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point35.getX();
        boolean boolean41 = point31.dominates(point35);
        int int42 = point31.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int46 = point45.getX();
        int int47 = point45.getX();
        int int48 = point45.getX();
        boolean boolean49 = point31.dominates(point45);
        int int50 = point31.getX();
        boolean boolean51 = point13.dominates(point31);
        int int52 = point31.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
    }

    @Test
    public void test2397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2397");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean65 = point61.dominates(point64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point61 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList67, pointArray66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = skylineAlgorithm69.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = skylineAlgorithm58.produceFinalSkyLine(pointList67, pointList70);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = skylineAlgorithm57.produceSubSkyLines(pointList67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList74 = skylineAlgorithm73.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm43.produceFinalSkyLine(pointList72, pointList74);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm0.produceSubSkyLines(pointList72);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList78 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList79 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass80 = pointList79.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(pointArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(pointList70);
        org.junit.Assert.assertNotNull(pointList71);
        org.junit.Assert.assertNotNull(pointList72);
        org.junit.Assert.assertNotNull(pointList74);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertNotNull(pointList78);
        org.junit.Assert.assertNotNull(pointList79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test2398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2398");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        int int8 = point5.getY();
        boolean boolean9 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int16 = point15.getX();
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int21 = point20.getX();
        boolean boolean22 = point15.dominates(point20);
        boolean boolean23 = point12.dominates(point15);
        boolean boolean24 = point5.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) '#');
        int int28 = point27.getX();
        boolean boolean29 = point15.dominates(point27);
        int int30 = point15.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test2399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2399");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) 100);
        int int3 = point2.getY();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean17 = point10.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean21 = point10.dominates(point20);
        int int22 = point20.getX();
        int int23 = point20.getY();
        boolean boolean24 = point2.dominates(point20);
        int int25 = point20.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test2400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2400");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point14.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        boolean boolean24 = point14.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int28 = point27.getY();
        boolean boolean29 = point14.dominates(point27);
        int int30 = point27.getX();
        boolean boolean31 = point5.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (byte) 100);
        int int35 = point34.getX();
        int int36 = point34.getX();
        int int37 = point34.getY();
        int int38 = point34.getY();
        int int39 = point34.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int43 = point42.getX();
        int int44 = point42.getY();
        int int45 = point42.getX();
        int int46 = point42.getX();
        int int47 = point42.getY();
        boolean boolean48 = point34.dominates(point42);
        boolean boolean49 = point27.dominates(point42);
        java.lang.Class<?> wildcardClass50 = point42.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test2401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2401");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int9 = point8.getY();
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int14 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point17.getX();
        boolean boolean23 = point13.dominates(point17);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int27 = point26.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point30.getX();
        boolean boolean36 = point26.dominates(point30);
        int int37 = point30.getX();
        boolean boolean38 = point13.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int42 = point41.getX();
        int int43 = point41.getY();
        boolean boolean44 = point13.dominates(point41);
        boolean boolean45 = point8.dominates(point41);
        int int46 = point41.getX();
        int int47 = point41.getY();
        boolean boolean48 = point5.dominates(point41);
        boolean boolean49 = point2.dominates(point5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2402");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 1);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2403");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean12 = point8.dominates(point11);
        int int13 = point11.getY();
        int int14 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean18 = point11.dominates(point17);
        boolean boolean19 = point5.dominates(point17);
        int int20 = point17.getX();
        boolean boolean21 = point2.dominates(point17);
        int int22 = point17.getX();
        java.lang.Class<?> wildcardClass23 = point17.getClass();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test2404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2404");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point2.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int25 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean29 = point24.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        int int38 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean42 = point35.dominates(point41);
        boolean boolean43 = point24.dominates(point35);
        boolean boolean44 = point2.dominates(point24);
        int int45 = point24.getX();
        int int46 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (short) 1);
        boolean boolean50 = point24.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        int int58 = point56.getY();
        int int59 = point56.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean63 = point56.dominates(point62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean67 = point56.dominates(point66);
        int int68 = point56.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int72 = point71.getX();
        boolean boolean73 = point56.dominates(point71);
        int int74 = point71.getX();
        boolean boolean75 = point24.dominates(point71);
        int int76 = point71.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test2405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2405");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) (byte) 0);
        int int3 = point2.getX();
        int int4 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test2406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2406");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (-1));
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) '#');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int14 = point13.getX();
        int int15 = point13.getY();
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int20 = point19.getY();
        boolean boolean21 = point13.dominates(point19);
        int int22 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        int int31 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean35 = point28.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point41.getY();
        int int44 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean48 = point41.dominates(point47);
        boolean boolean49 = point28.dominates(point41);
        boolean boolean50 = point19.dominates(point41);
        int int51 = point19.getY();
        boolean boolean52 = point10.dominates(point19);
        boolean boolean53 = point7.dominates(point19);
        boolean boolean54 = point2.dominates(point19);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test2407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2407");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) '#');
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
    }

    @Test
    public void test2408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2408");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        int int3 = point2.getY();
        int int4 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test2409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2409");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point8.getX();
        int int20 = point8.getY();
        boolean boolean21 = point2.dominates(point8);
        java.lang.Class<?> wildcardClass22 = point8.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test2410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2410");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) ' ');
    }

    @Test
    public void test2411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2411");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getY();
        boolean boolean20 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        boolean boolean39 = point29.dominates(point37);
        int int40 = point37.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int44 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point47.getX();
        boolean boolean53 = point43.dominates(point47);
        boolean boolean54 = point37.dominates(point43);
        boolean boolean55 = point23.dominates(point37);
        boolean boolean56 = point16.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (byte) -1);
        int int60 = point59.getX();
        boolean boolean61 = point16.dominates(point59);
        java.lang.Class<?> wildcardClass62 = point59.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test2412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2412");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) '4');
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int7 = point6.getX();
        int int8 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int12 = point11.getX();
        int int13 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        int int22 = point19.getX();
        boolean boolean23 = point11.dominates(point19);
        int int24 = point11.getX();
        int int25 = point11.getX();
        boolean boolean26 = point6.dominates(point11);
        int int27 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int31 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int35 = point34.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point38.getX();
        boolean boolean44 = point34.dominates(point38);
        int int45 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean60 = point56.dominates(point59);
        boolean boolean61 = point51.dominates(point59);
        int int62 = point59.getX();
        int int63 = point59.getX();
        boolean boolean64 = point34.dominates(point59);
        boolean boolean65 = point30.dominates(point34);
        boolean boolean66 = point11.dominates(point34);
        int int67 = point34.getX();
        boolean boolean68 = point2.dominates(point34);
        int int69 = point2.getY();
        java.lang.Class<?> wildcardClass70 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2413");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int3 = point2.getY();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point11.getX();
        boolean boolean17 = point7.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int21 = point20.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        int int29 = point24.getX();
        boolean boolean30 = point20.dominates(point24);
        int int31 = point24.getX();
        boolean boolean32 = point7.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int36 = point35.getX();
        int int37 = point35.getY();
        boolean boolean38 = point7.dominates(point35);
        boolean boolean39 = point2.dominates(point35);
        int int40 = point2.getX();
        int int41 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int45 = point44.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int49 = point48.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        int int57 = point52.getX();
        boolean boolean58 = point48.dominates(point52);
        int int59 = point52.getX();
        boolean boolean60 = point44.dominates(point52);
        boolean boolean61 = point2.dominates(point52);
        java.lang.Class<?> wildcardClass62 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 32 + "'", int45 == 32);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test2414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2414");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        int int6 = point5.getY();
        boolean boolean7 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 0);
        int int11 = point10.getY();
        int int12 = point10.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (int) (byte) -1);
        boolean boolean16 = point10.dominates(point15);
        boolean boolean17 = point2.dominates(point15);
        int int18 = point15.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test2415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2415");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = point2.dominates(point3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2416");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (byte) 0);
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test2417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2417");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 10);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int7 = point6.getX();
        int int8 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point14.getY();
        int int17 = point14.getX();
        boolean boolean18 = point6.dominates(point14);
        int int19 = point6.getY();
        int int20 = point6.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int24 = point23.getY();
        int int25 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 35);
        boolean boolean29 = point23.dominates(point28);
        boolean boolean30 = point6.dominates(point28);
        boolean boolean31 = point2.dominates(point28);
        int int32 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) 0);
        int int36 = point35.getX();
        int int37 = point35.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) '4');
        boolean boolean41 = point35.dominates(point40);
        boolean boolean42 = point2.dominates(point40);
        java.lang.Class<?> wildcardClass43 = point40.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test2418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2418");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        int int9 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) '4');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int16 = point15.getY();
        boolean boolean17 = point12.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int24 = point23.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point27.getX();
        boolean boolean33 = point23.dominates(point27);
        int int34 = point27.getX();
        boolean boolean35 = point20.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point27.dominates(point38);
        boolean boolean40 = point15.dominates(point27);
        boolean boolean41 = point5.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) -1);
        boolean boolean48 = point44.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int52 = point51.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int56 = point55.getY();
        boolean boolean57 = point51.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean64 = point60.dominates(point63);
        int int65 = point63.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean72 = point68.dominates(point71);
        boolean boolean73 = point63.dominates(point71);
        int int74 = point71.getY();
        int int75 = point71.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int79 = point78.getX();
        int int80 = point78.getX();
        int int81 = point78.getX();
        int int82 = point78.getX();
        int int83 = point78.getY();
        boolean boolean84 = point71.dominates(point78);
        boolean boolean85 = point51.dominates(point78);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point88 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point91 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean92 = point88.dominates(point91);
        int int93 = point91.getY();
        boolean boolean94 = point51.dominates(point91);
        int int95 = point51.getY();
        boolean boolean96 = point44.dominates(point51);
        boolean boolean97 = point5.dominates(point44);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 97 + "'", int93 == 97);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 52 + "'", int95 == 52);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test2419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2419");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
    }

    @Test
    public void test2420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2420");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        int int13 = point5.getY();
        int int14 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        int int23 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean27 = point20.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean31 = point20.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean38 = point34.dominates(point37);
        int int39 = point37.getY();
        int int40 = point37.getY();
        boolean boolean41 = point20.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean45 = point37.dominates(point44);
        boolean boolean46 = point5.dominates(point44);
        int int47 = point44.getY();
        int int48 = point44.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test2421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2421");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int6 = point5.getY();
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int15 = point14.getX();
        int int16 = point14.getX();
        int int17 = point14.getY();
        int int18 = point14.getY();
        int int19 = point14.getX();
        int int20 = point14.getX();
        boolean boolean21 = point11.dominates(point14);
        boolean boolean22 = point5.dominates(point14);
        boolean boolean23 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        boolean boolean42 = point32.dominates(point40);
        int int43 = point40.getY();
        int int44 = point40.getY();
        boolean boolean45 = point26.dominates(point40);
        boolean boolean46 = point5.dominates(point26);
        java.lang.Class<?> wildcardClass47 = point26.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test2422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2422");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getX();
        int int8 = point5.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test2423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2423");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (int) (short) -1);
        boolean boolean17 = point6.dominates(point16);
        int int18 = point6.getX();
        int int19 = point6.getX();
        java.lang.Class<?> wildcardClass20 = point6.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2424");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point32 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList38 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList38, pointArray37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm40.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm29.produceFinalSkyLine(pointList38, pointList41);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList43 = skylineAlgorithm28.produceSubSkyLines(pointList38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point47 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList53, pointArray52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm55.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm44.produceFinalSkyLine(pointList53, pointList56);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm28.produceSubSkyLines(pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm0.produceFinalSkyLine(pointList23, pointList57);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(pointArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertNotNull(pointList43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(pointArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
    }

    @Test
    public void test2425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2425");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int17 = point16.getX();
        int int18 = point16.getX();
        int int19 = point16.getX();
        boolean boolean20 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, 1);
        int int24 = point23.getX();
        boolean boolean25 = point16.dominates(point23);
        int int26 = point23.getX();
        int int27 = point23.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test2426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2426");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        int int15 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int19 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point22.getX();
        boolean boolean28 = point18.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int32 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point35.getX();
        boolean boolean41 = point31.dominates(point35);
        int int42 = point35.getX();
        boolean boolean43 = point18.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int47 = point46.getX();
        int int48 = point46.getY();
        boolean boolean49 = point18.dominates(point46);
        boolean boolean50 = point12.dominates(point46);
        boolean boolean51 = point6.dominates(point46);
        boolean boolean52 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        int int61 = point58.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean65 = point58.dominates(point64);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int69 = point68.getY();
        boolean boolean70 = point64.dominates(point68);
        boolean boolean71 = point2.dominates(point64);
        int int72 = point2.getX();
        int int73 = point2.getY();
        java.lang.Class<?> wildcardClass74 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2427");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) (short) 10);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getY();
        java.lang.Class<?> wildcardClass6 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2428");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        int int33 = point27.getX();
        int int34 = point27.getX();
        int int35 = point27.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int39 = point38.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point42.getX();
        boolean boolean48 = point38.dominates(point42);
        int int49 = point42.getX();
        int int50 = point42.getY();
        int int51 = point42.getY();
        int int52 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (short) 100);
        int int56 = point55.getX();
        boolean boolean57 = point42.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean64 = point60.dominates(point63);
        boolean boolean65 = point55.dominates(point63);
        boolean boolean66 = point27.dominates(point55);
        int int67 = point55.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test2429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2429");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (short) -1);
        int int6 = point5.getY();
        boolean boolean7 = point2.dominates(point5);
        int int8 = point5.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test2430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2430");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean19 = point8.dominates(point18);
        int int20 = point18.getX();
        boolean boolean21 = point2.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int25 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean29 = point24.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        int int38 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean42 = point35.dominates(point41);
        boolean boolean43 = point24.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int47 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean51 = point46.dominates(point50);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        int int59 = point57.getY();
        int int60 = point57.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean64 = point57.dominates(point63);
        boolean boolean65 = point46.dominates(point57);
        boolean boolean66 = point24.dominates(point46);
        boolean boolean67 = point2.dominates(point24);
        int int68 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (byte) -1);
        boolean boolean75 = point71.dominates(point74);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, 10);
        boolean boolean79 = point74.dominates(point78);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int83 = point82.getX();
        boolean boolean84 = point74.dominates(point82);
        int int85 = point74.getY();
        boolean boolean86 = point2.dominates(point74);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test2431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2431");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, 0);
        int int3 = point2.getY();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2432");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point17 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList23 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList23, pointArray22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList26 = skylineAlgorithm25.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = skylineAlgorithm14.produceFinalSkyLine(pointList23, pointList26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean35 = point31.dominates(point34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point31 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList37 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList37, pointArray36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList40 = skylineAlgorithm39.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = skylineAlgorithm28.produceFinalSkyLine(pointList37, pointList40);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = skylineAlgorithm0.produceFinalSkyLine(pointList27, pointList37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point46 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList52, pointArray51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm54.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm43.produceFinalSkyLine(pointList52, pointList55);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm0.produceSubSkyLines(pointList52);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass59 = pointList58.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(pointArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pointList26);
        org.junit.Assert.assertNotNull(pointList27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(pointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(pointList40);
        org.junit.Assert.assertNotNull(pointList41);
        org.junit.Assert.assertNotNull(pointList42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(pointArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2433");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList3 = skylineAlgorithm2.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point7 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList13, pointArray12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm15.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm4.produceFinalSkyLine(pointList13, pointList16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm2.produceFinalSkyLine(pointList17, pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.produceSubSkyLines(pointList32);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point40 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList46, pointArray45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm48.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm37.produceFinalSkyLine(pointList46, pointList49);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm36.produceSubSkyLines(pointList46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point55 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList61, pointArray60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm63.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm52.produceFinalSkyLine(pointList61, pointList64);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm36.produceSubSkyLines(pointList65);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm0.produceSubSkyLines(pointList65);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean79 = point75.dominates(point78);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray80 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point75 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList81 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList81, pointArray80);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = skylineAlgorithm83.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList85 = skylineAlgorithm72.produceFinalSkyLine(pointList81, pointList84);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList86 = skylineAlgorithm71.produceSubSkyLines(pointList81);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm0.produceSubSkyLines(pointList86);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass89 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(pointList3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(pointArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(pointArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(pointArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertNotNull(pointList69);
        org.junit.Assert.assertNotNull(pointList70);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(pointArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(pointList84);
        org.junit.Assert.assertNotNull(pointList85);
        org.junit.Assert.assertNotNull(pointList86);
        org.junit.Assert.assertNotNull(pointList87);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2434");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) -1);
        boolean boolean18 = point2.dominates(point17);
        int int19 = point2.getX();
        int int20 = point2.getY();
        int int21 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test2435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2435");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int19 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point22.getX();
        boolean boolean28 = point18.dominates(point22);
        int int29 = point22.getX();
        boolean boolean30 = point5.dominates(point22);
        int int31 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) -1);
        int int35 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int39 = point38.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int43 = point42.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        int int51 = point46.getX();
        boolean boolean52 = point42.dominates(point46);
        int int53 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean60 = point56.dominates(point59);
        int int61 = point59.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean68 = point64.dominates(point67);
        boolean boolean69 = point59.dominates(point67);
        int int70 = point67.getX();
        int int71 = point67.getX();
        boolean boolean72 = point42.dominates(point67);
        boolean boolean73 = point38.dominates(point42);
        int int74 = point38.getY();
        int int75 = point38.getY();
        int int76 = point38.getY();
        boolean boolean77 = point34.dominates(point38);
        boolean boolean78 = point5.dominates(point34);
        boolean boolean79 = point2.dominates(point5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test2436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2436");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean8 = point2.dominates(point7);
        int int9 = point7.getY();
        int int10 = point7.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        int int18 = point13.getX();
        int int19 = point13.getY();
        int int20 = point13.getY();
        boolean boolean21 = point7.dominates(point13);
        int int22 = point13.getX();
        int int23 = point13.getX();
        int int24 = point13.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test2437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2437");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point35 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList41 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList41, pointArray40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = skylineAlgorithm43.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm32.produceFinalSkyLine(pointList41, pointList44);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm31.produceSubSkyLines(pointList41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point50 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList56, pointArray55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm58.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList60 = skylineAlgorithm47.produceFinalSkyLine(pointList56, pointList59);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm31.produceSubSkyLines(pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm0.produceSubSkyLines(pointList60);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(pointArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(pointList44);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(pointArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertNotNull(pointList60);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertNotNull(pointList63);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertNotNull(pointList69);
    }

    @Test
    public void test2438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2438");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (byte) 10);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = point2.dominates(point8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test2439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2439");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm17.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point22 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList28, pointArray27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm30.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm19.produceFinalSkyLine(pointList28, pointList31);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point36 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList42, pointArray41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm44.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm33.produceFinalSkyLine(pointList42, pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm17.produceFinalSkyLine(pointList32, pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm0.produceSubSkyLines(pointList47);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList53 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(pointArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(pointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList53);
        org.junit.Assert.assertNotNull(pointList54);
        org.junit.Assert.assertNotNull(pointList55);
    }

    @Test
    public void test2440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2440");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) ' ');
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test2441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2441");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList2 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList3 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList4 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList5 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList7 = skylineAlgorithm6.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point11 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList17, pointArray16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm19.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList21 = skylineAlgorithm8.produceFinalSkyLine(pointList17, pointList20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point25 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList31, pointArray30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm22.produceFinalSkyLine(pointList31, pointList34);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList36 = skylineAlgorithm6.produceFinalSkyLine(pointList21, pointList34);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point41 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList47, pointArray46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm49.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm38.produceFinalSkyLine(pointList47, pointList50);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm37.produceSubSkyLines(pointList47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList54 = skylineAlgorithm53.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList55 = skylineAlgorithm53.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList56 = skylineAlgorithm53.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList57 = skylineAlgorithm6.produceFinalSkyLine(pointList47, pointList56);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = skylineAlgorithm6.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList59 = skylineAlgorithm6.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point63 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList69, pointArray68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = skylineAlgorithm71.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList73 = skylineAlgorithm60.produceFinalSkyLine(pointList69, pointList72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean82 = point78.dominates(point81);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point78 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList84 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList84, pointArray83);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = skylineAlgorithm86.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList88 = skylineAlgorithm75.produceFinalSkyLine(pointList84, pointList87);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList89 = skylineAlgorithm74.produceSubSkyLines(pointList84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm90 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm90.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm60.produceFinalSkyLine(pointList89, pointList91);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm0.produceFinalSkyLine(pointList59, pointList89);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(pointList2);
        org.junit.Assert.assertNotNull(pointList3);
        org.junit.Assert.assertNotNull(pointList4);
        org.junit.Assert.assertNotNull(pointList5);
        org.junit.Assert.assertNotNull(pointList7);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(pointArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertNotNull(pointList21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(pointArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertNotNull(pointList36);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(pointArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertNotNull(pointList54);
        org.junit.Assert.assertNotNull(pointList55);
        org.junit.Assert.assertNotNull(pointList56);
        org.junit.Assert.assertNotNull(pointList57);
        org.junit.Assert.assertNotNull(pointList58);
        org.junit.Assert.assertNotNull(pointList59);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(pointArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(pointList72);
        org.junit.Assert.assertNotNull(pointList73);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(pointArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(pointList87);
        org.junit.Assert.assertNotNull(pointList88);
        org.junit.Assert.assertNotNull(pointList89);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
    }

    @Test
    public void test2442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2442");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point8.getX();
        int int20 = point8.getY();
        boolean boolean21 = point2.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        int int32 = point30.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        boolean boolean40 = point30.dominates(point38);
        int int41 = point38.getY();
        boolean boolean42 = point24.dominates(point38);
        int int43 = point24.getY();
        boolean boolean44 = point2.dominates(point24);
        int int45 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        boolean boolean52 = point48.dominates(point51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int59 = point58.getY();
        int int60 = point58.getY();
        int int61 = point58.getX();
        boolean boolean62 = point55.dominates(point58);
        boolean boolean63 = point51.dominates(point55);
        int int64 = point51.getX();
        boolean boolean65 = point2.dominates(point51);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test2443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2443");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean19 = point8.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        int int28 = point25.getY();
        boolean boolean29 = point8.dominates(point25);
        boolean boolean30 = point2.dominates(point25);
        int int31 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (byte) -1);
        int int35 = point34.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        int int46 = point44.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        boolean boolean54 = point44.dominates(point52);
        boolean boolean55 = point38.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int59 = point58.getX();
        int int60 = point58.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean67 = point63.dominates(point66);
        int int68 = point66.getY();
        int int69 = point66.getX();
        boolean boolean70 = point58.dominates(point66);
        boolean boolean71 = point52.dominates(point66);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int75 = point74.getX();
        boolean boolean76 = point66.dominates(point74);
        boolean boolean77 = point34.dominates(point66);
        int int78 = point66.getX();
        boolean boolean79 = point25.dominates(point66);
        int int80 = point25.getY();
        int int81 = point25.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test2444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2444");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, 10);
        int int3 = point2.getY();
        java.lang.Class<?> wildcardClass4 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2445");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        int int33 = point30.getX();
        int int34 = point30.getX();
        boolean boolean35 = point5.dominates(point30);
        int int36 = point30.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int40 = point39.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point43.getX();
        boolean boolean49 = point39.dominates(point43);
        int int50 = point39.getY();
        boolean boolean51 = point30.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 32);
        boolean boolean55 = point39.dominates(point54);
        boolean boolean56 = point2.dominates(point54);
        int int57 = point54.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
    }

    @Test
    public void test2446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2446");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        int int33 = point27.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int37 = point36.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        int int45 = point40.getX();
        boolean boolean46 = point36.dominates(point40);
        int int47 = point36.getY();
        boolean boolean48 = point27.dominates(point36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', 32);
        boolean boolean52 = point36.dominates(point51);
        int int53 = point36.getY();
        int int54 = point36.getX();
        int int55 = point36.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test2447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2447");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getY();
        java.lang.Class<?> wildcardClass8 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2448");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean15 = point8.dominates(point14);
        boolean boolean16 = point2.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        boolean boolean35 = point25.dominates(point33);
        int int36 = point33.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int40 = point39.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point43.getX();
        boolean boolean49 = point39.dominates(point43);
        boolean boolean50 = point33.dominates(point39);
        boolean boolean51 = point19.dominates(point33);
        boolean boolean52 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) '4');
        int int56 = point55.getY();
        boolean boolean57 = point2.dominates(point55);
        int int58 = point55.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test2449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2449");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int6 = point5.getX();
        int int7 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int11 = point10.getX();
        boolean boolean12 = point5.dominates(point10);
        boolean boolean13 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int17 = point16.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean21 = point16.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        int int29 = point27.getY();
        int int30 = point27.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean34 = point27.dominates(point33);
        boolean boolean35 = point16.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int39 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean43 = point38.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean50 = point46.dominates(point49);
        int int51 = point49.getY();
        int int52 = point49.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean56 = point49.dominates(point55);
        boolean boolean57 = point38.dominates(point49);
        boolean boolean58 = point16.dominates(point38);
        int int59 = point38.getY();
        boolean boolean60 = point2.dominates(point38);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2450");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(10, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean15 = point8.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean19 = point8.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        int int28 = point25.getY();
        boolean boolean29 = point8.dominates(point25);
        boolean boolean30 = point2.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean37 = point33.dominates(point36);
        int int38 = point36.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean45 = point41.dominates(point44);
        boolean boolean46 = point36.dominates(point44);
        int int47 = point44.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int51 = point50.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean58 = point54.dominates(point57);
        int int59 = point54.getX();
        boolean boolean60 = point50.dominates(point54);
        boolean boolean61 = point44.dominates(point50);
        int int62 = point50.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean69 = point65.dominates(point68);
        int int70 = point68.getY();
        int int71 = point68.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean75 = point68.dominates(point74);
        boolean boolean76 = point50.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 10);
        boolean boolean80 = point68.dominates(point79);
        int int81 = point68.getY();
        boolean boolean82 = point2.dominates(point68);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = point2.dominates(point83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test2451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2451");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int9 = point8.getX();
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean14 = point8.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        int int25 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean29 = point22.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) 'a');
        int int33 = point32.getY();
        boolean boolean34 = point28.dominates(point32);
        int int35 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, (int) (byte) 0);
        int int39 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point45.getY();
        int int48 = point45.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean52 = point45.dominates(point51);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean56 = point45.dominates(point55);
        int int57 = point55.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int61 = point60.getX();
        int int62 = point60.getX();
        int int63 = point60.getX();
        int int64 = point60.getY();
        boolean boolean65 = point55.dominates(point60);
        int int66 = point60.getY();
        boolean boolean67 = point38.dominates(point60);
        int int68 = point60.getY();
        boolean boolean69 = point32.dominates(point60);
        boolean boolean70 = point5.dominates(point32);
        int int71 = point32.getY();
        boolean boolean72 = point2.dominates(point32);
        int int73 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), 52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean83 = point79.dominates(point82);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) ' ');
        int int87 = point86.getX();
        boolean boolean88 = point82.dominates(point86);
        boolean boolean89 = point76.dominates(point82);
        boolean boolean90 = point32.dominates(point76);
        java.lang.Class<?> wildcardClass91 = point76.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 97 + "'", int71 == 97);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 97 + "'", int73 == 97);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2452");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 32);
        int int3 = point2.getY();
        int int4 = point2.getY();
        int int5 = point2.getY();
        java.lang.Class<?> wildcardClass6 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2453");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point5 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList11 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList11, pointArray10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm13.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm2.produceFinalSkyLine(pointList11, pointList14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point19 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList25 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList25, pointArray24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList28 = skylineAlgorithm27.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList29 = skylineAlgorithm16.produceFinalSkyLine(pointList25, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm0.produceFinalSkyLine(pointList15, pointList28);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point36 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList42 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList42, pointArray41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList45 = skylineAlgorithm44.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = skylineAlgorithm33.produceFinalSkyLine(pointList42, pointList45);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm33.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList52 = skylineAlgorithm33.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean61 = point57.dominates(point60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point57 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList63 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList63, pointArray62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm65 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm65.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm54.produceFinalSkyLine(pointList63, pointList66);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList68 = skylineAlgorithm53.produceSubSkyLines(pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList69 = skylineAlgorithm33.produceSubSkyLines(pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList70 = skylineAlgorithm0.produceSubSkyLines(pointList63);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList71 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = skylineAlgorithm0.getPoints();
        java.lang.Class<?> wildcardClass73 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pointArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(pointList28);
        org.junit.Assert.assertNotNull(pointList29);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(pointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(pointList45);
        org.junit.Assert.assertNotNull(pointList46);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertNotNull(pointList52);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(pointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(pointList68);
        org.junit.Assert.assertNotNull(pointList69);
        org.junit.Assert.assertNotNull(pointList70);
        org.junit.Assert.assertNotNull(pointList71);
        org.junit.Assert.assertNotNull(pointList72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2454");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point6.getX();
        int int14 = point6.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int18 = point17.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean22 = point17.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        int int30 = point28.getY();
        int int31 = point28.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point34 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean35 = point28.dominates(point34);
        boolean boolean36 = point17.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int40 = point39.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean44 = point39.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean51 = point47.dominates(point50);
        int int52 = point50.getY();
        int int53 = point50.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean57 = point50.dominates(point56);
        boolean boolean58 = point39.dominates(point50);
        boolean boolean59 = point17.dominates(point39);
        boolean boolean60 = point6.dominates(point39);
        int int61 = point39.getX();
        int int62 = point39.getY();
        int int63 = point39.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test2455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2455");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        int int11 = point8.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean15 = point8.dominates(point14);
        boolean boolean16 = point2.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        boolean boolean35 = point25.dominates(point33);
        int int36 = point33.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int40 = point39.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point43.getX();
        boolean boolean49 = point39.dominates(point43);
        boolean boolean50 = point33.dominates(point39);
        boolean boolean51 = point19.dominates(point33);
        boolean boolean52 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) '4');
        int int56 = point55.getY();
        boolean boolean57 = point2.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int64 = point63.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean68 = point63.dominates(point67);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point77 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean78 = point74.dominates(point77);
        int int79 = point77.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point85 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean86 = point82.dominates(point85);
        boolean boolean87 = point77.dominates(point85);
        boolean boolean88 = point71.dominates(point85);
        int int89 = point71.getY();
        boolean boolean90 = point67.dominates(point71);
        boolean boolean91 = point60.dominates(point71);
        boolean boolean92 = point2.dominates(point60);
        int int93 = point2.getY();
        int int94 = point2.getX();
        java.lang.Class<?> wildcardClass95 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 35 + "'", int93 == 35);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 97 + "'", int94 == 97);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2456");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int16 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point19.getX();
        boolean boolean25 = point15.dominates(point19);
        int int26 = point19.getX();
        boolean boolean27 = point2.dominates(point19);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean40 = point33.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean47 = point43.dominates(point46);
        int int48 = point46.getY();
        int int49 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean53 = point46.dominates(point52);
        boolean boolean54 = point33.dominates(point46);
        boolean boolean55 = point19.dominates(point46);
        int int56 = point46.getY();
        int int57 = point46.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int61 = point60.getY();
        int int62 = point60.getY();
        int int63 = point60.getY();
        boolean boolean64 = point46.dominates(point60);
        int int65 = point60.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point68 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        int int69 = point68.getX();
        int int70 = point68.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point73 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean74 = point68.dominates(point73);
        int int75 = point73.getY();
        int int76 = point73.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point79 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean83 = point79.dominates(point82);
        int int84 = point79.getX();
        int int85 = point79.getY();
        int int86 = point79.getY();
        boolean boolean87 = point73.dominates(point79);
        boolean boolean88 = point60.dominates(point79);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test2457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2457");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        boolean boolean23 = point6.dominates(point20);
        int int24 = point6.getY();
        int int25 = point6.getY();
        boolean boolean26 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        int int35 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean39 = point32.dominates(point38);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean43 = point32.dominates(point42);
        int int44 = point42.getX();
        int int45 = point42.getY();
        int int46 = point42.getY();
        boolean boolean47 = point2.dominates(point42);
        int int48 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 32 + "'", int45 == 32);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 32 + "'", int46 == 32);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test2458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2458");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(35, 0);
        boolean boolean11 = point2.dominates(point10);
        int int12 = point2.getY();
        java.lang.Class<?> wildcardClass13 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2459");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, 32);
        int int3 = point2.getX();
        int int4 = point2.getY();
        int int5 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
    }

    @Test
    public void test2460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2460");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, 0);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        int int15 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean19 = point12.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean23 = point12.dominates(point22);
        int int24 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point12.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int36 = point35.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean43 = point39.dominates(point42);
        int int44 = point39.getX();
        boolean boolean45 = point35.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int49 = point48.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        int int57 = point52.getX();
        boolean boolean58 = point48.dominates(point52);
        int int59 = point52.getX();
        boolean boolean60 = point35.dominates(point52);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int64 = point63.getX();
        int int65 = point63.getY();
        boolean boolean66 = point35.dominates(point63);
        boolean boolean67 = point12.dominates(point35);
        int int68 = point12.getY();
        boolean boolean69 = point5.dominates(point12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) '4');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int76 = point75.getX();
        int int77 = point75.getX();
        int int78 = point75.getX();
        int int79 = point75.getY();
        boolean boolean80 = point72.dominates(point75);
        boolean boolean81 = point5.dominates(point72);
        int int82 = point72.getY();
        java.lang.Class<?> wildcardClass83 = point72.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 52 + "'", int82 == 52);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2461");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 52);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        int int18 = point15.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test2462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2462");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) '4');
        int int3 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test2463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2463");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (-1));
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int8 = point7.getX();
        int int9 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getX();
        boolean boolean19 = point7.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point25.getY();
        boolean boolean28 = point15.dominates(point25);
        int int29 = point25.getY();
        int int30 = point25.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int34 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean38 = point33.dominates(point37);
        boolean boolean39 = point25.dominates(point37);
        boolean boolean40 = point2.dominates(point37);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2464");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (byte) 10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        boolean boolean33 = point16.dominates(point22);
        int int34 = point16.getX();
        int int35 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int39 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean43 = point38.dominates(point42);
        boolean boolean44 = point16.dominates(point38);
        boolean boolean45 = point2.dominates(point16);
        int int46 = point16.getX();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test2465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2465");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point9.getX();
        boolean boolean15 = point5.dominates(point9);
        int int16 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean31 = point27.dominates(point30);
        boolean boolean32 = point22.dominates(point30);
        int int33 = point30.getX();
        int int34 = point30.getX();
        boolean boolean35 = point5.dominates(point30);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        int int43 = point41.getY();
        int int44 = point41.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean48 = point41.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        int int56 = point54.getY();
        int int57 = point54.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean61 = point54.dominates(point60);
        boolean boolean62 = point41.dominates(point54);
        boolean boolean63 = point5.dominates(point41);
        boolean boolean64 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point70 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean71 = point67.dominates(point70);
        int int72 = point70.getY();
        int int73 = point70.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point76 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean77 = point70.dominates(point76);
        boolean boolean78 = point5.dominates(point76);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) '4');
        boolean boolean82 = point5.dominates(point81);
        int int83 = point5.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test2466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2466");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getX();
        int int4 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int8 = point7.getX();
        int int9 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int13 = point12.getX();
        boolean boolean14 = point7.dominates(point12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int18 = point17.getY();
        boolean boolean19 = point12.dominates(point17);
        int int20 = point12.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        int int32 = point29.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean36 = point29.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean40 = point29.dominates(point39);
        int int41 = point39.getX();
        boolean boolean42 = point23.dominates(point39);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean52 = point48.dominates(point51);
        int int53 = point51.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point59 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean60 = point56.dominates(point59);
        boolean boolean61 = point51.dominates(point59);
        int int62 = point59.getY();
        boolean boolean63 = point45.dominates(point59);
        int int64 = point59.getY();
        boolean boolean65 = point23.dominates(point59);
        boolean boolean66 = point12.dominates(point59);
        boolean boolean67 = point2.dominates(point59);
        java.lang.Class<?> wildcardClass68 = point59.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2467");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 10, 52);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test2468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2468");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = point2.dominates(point3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2469");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point2.getX();
        int int8 = point2.getY();
        int int9 = point2.getX();
        int int10 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int14 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean24 = point20.dominates(point23);
        int int25 = point23.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean32 = point28.dominates(point31);
        boolean boolean33 = point23.dominates(point31);
        boolean boolean34 = point17.dominates(point31);
        int int35 = point17.getY();
        int int36 = point17.getY();
        boolean boolean37 = point13.dominates(point17);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        int int45 = point43.getY();
        int int46 = point43.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean50 = point43.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean54 = point43.dominates(point53);
        int int55 = point53.getX();
        int int56 = point53.getY();
        int int57 = point53.getY();
        boolean boolean58 = point13.dominates(point53);
        boolean boolean59 = point2.dominates(point53);
        java.lang.Class<?> wildcardClass60 = point2.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 32 + "'", int56 == 32);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 32 + "'", int57 == 32);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2470");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) '#');
        boolean boolean10 = point2.dominates(point9);
        int int11 = point9.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
    }

    @Test
    public void test2471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2471");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        int int12 = point10.getY();
        int int13 = point10.getX();
        boolean boolean14 = point2.dominates(point10);
        int int15 = point10.getX();
        int int16 = point10.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int20 = point19.getX();
        int int21 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int25 = point24.getX();
        int int26 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        int int35 = point32.getX();
        boolean boolean36 = point24.dominates(point32);
        int int37 = point24.getX();
        int int38 = point24.getX();
        boolean boolean39 = point19.dominates(point24);
        int int40 = point24.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int44 = point43.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int48 = point47.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        int int56 = point51.getX();
        boolean boolean57 = point47.dominates(point51);
        int int58 = point47.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean65 = point61.dominates(point64);
        int int66 = point64.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean73 = point69.dominates(point72);
        boolean boolean74 = point64.dominates(point72);
        int int75 = point72.getX();
        int int76 = point72.getX();
        boolean boolean77 = point47.dominates(point72);
        boolean boolean78 = point43.dominates(point47);
        boolean boolean79 = point24.dominates(point47);
        int int80 = point47.getX();
        int int81 = point47.getY();
        boolean boolean82 = point10.dominates(point47);
        int int83 = point10.getY();
        int int84 = point10.getX();
        int int85 = point10.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
    }

    @Test
    public void test2472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2472");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (-1));
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, (-1));
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int10 = point9.getY();
        int int11 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int15 = point14.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int19 = point18.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean26 = point22.dominates(point25);
        int int27 = point22.getX();
        boolean boolean28 = point18.dominates(point22);
        int int29 = point18.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        boolean boolean45 = point35.dominates(point43);
        int int46 = point43.getX();
        int int47 = point43.getX();
        boolean boolean48 = point18.dominates(point43);
        boolean boolean49 = point14.dominates(point18);
        int int50 = point18.getY();
        boolean boolean51 = point9.dominates(point18);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int55 = point54.getX();
        int int56 = point54.getY();
        int int57 = point54.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int61 = point60.getY();
        boolean boolean62 = point54.dominates(point60);
        boolean boolean63 = point18.dominates(point60);
        int int64 = point18.getX();
        boolean boolean65 = point5.dominates(point18);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test2473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2473");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (byte) 10);
        int int3 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test2474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2474");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        int int4 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int8 = point7.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point11.getX();
        boolean boolean17 = point7.dominates(point11);
        int int18 = point7.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        int int26 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        boolean boolean34 = point24.dominates(point32);
        int int35 = point32.getX();
        int int36 = point32.getX();
        boolean boolean37 = point7.dominates(point32);
        int int38 = point7.getX();
        boolean boolean39 = point2.dominates(point7);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int43 = point42.getX();
        int int44 = point42.getY();
        int int45 = point42.getX();
        boolean boolean46 = point7.dominates(point42);
        int int47 = point7.getY();
        int int48 = point7.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test2475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2475");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, 97);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        int int6 = point5.getY();
        boolean boolean7 = point2.dominates(point5);
        int int8 = point5.getX();
        int int9 = point5.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test2476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2476");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 100, (int) (short) 10);
        int int3 = point2.getY();
        int int4 = point2.getX();
        int int5 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
    }

    @Test
    public void test2477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2477");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) '#');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        int int7 = point5.getY();
        int int8 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int12 = point11.getY();
        boolean boolean13 = point5.dominates(point11);
        int int14 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        int int23 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean27 = point20.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean40 = point33.dominates(point39);
        boolean boolean41 = point20.dominates(point33);
        boolean boolean42 = point11.dominates(point33);
        int int43 = point11.getY();
        boolean boolean44 = point2.dominates(point11);
        int int45 = point11.getY();
        int int46 = point11.getY();
        int int47 = point11.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
    }

    @Test
    public void test2478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2478");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 52);
        boolean boolean16 = point5.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        int int24 = point22.getY();
        int int25 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean29 = point22.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean33 = point22.dominates(point32);
        int int34 = point22.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int38 = point37.getX();
        boolean boolean39 = point22.dominates(point37);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        int int43 = point42.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 1, 1);
        boolean boolean47 = point42.dominates(point46);
        boolean boolean48 = point22.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        boolean boolean52 = point42.dominates(point51);
        boolean boolean53 = point15.dominates(point42);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test2479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2479");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean7 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        int int15 = point13.getY();
        int int16 = point13.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean20 = point13.dominates(point19);
        boolean boolean21 = point2.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int25 = point24.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean29 = point24.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean36 = point32.dominates(point35);
        int int37 = point35.getY();
        int int38 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean42 = point35.dominates(point41);
        boolean boolean43 = point24.dominates(point35);
        boolean boolean44 = point2.dominates(point24);
        int int45 = point24.getY();
        int int46 = point24.getY();
        int int47 = point24.getX();
        int int48 = point24.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test2480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2480");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 1);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point9.getY();
        int int12 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean16 = point9.dominates(point15);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean20 = point9.dominates(point19);
        int int21 = point9.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point9.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int33 = point32.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        int int41 = point36.getX();
        boolean boolean42 = point32.dominates(point36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int46 = point45.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean53 = point49.dominates(point52);
        int int54 = point49.getX();
        boolean boolean55 = point45.dominates(point49);
        int int56 = point49.getX();
        boolean boolean57 = point32.dominates(point49);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int61 = point60.getX();
        int int62 = point60.getY();
        boolean boolean63 = point32.dominates(point60);
        boolean boolean64 = point9.dominates(point32);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point67 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, (int) 'a');
        boolean boolean68 = point9.dominates(point67);
        boolean boolean69 = point2.dominates(point9);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point72 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, 52);
        boolean boolean73 = point9.dominates(point72);
        int int74 = point72.getY();
        int int75 = point72.getY();
        int int76 = point72.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 52 + "'", int75 == 52);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 52 + "'", int76 == 52);
    }

    @Test
    public void test2481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2481");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getX();
        int int6 = point2.getY();
        int int7 = point2.getX();
        int int8 = point2.getX();
        int int9 = point2.getY();
        int int10 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test2482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2482");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (byte) 100);
        java.lang.Class<?> wildcardClass3 = point2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2483");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (byte) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        int int6 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        boolean boolean23 = point5.dominates(point12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point29.getY();
        int int32 = point29.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean36 = point29.dominates(point35);
        int int37 = point35.getX();
        boolean boolean38 = point5.dominates(point35);
        boolean boolean39 = point2.dominates(point35);
        int int40 = point35.getY();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 97 + "'", int37 == 97);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test2484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2484");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean6 = point2.dominates(point5);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int10 = point9.getX();
        int int11 = point9.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int15 = point14.getX();
        boolean boolean16 = point9.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int20 = point19.getY();
        boolean boolean21 = point14.dominates(point19);
        int int22 = point14.getX();
        boolean boolean23 = point5.dominates(point14);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        boolean boolean42 = point32.dominates(point40);
        int int43 = point40.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int47 = point46.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        int int55 = point50.getX();
        boolean boolean56 = point46.dominates(point50);
        boolean boolean57 = point40.dominates(point46);
        boolean boolean58 = point26.dominates(point40);
        int int59 = point26.getY();
        int int60 = point26.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 100);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) (byte) 1);
        boolean boolean70 = point66.dominates(point69);
        boolean boolean71 = point63.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(32, (int) (byte) 0);
        int int75 = point74.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) 'a', 10);
        int int79 = point78.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point82 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) ' ');
        int int83 = point82.getY();
        boolean boolean84 = point78.dominates(point82);
        int int85 = point78.getY();
        boolean boolean86 = point74.dominates(point78);
        boolean boolean87 = point63.dominates(point78);
        boolean boolean88 = point26.dominates(point63);
        boolean boolean89 = point5.dominates(point63);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point90 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = point63.dominates(point90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read field \"x\" because \"p1\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 32 + "'", int75 == 32);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 32 + "'", int83 == 32);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test2485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2485");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, 1);
        int int3 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 1, 35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) ' ');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean16 = point12.dominates(point15);
        int int17 = point15.getY();
        int int18 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean22 = point15.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        boolean boolean26 = point15.dominates(point25);
        int int27 = point25.getX();
        boolean boolean28 = point9.dominates(point25);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point31 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int32 = point31.getX();
        int int33 = point31.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int37 = point36.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        int int45 = point40.getX();
        boolean boolean46 = point36.dominates(point40);
        int int47 = point36.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean54 = point50.dominates(point53);
        int int55 = point53.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point61 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean62 = point58.dominates(point61);
        boolean boolean63 = point53.dominates(point61);
        int int64 = point61.getX();
        int int65 = point61.getX();
        boolean boolean66 = point36.dominates(point61);
        int int67 = point36.getX();
        boolean boolean68 = point31.dominates(point36);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int72 = point71.getX();
        int int73 = point71.getY();
        int int74 = point71.getX();
        boolean boolean75 = point36.dominates(point71);
        boolean boolean76 = point9.dominates(point71);
        boolean boolean77 = point6.dominates(point9);
        int int78 = point9.getY();
        boolean boolean79 = point2.dominates(point9);
        int int80 = point2.getY();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 32 + "'", int78 == 32);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test2486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2486");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        boolean boolean19 = point2.dominates(point16);
        int int20 = point2.getY();
        int int21 = point2.getY();
        int int22 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int26 = point25.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point29.getX();
        boolean boolean35 = point25.dominates(point29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int39 = point38.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point42 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean46 = point42.dominates(point45);
        int int47 = point42.getX();
        boolean boolean48 = point38.dominates(point42);
        int int49 = point42.getX();
        boolean boolean50 = point25.dominates(point42);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point53 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point56 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean57 = point53.dominates(point56);
        int int58 = point56.getY();
        int int59 = point56.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point62 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean63 = point56.dominates(point62);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        int int71 = point69.getY();
        int int72 = point69.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point75 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean76 = point69.dominates(point75);
        boolean boolean77 = point56.dominates(point69);
        boolean boolean78 = point42.dominates(point69);
        int int79 = point69.getY();
        int int80 = point69.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point83 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int84 = point83.getX();
        int int85 = point83.getY();
        int int86 = point83.getY();
        boolean boolean87 = point69.dominates(point83);
        int int88 = point83.getX();
        boolean boolean89 = point2.dominates(point83);
        int int90 = point83.getX();
        java.lang.Class<?> wildcardClass91 = point83.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 52 + "'", int85 == 52);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 52 + "'", int86 == 52);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2487");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        int int16 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int20 = point19.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point23 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean27 = point23.dominates(point26);
        int int28 = point23.getX();
        boolean boolean29 = point19.dominates(point23);
        boolean boolean30 = point13.dominates(point19);
        int int31 = point13.getX();
        int int32 = point13.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int36 = point35.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean40 = point35.dominates(point39);
        boolean boolean41 = point13.dominates(point35);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        int int45 = point44.getY();
        boolean boolean46 = point13.dominates(point44);
        java.lang.Class<?> wildcardClass47 = point44.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test2488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2488");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean10 = point6.dominates(point9);
        int int11 = point6.getX();
        boolean boolean12 = point2.dominates(point6);
        int int13 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean20 = point16.dominates(point19);
        int int21 = point19.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        boolean boolean29 = point19.dominates(point27);
        int int30 = point27.getX();
        int int31 = point27.getX();
        boolean boolean32 = point2.dominates(point27);
        int int33 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 0);
        boolean boolean37 = point2.dominates(point36);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test2489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2489");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) '#');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int6 = point5.getX();
        int int7 = point5.getY();
        int int8 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 100, 0);
        int int12 = point11.getY();
        boolean boolean13 = point5.dominates(point11);
        int int14 = point11.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        int int22 = point20.getY();
        int int23 = point20.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        boolean boolean27 = point20.dominates(point26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point30 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean34 = point30.dominates(point33);
        int int35 = point33.getY();
        int int36 = point33.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean40 = point33.dominates(point39);
        boolean boolean41 = point20.dominates(point33);
        boolean boolean42 = point11.dominates(point33);
        int int43 = point11.getY();
        boolean boolean44 = point2.dominates(point11);
        int int45 = point11.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, (int) (byte) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point51 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point54 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean55 = point51.dominates(point54);
        int int56 = point54.getY();
        int int57 = point54.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean61 = point54.dominates(point60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point64 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean65 = point54.dominates(point64);
        int int66 = point64.getX();
        int int67 = point64.getY();
        int int68 = point64.getY();
        boolean boolean69 = point48.dominates(point64);
        int int70 = point64.getX();
        boolean boolean71 = point11.dominates(point64);
        int int72 = point11.getX();
        int int73 = point11.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 32 + "'", int67 == 32);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 32 + "'", int68 == 32);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
    }

    @Test
    public void test2490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2490");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        int int18 = point15.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int22 = point21.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        boolean boolean26 = point21.dominates(point25);
        boolean boolean27 = point15.dominates(point25);
        int int28 = point15.getY();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 32 + "'", int28 == 32);
    }

    @Test
    public void test2491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2491");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) 'a');
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int6 = point5.getX();
        int int7 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int11 = point10.getX();
        boolean boolean12 = point5.dominates(point10);
        boolean boolean13 = point2.dominates(point5);
        int int14 = point2.getX();
        int int15 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) ' ', 97);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        int int22 = point21.getX();
        int int23 = point21.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(97, 1);
        boolean boolean27 = point21.dominates(point26);
        boolean boolean28 = point18.dominates(point21);
        int int29 = point18.getY();
        boolean boolean30 = point2.dominates(point18);
        int int31 = point18.getX();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 32 + "'", int31 == 32);
    }

    @Test
    public void test2492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2492");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean14 = point10.dominates(point13);
        boolean boolean15 = point5.dominates(point13);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean22 = point18.dominates(point21);
        boolean boolean23 = point13.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        boolean boolean42 = point32.dominates(point40);
        boolean boolean43 = point26.dominates(point40);
        boolean boolean44 = point21.dominates(point40);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 10, (int) (short) 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 100);
        boolean boolean51 = point47.dominates(point50);
        boolean boolean52 = point21.dominates(point47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(100, (int) ' ');
        boolean boolean56 = point21.dominates(point55);
        int int57 = point55.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
    }

    @Test
    public void test2493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2493");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point3 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean7 = point3.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point3 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList9 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList9, pointArray8);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList12 = skylineAlgorithm11.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = skylineAlgorithm0.produceFinalSkyLine(pointList9, pointList12);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList14 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList15 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList18 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList19 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList20 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point27 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean28 = point24.dominates(point27);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point24 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList30, pointArray29);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm32.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm21.produceFinalSkyLine(pointList30, pointList33);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point41 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean42 = point38.dominates(point41);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point38 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList44 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList44, pointArray43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList47 = skylineAlgorithm46.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList48 = skylineAlgorithm35.produceFinalSkyLine(pointList44, pointList47);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm49 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean56 = point52.dominates(point55);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray57 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point52 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList58 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList58, pointArray57);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = skylineAlgorithm60.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList62 = skylineAlgorithm49.produceFinalSkyLine(pointList58, pointList61);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point66 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point69 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean70 = point66.dominates(point69);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray71 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point66 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList72 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList72, pointArray71);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm74 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList75 = skylineAlgorithm74.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList76 = skylineAlgorithm63.produceFinalSkyLine(pointList72, pointList75);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList77 = skylineAlgorithm35.produceFinalSkyLine(pointList62, pointList72);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm78 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point81 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point84 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean85 = point81.dominates(point84);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray86 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point81 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList87 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList87, pointArray86);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm89 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList90 = skylineAlgorithm89.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList91 = skylineAlgorithm78.produceFinalSkyLine(pointList87, pointList90);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList92 = skylineAlgorithm35.produceSubSkyLines(pointList87);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList93 = skylineAlgorithm0.produceFinalSkyLine(pointList30, pointList87);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList94 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList95 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList96 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList97 = skylineAlgorithm0.getPoints();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(pointArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pointList12);
        org.junit.Assert.assertNotNull(pointList13);
        org.junit.Assert.assertNotNull(pointList14);
        org.junit.Assert.assertNotNull(pointList15);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertNotNull(pointList18);
        org.junit.Assert.assertNotNull(pointList19);
        org.junit.Assert.assertNotNull(pointList20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(pointArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(pointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(pointList47);
        org.junit.Assert.assertNotNull(pointList48);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(pointArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(pointList61);
        org.junit.Assert.assertNotNull(pointList62);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(pointArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(pointList75);
        org.junit.Assert.assertNotNull(pointList76);
        org.junit.Assert.assertNotNull(pointList77);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(pointArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(pointList90);
        org.junit.Assert.assertNotNull(pointList91);
        org.junit.Assert.assertNotNull(pointList92);
        org.junit.Assert.assertNotNull(pointList93);
        org.junit.Assert.assertNotNull(pointList94);
        org.junit.Assert.assertNotNull(pointList95);
        org.junit.Assert.assertNotNull(pointList96);
        org.junit.Assert.assertNotNull(pointList97);
    }

    @Test
    public void test2494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2494");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) '4');
        int int3 = point2.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point6 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(52, (int) (short) 0);
        int int7 = point6.getY();
        boolean boolean8 = point2.dominates(point6);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point14 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean15 = point11.dominates(point14);
        int int16 = point14.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point19 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean23 = point19.dominates(point22);
        boolean boolean24 = point14.dominates(point22);
        int int25 = point22.getY();
        int int26 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int30 = point29.getX();
        int int31 = point29.getX();
        int int32 = point29.getX();
        int int33 = point29.getX();
        int int34 = point29.getY();
        boolean boolean35 = point22.dominates(point29);
        boolean boolean36 = point2.dominates(point29);
        int int37 = point2.getX();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test2495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2495");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int21 = point20.getX();
        int int22 = point20.getX();
        int int23 = point20.getX();
        int int24 = point20.getY();
        boolean boolean25 = point15.dominates(point20);
        int int26 = point15.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point32 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean33 = point29.dominates(point32);
        int int34 = point32.getY();
        boolean boolean35 = point15.dominates(point32);
        int int36 = point15.getY();
        int int37 = point15.getX();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test2496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2496");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int3 = point2.getX();
        int int4 = point2.getX();
        int int5 = point2.getX();
        int int6 = point2.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point9 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean13 = point9.dominates(point12);
        int int14 = point12.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point17 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point20 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean21 = point17.dominates(point20);
        boolean boolean22 = point12.dominates(point20);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point28 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean29 = point25.dominates(point28);
        boolean boolean30 = point20.dominates(point28);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point33 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '#', (int) (short) 1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point39 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean40 = point36.dominates(point39);
        int int41 = point39.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point47 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean48 = point44.dominates(point47);
        boolean boolean49 = point39.dominates(point47);
        boolean boolean50 = point33.dominates(point47);
        boolean boolean51 = point28.dominates(point47);
        boolean boolean52 = point2.dominates(point28);
        java.lang.Class<?> wildcardClass53 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test2497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2497");
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm0 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList1 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList3 = skylineAlgorithm2.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm4 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point7 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point10 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean11 = point7.dominates(point10);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray12 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point7 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList13 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList13, pointArray12);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList16 = skylineAlgorithm15.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList17 = skylineAlgorithm4.produceFinalSkyLine(pointList13, pointList16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm18 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point24 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean25 = point21.dominates(point24);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point21 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList27 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList27, pointArray26);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList30 = skylineAlgorithm29.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList31 = skylineAlgorithm18.produceFinalSkyLine(pointList27, pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList32 = skylineAlgorithm2.produceFinalSkyLine(pointList17, pointList30);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList33 = skylineAlgorithm0.produceSubSkyLines(pointList32);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList34 = skylineAlgorithm0.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList35 = skylineAlgorithm0.getPoints();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm36 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point43 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean44 = point40.dominates(point43);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray45 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point40 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList46 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList46, pointArray45);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList49 = skylineAlgorithm48.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList50 = skylineAlgorithm37.produceFinalSkyLine(pointList46, pointList49);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList51 = skylineAlgorithm36.produceSubSkyLines(pointList46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm52 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean59 = point55.dominates(point58);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] pointArray60 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point[] { point55 };
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList61 = new java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point>) pointList61, pointArray60);
        com.thealgorithms.divideandconquer.SkylineAlgorithm skylineAlgorithm63 = new com.thealgorithms.divideandconquer.SkylineAlgorithm();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList64 = skylineAlgorithm63.getPoints();
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList65 = skylineAlgorithm52.produceFinalSkyLine(pointList61, pointList64);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList66 = skylineAlgorithm36.produceSubSkyLines(pointList65);
        java.util.ArrayList<com.thealgorithms.divideandconquer.SkylineAlgorithm.Point> pointList67 = skylineAlgorithm0.produceSubSkyLines(pointList65);
        java.lang.Class<?> wildcardClass68 = skylineAlgorithm0.getClass();
        org.junit.Assert.assertNotNull(pointList1);
        org.junit.Assert.assertNotNull(pointList3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(pointArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(pointList16);
        org.junit.Assert.assertNotNull(pointList17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(pointList30);
        org.junit.Assert.assertNotNull(pointList31);
        org.junit.Assert.assertNotNull(pointList32);
        org.junit.Assert.assertNotNull(pointList33);
        org.junit.Assert.assertNotNull(pointList34);
        org.junit.Assert.assertNotNull(pointList35);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(pointArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(pointList49);
        org.junit.Assert.assertNotNull(pointList50);
        org.junit.Assert.assertNotNull(pointList51);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(pointArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(pointList64);
        org.junit.Assert.assertNotNull(pointList65);
        org.junit.Assert.assertNotNull(pointList66);
        org.junit.Assert.assertNotNull(pointList67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2498");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((-1), (int) (short) 1);
        int int3 = point2.getX();
        int int4 = point2.getX();
        java.lang.Class<?> wildcardClass5 = point2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2499");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) -1, (int) (byte) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point8 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean9 = point5.dominates(point8);
        int int10 = point8.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point13 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point16 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean17 = point13.dominates(point16);
        boolean boolean18 = point8.dominates(point16);
        int int19 = point16.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point22 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, 52);
        int int23 = point22.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point26 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point29 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean30 = point26.dominates(point29);
        int int31 = point26.getX();
        boolean boolean32 = point22.dominates(point26);
        boolean boolean33 = point16.dominates(point22);
        boolean boolean34 = point2.dominates(point16);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point37 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point40 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean41 = point37.dominates(point40);
        int int42 = point40.getY();
        int int43 = point40.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point46 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean47 = point40.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point50 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        boolean boolean51 = point46.dominates(point50);
        boolean boolean52 = point16.dominates(point46);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point55 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) 0, 0);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point58 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, 1);
        boolean boolean59 = point55.dominates(point58);
        int int60 = point58.getY();
        boolean boolean61 = point16.dominates(point58);
        int int62 = point58.getY();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test2500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2500");
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point2 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point5 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean6 = point2.dominates(point5);
        int int7 = point5.getY();
        int int8 = point5.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point11 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean12 = point5.dominates(point11);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point15 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(1, (int) (byte) 10);
        boolean boolean16 = point5.dominates(point15);
        int int17 = point5.getY();
        int int18 = point5.getX();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point21 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, 0);
        int int22 = point21.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point25 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) '4', (int) (short) 0);
        int int26 = point25.getX();
        int int27 = point25.getX();
        int int28 = point25.getX();
        int int29 = point25.getY();
        int int30 = point25.getY();
        boolean boolean31 = point21.dominates(point25);
        boolean boolean32 = point5.dominates(point21);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point35 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point38 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point(0, (int) (short) -1);
        boolean boolean39 = point35.dominates(point38);
        int int40 = point38.getY();
        int int41 = point38.getY();
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point44 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (byte) -1, (int) (short) 1);
        boolean boolean45 = point38.dominates(point44);
        com.thealgorithms.divideandconquer.SkylineAlgorithm.Point point48 = new com.thealgorithms.divideandconquer.SkylineAlgorithm.Point((int) (short) 0, (int) ' ');
        boolean boolean49 = point38.dominates(point48);
        int int50 = point48.getY();
        boolean boolean51 = point21.dominates(point48);
        int int52 = point48.getY();
        java.lang.Class<?> wildcardClass53 = point48.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 32 + "'", int50 == 32);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 32 + "'", int52 == 32);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }
}

